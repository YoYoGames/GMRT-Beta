/**
 * This function gets the value at a specific point in time from a channel struct. 
 * @returns {Real}
 * @param {Struct.AnimCurveChannel} channel_struct - The struct pointer for the channel to evaluate.
 * @param {Real} posx - The position in time to check (from 0 to 1).
 */
declare function animcurve_channel_evaluate(channel_struct: AnimCurveChannel,posx: Real): Real;

/**
 * This function creates a new animation curve channel struct.
 * @returns {Struct.AnimCurveChannel}
 */
declare function animcurve_channel_new(): AnimCurveChannel;

/**
 * This function creates an empty animation curve struct, ready for you to populate with channel data.
 * @returns {Struct.AnimCurve}
 */
declare function animcurve_create(): AnimCurve;

/**
 * This function destroys an animation curve previously created with the function animcurve_create().
 * @returns {Undefined}
 * @param {Struct.AnimCurve} curve_struct - The pointer to the curve struct to destroy.
 */
declare function animcurve_destroy(curve_struct: AnimCurve): Undefined;

/**
 * This function returns a struct containing all the data for the given animation curve.
 * @returns {Struct.AnimCurve}
 * @param {Asset.GMAnimCurve} curve_id - The asset ID (index) of the animation curve to get.
 */
declare function animcurve_get(curve_id: GMAnimCurve): AnimCurve;

/**
 * This function returns the struct containing the channel data for the channel specified in an animation curve asset or struct (as returned by animcurve_get()).
 * @returns {Struct.AnimCurveChannel}
 * @param {Any} curve_struct_or_id - The ID or struct pointer of the animation curve to target
 * @param {Any} channel_name_or_index - The channel name (a string) or the channel index (an integer).
 */
declare function animcurve_get_channel(curve_struct_or_id: Any,channel_name_or_index: Any): AnimCurveChannel;

/**
 * This function returns the index value for any given animation curve channel.
            
            You supply the animation curve ID or struct, where the curve ID is the name of the animation curve as it was defined in the Asset Browser, or the struct pointer as returned by the function animcurve_create(). You then supply the name of the channel, as a string, and the function will return the index value associated with that channel. Note that if the curve or channel does not exist then you will get an error.
 * @returns {Real}
 * @param {Struct.AnimCurve} curve_struct_or_id - The ID or struct pointer of the animation curve to target
 * @param {String} channel_name - The channel name (a string).
 */
declare function animcurve_get_channel_index(curve_struct_or_id: AnimCurve,channel_name: String): Real;

/**
 * This function creates a new points struct (posx, value) to be added to an animation curve channel.
 * @returns {Struct.AnimCurvePoint}
 */
declare function animcurve_point_new(): AnimCurvePoint;

/**
 * This function adds one or more tag strings to any asset from the Asset Browser.
            
            You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.
 * @returns {Bool}
 * @param {Any} name_or_index - The name of the asset (a string) or its index value (an integer).
 * @param {Any} tags - A single asset tag string or an array with various asset tags.
 * @param {Constant.AssetType} asset_type - OPTIONAL! The type of asset to set the tags on, only used when supplying an index for the first argument.
 */
declare function asset_add_tags(name_or_index: Any,tags: Any,asset_type: AssetType): Bool;

/**
 * This function clears all tags present on the given asset from the Asset Browser and returns whether any tags were removed.
            
            You supply either the asset name (as a string) or its asset index, and if you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.
 * @returns {Bool}
 * @param {Any} name_or_index - The name of the asset (a string) or its index value (an integer).
 * @param {Constant.AssetType} asset_type - OPTIONAL! The type of asset to clear the tags from, only used when supplying an index for the first argument.
 */
declare function asset_clear_tags(name_or_index: Any,asset_type: AssetType): Bool;

/**
 * This function gets the unique identifying index for a game asset from its name.
            
            If the asset is not found, the function will return a value of -1, otherwise it will return the unique index id for the asset being checked. This id can then be used in other functions as you would any other index value, like the sprite_index or the path_index, for example. Please note that although this function can be used to reference assets from strings, you should always make sure that the asset exists before using it otherwise you may get errors that will crash your game.
 * @returns {Asset}
 * @param {Any} name - The name of the game asset to get the index of (a string).
 */
declare function asset_get_index(name: Any): Asset;

/**
 * This function retrieves all tags assigned to an asset from the Asset Browser.
            
            You supply either the asset name (as a string) or its asset index, and the function will return an array of tags for that asset. If no tags are found or there is an error (ie: the name string given doesn't exist) then the returned array will be empty. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.
 * @returns {Array[String]}
 * @param {Any} name_or_index - The name of the asset (a string) or its index value (an integer).
 * @param {Constant.AssetType} asset_type - OPTIONAL! The type of asset to get the tags for, only used when supplying an index for the first argument.
 */
declare function asset_get_tags(name_or_index: Any,asset_type: AssetType): Array[String];

/**
 * This function gets the type of asset being referenced from its name (a string).
 * @returns {Constant.AssetType}
 * @param {Any} name - The name of the game asset to get the type of (a string).
 */
declare function asset_get_type(name: Any): AssetType;

/**
 * This function returns an array containing IDs of all existing assets of given type.
 * @returns {Array[Asset]}
 * @param {Constant.AssetType} asset_type - The type of assets to retrieve an array of.
 */
declare function asset_get_ids(asset_type: AssetType): Array[Asset];

/**
 * This function checks if one or more tag strings is assigned to the given asset from the Asset Browser.
            
            You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.
 * @returns {Bool}
 * @param {Any} name_or_index - The name of the asset (a string) or its index value (an integer).
 * @param {Any} tags - A single asset tag string or an array with various asset tags.
 * @param {Constant.AssetType} asset_type - OPTIONAL! The type of asset to check the tags for, only used when supplying an index for the first argument.
 */
declare function asset_has_tags(name_or_index: Any,tags: Any,asset_type: AssetType): Bool;

/**
 * This function removes one or more tag strings to any asset from the Asset Browser.
            
            You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.
 * @returns {Bool}
 * @param {Any} name_or_index - The name of the asset (a string) or its index value (an integer).
 * @param {Any} tags - A single asset tag string or an array with various asset tags.
 * @param {Constant.AssetType} asset_type - OPTIONAL! The type of asset to remove the tags from, only used when supplying an index for the first argument.
 */
declare function asset_remove_tags(name_or_index: Any,tags: Any,asset_type: AssetType): Bool;

/**
 * This function retrieves the names of all assets that have been assigned the given tag or tags.
            
            You supply either a single tag string or an array, where each item in the array is a tag string. The function will return an array where each entry is the name (as a string) of the asset with the given tag. If you need the unique index for the asset, then you can use the function asset_get_index() along with the returned name. If there are no assets with the given tag(s), or if there is an error (e.g., the given tags do not exist), then an empty array will be returned.
 * @returns {Array[String]}
 * @param {Any} tags - A single asset tag string or an array with various asset tags.
 */
declare function tag_get_assets(tags: Any): Array[String];

/**
 * This function gets all the assets of a given type that have the given tags assigned to them.
            
            You supply either a single tag (as a string) or an array, where each item in the array is a tag (as a string), as well as the type of asset to check.
 * @returns {Array[Asset]}
 * @param {Any} tags - A single asset tag string or an array with various asset tags.
 * @param {Constant.AssetType} asset_type - An asset type constant (listed above)
 */
declare function tag_get_asset_ids(tags: Any,asset_type: AssetType): Array[Asset];

/**
 * With this function you can set how many audio channels are available for playing audio in GameMaker. What this basically means is that you give the number of simultaneous sounds that can be played at any one time, and if the number exceeds the amount, those sounds with a lower priority are stopped to free up a channel for the sounds with a higher priority. You can use this function to optimise your game for devices as the lower the number of channels for audio the better the performance, but bear in mind that this may also cause noticeable cut off of certain sounds if many are played at once.
 * @returns {Undefined}
 * @param {Real} num - Number of available audio channels (default is 128).
 */
declare function audio_channel_num(num: Real): Undefined;

/**
 * With this function you can create a new sound index which can then be used in the regular audio functions to stream audio directly from an external OGG file source. The function requires the filename (which can be an included file, for example) and will return the new sound index for use. Note that after you no longer need the sound you should call the function audio_destroy_stream() with the sound index to remove it from memory otherwise you may get a memory leak which will slow down and eventually crash your game.
 * @returns {Asset.GMSound}
 * @param {String} filename - The file (OGG only) to stream the audio from.
 */
declare function audio_create_stream(filename: String): GMSound;

/**
 * This function can be used to display debug information about the audio system, with true switching it on and false to switch it off. When you are debugging audio in this way, the overlay will show the following information:
 * @returns {Undefined}
 * @param {Bool} enable - Enable (set to true) or disable (false) audio debugging.
 */
declare function audio_debug(enable: Bool): Undefined;

/**
 * This function can be used to toggle whether errors returned from the audio engine should throw runtime errors which abort the game.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable throwing.
 */
declare function audio_throw_on_error(enable: Bool): Undefined;

/**
 * If you have previously created an audio stream from a file using the function audio_create_stream() and no longer need that sound, you can call this function to delete it from memory. The function returns 1 if the stream was successfully destroyed and -1 if it wasn't. Any further calls to the sound index after it has been destroyed will give an error. It should be noted that this will free up the stream but on the target platform this may not show up in a memory manager. This is because GameMaker pools memory resources to prevent memory allocation overhead, and so the memory will remain allocated until required for something else or re-used for a new stream.
 * @returns {Real}
 * @param {Asset.GMSound} sound - The sound asset, as returned by audio_create_stream.
 */
declare function audio_destroy_stream(sound: GMSound): Real;

/**
 * This function returns whether a sound exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent asset indices. The sound to check can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset.
 * @returns {Bool}
 * @param {Any} index - The index of the sound to check the existence of.
 */
declare function audio_exists(index: Any): Bool;

/**
 * To add more versatility to the audio engine, GameMaker permits you to select the falloff model that suits your game. This model will be used for all the audio functions in the game or app, and so you should make sure that the model you choose is the correct one, as each one will affect how the listener perceives the sounds you play through emitters or with the function audio_play_sound_at.
 * @returns {Undefined}
 * @param {Constant.AudioFalloff} model - The constant used to set the falloff model.
 */
declare function audio_falloff_set_model(model: AudioFalloff): Undefined;

/**
 * With this function you can get the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. The gain value returned is based on a linear scale from 0 (silent) to 1 (full volume). Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered "full volume" and anything greater may introduce audio clipping.
 * @returns {Real}
 * @param {Id.AudioListener} listenerindex - The index of the listener to get the gain of.
 */
declare function audio_get_master_gain(listenerindex: AudioListener): Real;

/**
 * This function will return the name of a given audio resource as a string. The "index" value can be that of the resource itself (as seen in the Asset Browser) or the unique ID value that is given when you play the sound using, for example, audio_play_sound(). Note that the string returned is not the same as the resource ID and cannot be used to access the resource itself, so should only be used for displaying or error checking.
 * @returns {String}
 * @param {Any} index - The index of the sound to check.
 */
declare function audio_get_name(index: Any): String;

/**
 * When adding audio to GameMaker it can be either streamed or in memory. If you need to know whether a given sound index is for streamed audio or not you can use this function which will return 1 for streamed, 0 for sound in memory, and -1 if there is any error or the index does not point to a valid sound resource.
 * @returns {Real}
 * @param {Any} index - The index of the sound to check.
 */
declare function audio_get_type(index: Any): Real;

/**
 * This function will check the given sound to see if it is currently paused. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be checked and if any of them are paused the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Any} index - The index of the sound to check.
 */
declare function audio_is_paused(index: Any): Bool;

/**
 * This function will check the given sound to see if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be checked and if any of them are playing the function will return true otherwise it will return false. Note that this function will still return true if the sound being checked has previously been paused using the audio_pause_sound() function.
 * @returns {Bool}
 * @param {Any} index - The index of the sound to check.
 */
declare function audio_is_playing(index: Any): Bool;

/**
 * With this function you can set the absolute value for the global volume of all sounds and music. It is based on a linear scale from 0 (silent) to any value greater than 0, although normally you'd consider the maximum volume as 1. Anything over 1 can be used but, depending on the sound used and the platform being compiled to, you may get distortion or clipping when the sound is played back. This function will affect the relative volume of all sounds and music played from within your game.
 * @returns {Undefined}
 * @param {Real} gain - Value for the global volume (0 to 1).
 */
declare function audio_master_gain(gain: Real): Undefined;

/**
 * With this function you can pause all sounds that are currently playing.
 * @returns {Undefined}
 */
declare function audio_pause_all(): Undefined;

/**
 * With this function you can pause any sound that is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be paused.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to pause.
 */
declare function audio_pause_sound(index: Any): Undefined;

/**
 * With this function you can play any sound resource in your game. You provide the sound index and assign it a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function audio_channel_num(). Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as GameMaker will prioritize them the same). Note that when dealing with priority, the higher the number the higher the priority, such that a sound with priority 100 will be favoured over a sound with priority 1. The final argument is for making the sound loop and setting it to true will make the sound loop until it is stopped and setting it to false will play the sound once only.
 * @returns {Id.Sound}
 * @param {Asset.GMSound} index - The index of the sound to play.
 * @param {Real} priority - Set the channel priority for the sound.
 * @param {Bool} loop - Sets the sound to loop or not.
 * @param {Real} gain - Sets the gain of the sound played.
 * @param {Any} offset - Sets the start offset (in seconds) of the sound played.
 * @param {Real} pitch - Sets the pitch of the sound played.
 * @param {Real} listener_mask - Sets the listener mask of the sound played.
 */
declare function audio_play_sound(index: GMSound,priority: Real,loop: Bool,gain: Real,offset: Any,pitch: Real,listener_mask: Real): Sound;

/**
 * With this function you can play any sound resource at a given position within the audio space. You provide the sound index and then assign it a position within the 3D space. The default listener position is (0, 0, 0) so this means that if the listener has not been moved and you want the sound to come from the left (for example), you should set the x position to a negative value (for more information on setting the listener position see audio_listener_position()).
 * @returns {Id.Sound}
 * @param {Asset.GMSound} index - The index of the sound to play.
 * @param {Real} x - The x position.
 * @param {Real} y - The y position.
 * @param {Real} z - The z position.
 * @param {Real} falloff_ref - The falloff reference relative to the listener (clamp).
 * @param {Real} falloff_max - The maximum falloff distance relative to the listener.
 * @param {Real} falloff_factor - The falloff factor (default 1).
 * @param {Bool} loop - Flags the sound as looping or not.
 * @param {Real} priority - Set the channel priority for the sound.
 * @param {Real} gain - Sets the gain of the sound played.
 * @param {Any} offset - Sets the start offset (in seconds) of the sound played.
 * @param {Real} pitch - Sets the pitch of the sound played.
 * @param {Real} listener_mask - Sets the listener mask of the sound played.
 */
declare function audio_play_sound_at(index: GMSound,x: Real,y: Real,z: Real,falloff_ref: Real,falloff_max: Real,falloff_factor: Real,loop: Bool,priority: Real,gain: Real,offset: Any,pitch: Real,listener_mask: Real): Sound;

/**
 * With this function you can play any sound resource in your game. You provide a struct which contains a set of required parameters as well as any additional playback parameters. Parameters not specified will fall back to their default values/behaviour.
 * @returns {Id.Sound}
 * @param {Struct} params - A struct containing a set of playback parameters.
 */
declare function audio_play_sound_ext(params: Struct): Sound;

/**
 * This function will return a reference to the audio asset being played by the voice represented by the given voice index, or undefined if the voice index does not refer to an active voice.
 * @returns {Asset.GMSound}
 * @param {Id.Sound} index - The voice index of the sound.
 */
declare function audio_sound_get_asset(index: Sound): GMSound;

/**
 * With this function you can resume all sounds that have been paused previously.
 * @returns {Undefined}
 */
declare function audio_resume_all(): Undefined;

/**
 * With this function you can resume any sound that is currently paused (after using the function audio_pause_sound()). The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be re-started.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to resume.
 */
declare function audio_resume_sound(index: Any): Undefined;

/**
 * With this function you can set the absolute value for the global volume of all sounds and music for a specific listener. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. The gain value is based on a linear scale from 0 (silent) to 1 (full volume) and will affect the relative volume of all sounds and music played from within your game through that listener.
 * @returns {Undefined}
 * @param {Id.AudioListener} listenerindex - The index of the listener to set the gain on.
 * @param {Real} gain - Value for the global volume (0 to 1).
 */
declare function audio_set_master_gain(listenerindex: AudioListener,gain: Real): Undefined;

/**
 * With this function you can fade a sound in or out over a given length of time, or it can be used to set the sound gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the sound to have reached by the end of that time. This gain can be between 0 (silent) and any value greater than 0, although normally you'd consider the maximum volume as 1. Anything over 1 can be used but, depending on the sound used and the platform being compiled to, you may get distortion or clipping when the sound is played back. Note that the gain scale is linear, and to instantly change the gain, simply set the time argument to 0.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to set the gain for.
 * @param {Real} volume - Value for the music volume.
 * @param {Real} time - The length for the change in gain in milliseconds.
 */
declare function audio_sound_gain(index: Any,volume: Real,time: Real): Undefined;

/**
 * This function will return the current gain value for the given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser. Gain is usually calculated as a value from 0 to 1, but on some platforms you can have a gain of greater than 1, although a value of 1 is considered "full volume" and anything greater may introduce audio clipping.
 * @returns {Real}
 * @param {Any} index - The index of the sound to get the gain of.
 */
declare function audio_sound_get_gain(index: Any): Real;

/**
 * This function will return the bit-mask data that defines which audio listeners a sound should be played from. See the section on Audio Listeners for more information.
 * @returns {Real}
 * @param {Any} soundid - The unique ID of the sound to get the mask of
 */
declare function audio_sound_get_listener_mask(soundid: Any): Real;

/**
 * This function can be used to get the get pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser.
 * @returns {Real}
 * @param {Any} index - The index of the sound to get the pitch of.
 */
declare function audio_sound_get_pitch(index: Any): Real;

/**
 * This function will get the position (in seconds) within the sound file for the sound to play from. The sound can only be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions).
 * @returns {Real}
 * @param {Any} index - The index of the sound to get the play position of.
 */
declare function audio_sound_get_track_position(index: Any): Real;

/**
 * This function can be used to checks if the given sound index can be played currently. This is needed due to the different ways streamed and unstreamed sound playback is handled on the HTML5 target platform, and will return true if the sound can be played and false if it can't. Note that on all other platforms other than HTML5, the function will always return true..
 * @returns {Bool}
 * @param {Any} index - The index of the sound to check.
 */
declare function audio_sound_is_playable(index: Any): Bool;

/**
 * This function will return the length of the given sound in seconds. The sound can either be a referenced from index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser.
 * @returns {Real}
 * @param {Any} index - The index of the sound to check.
 */
declare function audio_sound_length(index: Any): Real;

/**
 * This function can be used to change the pitch of a given sound. The sound can either be one referenced from an index for an individual sound being played which has been stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions, or an actual sound asset from the Asset Browser. If it is an index of a playing sound, then only that instance will be changed, however when using a sound asset from the Asset Browser, all further instances being played of that sound will be changed.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to change.
 * @param {Real} pitch - The pitch multiplier (default 1).
 */
declare function audio_sound_pitch(index: Any,pitch: Real): Undefined;

/**
 * This function can be used to set the the bit-mask for a sound so that it will play only from those listeners specified. You can create a bit-mask by using the audio_get_listener_info() and then using the bitwise or ("|") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the sound after you have played it. This mask will over-ride the default mask or that which you may have set using the function audio_set_listener_mask().
 * @returns {Undefined}
 * @param {Any} soundid - The unique ID of the sound to set the mask of
 * @param {Real} mask - The bitmask data to set for the sound
 */
declare function audio_sound_set_listener_mask(soundid: Any,mask: Real): Undefined;

/**
 * This function will set the position (in seconds) within the sound file for the sound to play from. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset. If it is a unique sound ID that you use, then the position will change immediately to the new time given, and if it is a Asset Browser asset then all further plays of the given sound will start at the new time. The function will ignore any value given that is longer than the length of the sound given for the "index" value.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to change.
 * @param {Real} time - The time (in seconds) to set the start point to.
 */
declare function audio_sound_set_track_position(index: Any,time: Real): Undefined;

/**
 * This function will set the state of a playing sound's loop section.
 * @returns {Undefined}
 * @param {Id.Sound} index - The index of the sound to change.
 * @param {Bool} state - The state that the loop section should be set to.
 */
declare function audio_sound_loop(index: Sound,state: Bool): Undefined;

/**
 * This function will return the state of a playing sound's loop section.
 * @returns {Bool}
 * @param {Id.Sound} index - The index of the sound whose loop section state is retrieved.
 */
declare function audio_sound_get_loop(index: Sound): Bool;

/**
 * This function will set the offset (in seconds) of the start of a sound's loop section.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to change.
 * @param {Real} time - The offset (in seconds) to set the start of the loop section to.
 */
declare function audio_sound_loop_start(index: Any,time: Real): Undefined;

/**
 * This function will return the offset (in seconds) of the start of a sound's loop section.
 * @returns {Real}
 * @param {Any} index - The index of the sound whose loop-start is retrieved.
 */
declare function audio_sound_get_loop_start(index: Any): Real;

/**
 * This function will set the offset (in seconds) of the end of a sound's loop section.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to change.
 * @param {Real} time - The offset (in seconds) to set the end of the loop section to.
 */
declare function audio_sound_loop_end(index: Any,time: Real): Undefined;

/**
 * This function will return the offset (in seconds) of the end of a sound's loop section.
 * @returns {Real}
 * @param {Any} index - The index of the sound whose loop-end is retrieved.
 */
declare function audio_sound_get_loop_end(index: Any): Real;

/**
 * This function will stop all sounds that are currently playing.
 * @returns {Undefined}
 */
declare function audio_stop_all(): Undefined;

/**
 * This function will stop the given sound if it is currently playing. The sound can either be a single instance of a sound (the index for individual sounds being played can be stored in a variable when using the audio_play_sound() or audio_play_sound_at() functions) or a sound asset, in which case all instances of the given sound will be stopped.
 * @returns {Undefined}
 * @param {Any} index - The index of the sound to stop.
 */
declare function audio_stop_sound(index: Any): Undefined;

/**
 * This function can be used to check and see if the audio system has been initialised, or if the audio context is running. On all platforms, this function will return true immediately after Game Start when the audio engine is initialised, except on the Opera GX and HTML5 targets. On Opera GX and HTML5, the audio context status can change at any time depending on user input, the browser being used, and its version, so this function can be used to check and see if audio can be played or not. If the function returns false (ie: the audio context status is not running), then only unstreamed sounds may play (but it's not guaranteed, and you should assume that no audio can be played), while if it returns true then all audio will play.
 * @returns {Bool}
 */
declare function audio_system_is_available(): Bool;

/**
 * This function can be used to check if the audio engine has been initialised, after which all audio functions can be called normally. For all targets other than HTML5, this will return true on Game Start. On HTML5, this may only begin to return true after Game Start. While audio_system_is_available() reflects the ability to play audio, this function reflects the ability to call audio functions more generally.
 * @returns {Bool}
 */
declare function audio_system_is_initialised(): Bool;

/**
 * With this function you can create a new sound from the contents of a buffer. The buffer will have been created previously (see the buffer functions for details on how to do this), and have had data added or loaded into it. You then pass it to this function with the data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and an offset into the buffer to get the data from. You also need to supply the number of samples in the buffer and the channels that the sound requires. These channels are defined by one of the following constants:
 * @returns {Asset.GMSound}
 * @param {Id.Buffer} bufferId - The ID of the buffer to use.
 * @param {Constant.BufferDataType} bufferFormat - The format of the data in the buffer (buffer_u8 or buffer_s16).
 * @param {Real} bufferRate - The sample rate of the data in the buffer.
 * @param {Real} bufferOffset - The offset into the buffer to read the sample data from (in bytes).
 * @param {Real} bufferLength - The length of the buffer (the number of bytes of audio data, excluding the header).
 * @param {Constant.AudioChannelType} bufferChannels - The channels to use (audio_mono, audio_stereo or audio_3D).
 */
declare function audio_create_buffer_sound(bufferId: Buffer,bufferFormat: BufferDataType,bufferRate: Real,bufferOffset: Real,bufferLength: Real,bufferChannels: AudioChannelType): GMSound;

/**
 * This function prepares a buffer queue for audio. You pass data format (only buffer_u8 or buffer_s16 are currently supported), the sample rate (which can be between 1000hz and 48000hz), and the channels that the audio requires from one of the constants listed below:
 * @returns {Real}
 * @param {Constant.BufferDataType} queueformat - The format of the buffer data to use (buffer_u8 or buffer_s16).
 * @param {Real} queuerate - The sample rate of the data in the buffer queue.
 * @param {Real} queuechannels - The channels to use from one of the constants listed below.
 */
declare function audio_create_play_queue(queueformat: BufferDataType,queuerate: Real,queuechannels: Real): Real;

/**
 * With this function you can free up the pointer index value associated with the sound ID. Freed sounds will not be available for playing, and if multiple instances of the sound are being played they will all be stopped. Note that before you can delete the buffer itself, you must first free all sound ID's associated with it.
 * @returns {Undefined}
 * @param {Real|Asset.GMSound} index - The index of the buffered sound to free.
 */
declare function audio_free_buffer_sound(index: Real|GMSound): Undefined;

/**
 * This function is used to free up the memory associated with the given audio queue. The queue index is the value returned when you created the queue using the function audio_create_play_queue(), and this function should be called when the queue is no longer required to prevent memory leaks. Freeing the queue will stop any sound that is be playing, and you cannot delete the buffer that a sound is being streamed from until the queue it is assigned to has been freed. This function will trigger an Audio Playback Asynchronous Event, and in this event a special DS map will be created in the variable async_load with the following key/value pairs:
 * @returns {Undefined}
 * @param {Real} queueindex - The index of the queue to free.
 */
declare function audio_free_play_queue(queueindex: Real): Undefined;

/**
 * This function will return the number of audio recording sources (like microphones, etc...) currently available to your game. So, if you have a return value of, for example, four, then you will have audio input on the sources 0, 1, 2 and 3, with one of these values being that which you use to start recording from using the function audio_start_recording(). This value can change at any time as people plug/unplug microphones or other input sources to the device. Note that you can use the function audio_get_recorder_info() to get information on each device connected.
 * @returns {Real}
 */
declare function audio_get_recorder_count(): Real;

/**
 * This function will return a DS Map with information about the given recorder source index. You can find out how many recorder sources are available using the function audio_get_recorder_count(), and the map returned will contain the following key/value pairs:
 * @returns {Real}
 * @param {Real} recorder_index - The index of the recorder source to get the information from.
 */
declare function audio_get_recorder_info(recorder_index: Real): Real;

/**
 * This function will add the data from a buffer into the audio queue that you previously created using the function audio_create_play_queue(). You specify the queue index to add to, and the buffer ID to get the data from as well as the position (offset) within the buffer and the number of bytes to add. Once you have added audio from a buffer to a queue, the buffer cannot be deleted until you have first freed the queue using the function audio_free_play_queue(), and the buffer properties should match those of the the queue that you are adding the sound to.
 * @returns {Undefined}
 * @param {Real} queueindex - The index of the queue to add to.
 * @param {Id.Buffer} bufferid - The buffer to add to the queue.
 * @param {Real} bufferoffset - The offset within the source buffer to start from.
 * @param {Real} bufferlength - The length of the buffer (the number of the bytes in the buffer).
 */
declare function audio_queue_sound(queueindex: Real,bufferid: Buffer,bufferoffset: Real,bufferlength: Real): Undefined;

/**
 * This function will start recording audio from the recorder source indexed. You can get the number of recorder sources using the function audio_get_recorder_count(), and once you start recording the audio will be stored in a temporary buffer and start triggering an Audio Recording Asynchronous Event. This event is triggered every step that recording takes place and will create the special DS map in the variable async_load with the following key/value pairs:
 * @returns {Real}
 * @param {Real} recorder_index - The index of the recorder source to use.
 */
declare function audio_start_recording(recorder_index: Real): Real;

/**
 * This function will stop recording on the given recorder channel (the channel index is returned when you call the function audio_start_recording()). When you stop recording, no further Audio Recording Asynchronous Events will be triggered for the given recorder channel, so you would normally use this function in the actual asynchronous event to ensure that you have captured all the data.
 * @returns {Undefined}
 * @param {Real} channel_index - The index of the recorder channel to stop.
 */
declare function audio_stop_recording(channel_index: Real): Undefined;

/**
 * This function creates a new audio emitter and returns the index for it. This index should be stored in a variable for all further functions that relate to this emitter, and then when it is no longer needed it should be removed from memory using the function audio_emitter_free() to prevent memory leaks which may eventually crash your game.
 * @returns {Id.AudioEmitter}
 */
declare function audio_emitter_create(): AudioEmitter;

/**
 * This function returns whether an audio emitter exists (true) or not (false). Note that if the index you search for has not been initialised previously, this function will cause an error as it is searching for non-existent indices.
 * @returns {Bool}
 * @param {Id.AudioEmitter} index - The index of the emitter to check the existence of.
 */
declare function audio_emitter_exists(index: AudioEmitter): Bool;

/**
 * With this function you can set the fall-off distance for an emitter. This is the distance from the listener the emitter has to be before the sound will have "fallen off" to a volume of 0. The default value for this is 100, but beware of setting this to any value lower than 1 as that will make any sound played through this emitter inaudible to the listener, however any other value will cause the sound to fade away the further that the emitter is from the listener.
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to change.
 * @param {Real} falloff_ref - The falloff reference relative to the listener (clamp).
 * @param {Real} falloff_max - The maximum falloff distance relative to the listener.
 * @param {Real} falloff_factor - The falloff factor (default 1).
 */
declare function audio_emitter_falloff(emitter: AudioEmitter,falloff_ref: Real,falloff_max: Real,falloff_factor: Real): Undefined;

/**
 * With this function you can remove the given emitter from memory. This should always be done whenever the emitter is not going to be used further in the room or the game, ie: in the Destroy Event of the instance or in the Room End Event, otherwise you may end up with a memory leak that will slow down and eventually crash your game.
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to free.
 */
declare function audio_emitter_free(emitter: AudioEmitter): Undefined;

/**
 * This function sets the maximum gain (volume) for the sound. The perceived volume for a sound can change depending on the fall-off value and the position it has relative to the listener, but by setting the gain with this function, the full volume will never exceed the specified gain value. The image below illustrates how gain affects the volume of the emitter when fall-off is greater than 0:
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to change.
 * @param {Real} gain - The maximum gain (default 1).
 * @param {Real} time - The length for the change in gain in milliseconds.
 */
declare function audio_emitter_gain(emitter: AudioEmitter,gain: Real,time: Real): Undefined;

/**
 * This function returns the current gain (volume) set for the given audio emitter, normally between 0 and 1, where 0 is silent and 1 is full volume. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered "full volume" and anything greater may introduce audio clipping.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_gain(emitter: AudioEmitter): Real;

/**
 * This function will return the bit-mask data that defines which audio listeners an emitter should play sounds from. For more information see the section on Audio Listeners.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitterid - The unique ID of the emitter to get the mask of
 */
declare function audio_emitter_get_listener_mask(emitterid: AudioEmitter): Real;

/**
 * This function returns the current pitch value set for the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_pitch(emitter: AudioEmitter): Real;

/**
 * This function returns the current velocity along the x axis for the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_vx(emitter: AudioEmitter): Real;

/**
 * This function returns the current velocity along the y axis for the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_vy(emitter: AudioEmitter): Real;

/**
 * This function returns the current velocity along the z axis for the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_vz(emitter: AudioEmitter): Real;

/**
 * This function returns the current x position of the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_x(emitter: AudioEmitter): Real;

/**
 * This function returns the current y position of the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_y(emitter: AudioEmitter): Real;

/**
 * This function returns the current z position of the given audio emitter.
 * @returns {Real}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 */
declare function audio_emitter_get_z(emitter: AudioEmitter): Real;

/**
 * This function can be used to change the pitch of all sounds emitted from the given emitter. It is a pitch multiplier, in that the input value multiplies the current pitch by that amount, so the default value of 1 is no pitch change, while a value of less than 1 will lower the pitch and greater than 1 will raise the pitch. It is best to use small increments for this function as any value under 0 or over 5 may not be audible anyway.
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to change.
 * @param {Real} pitch - The pitch multiplier (default 1).
 */
declare function audio_emitter_pitch(emitter: AudioEmitter,pitch: Real): Undefined;

/**
 * With this function you can change the position of an audio emitter within the 3D audio space. The position will affect the sound in different ways depending on where the listener is positioned within the audio space too (default position is (0, 0, 0). See audio_listener_position() for more information), so for example if the emitter position is set to (100, 0, 0) and the current listener is at (200, 0, 0) the audio streamed from the emitter will appear to be on the left of the audio field. The image below shows a visual representation of emitters and their relative positions to the listener:
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to change.
 * @param {Real} x - The x position.
 * @param {Real} y - The y position.
 * @param {Real} z - The z position.
 */
declare function audio_emitter_position(emitter: AudioEmitter,x: Real,y: Real,z: Real): Undefined;

/**
 * This function can be used to set the the bit-mask for an emitter so that all sounds played through the emitter will play only from those listeners specified. You can create a bit-mask by using the audio_get_listener_info() and then using the bitwise or ("|") to create a custom mask with those listeners that you require the sound to play from, and then apply this custom mask to the emitter. This mask will over-ride the default mask or that which you may have set using the function audio_set_listener_mask().
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitterid - The unique ID of the emitter to set the mask of
 * @param {Real} mask - The bitmask data to set for the sound
 */
declare function audio_emitter_set_listener_mask(emitterid: AudioEmitter,mask: Real): Undefined;

/**
 * This function can be used to give an emitter Doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the emitter itself is not ever going to move you would normally not need to set these values, but, for example, if you are making a scrolling shooter game where the enemies come from the right and scroll to the left, you would set this to have a velocity of (hspeed, 0, 0) in the create event of the enemies (and update the emitter of each instance in the step event using audio_emitter_position()) to give any sounds emitted by the enemy instances the correct Doppler as they pass the player instance (which in turn would be using the function audio_listener_position() to set the listener to the correct position).
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to change.
 * @param {Real} vx - The x vector value (default 0).
 * @param {Real} vy - The y vector value (default 0).
 * @param {Real} vz - The z vector value (default 0).
 */
declare function audio_emitter_velocity(emitter: AudioEmitter,vx: Real,vy: Real,vz: Real): Undefined;

/**
 * With this function you can play any sound resource through an emitter, with any changes to the emitter gain, position, pitch or velocity affecting how the user hears the final sound being played. You provide the emitter index to use, the sound index of the sound to be played and then specify whether the sound is to loop or not. Finally you can assign a priority, which is then used to determine how sounds are dealt with when the number of sounds playing is over the limit set by the function audio_channel_num(). Lower priority sounds will be stopped in favour of higher priority sounds, and the priority value can be any real number (the actual value is arbitrary, and can be from 0 to 1 or 0 to 100, as GameMaker will prioritize them the same). Note that when dealing with priority, the higher the number the higher the priority, such that a sound with priority 100 will be favoured over a sound with priority 1.
 * @returns {Id.Sound}
 * @param {Id.AudioEmitter} emitter - The index of the emitter to use.
 * @param {Asset.GMSound} sound - The index of the sound to use.
 * @param {Bool} loop - Flags the sound as looping or not.
 * @param {Real} priority - Set the channel priority for the sound.
 * @param {Real} gain - Sets the gain of the sound played.
 * @param {Any} offset - Sets the start offset (in seconds) of the sound played.
 * @param {Real} pitch - Sets the pitch of the sound played.
 * @param {Real} listener_mask - Sets the listener mask of the sound played.
 */
declare function audio_play_sound_on(emitter: AudioEmitter,sound: GMSound,loop: Bool,priority: Real,gain: Real,offset: Any,pitch: Real,listener_mask: Real): Sound;

/**
 * This function will check a specific audio group to see if it has been loaded into memory, ready for use.
 * @returns {Bool}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to check (as defined in the Audio Groups Window)
 */
declare function audio_group_is_loaded(groupid: GMAudioGroup): Bool;

/**
 * This function will load all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return true if loading is initiated and false if the group ID is invalid, or it has already been flagged for loading. The function is asynchronous so your game will continue to run while the audio is loaded in the background. This means that it will also trigger an Asynchronous Load/Save Event to inform you that the whole group has been loaded into memory and the sounds can now be used.
 * @returns {Bool}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to load (as defined in the Audio Groups Window)
 */
declare function audio_group_load(groupid: GMAudioGroup): Bool;

/**
 * This function will check the loading progress for an audio group and return an (approximate) value between 0 and 100.
 * @returns {Real}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to check (as defined in the Audio Groups Window)
 */
declare function audio_group_load_progress(groupid: GMAudioGroup): Real;

/**
 * This function will return a string containing the name of the given audio group for displaying or checking. When you define an audio group in the Game Options, you give it a unique "name" which is really a constant to use as an ID value for the group. All this function does is take the ID and return a string of the ID name you gave.
 * @returns {String}
 * @param {Asset.GMAudioGroup} groupid - The index value constant of the audio group to check (as defined in the Audio Groups Window)
 */
declare function audio_group_name(groupid: GMAudioGroup): String;

/**
 * With this function you can fade a group of sounds in or out over a given length of time, or it can be used to set the group gain instantly. The time is measured in milliseconds, and the function requires that you input a final level of gain for the group to have reached by the end of that time. This gain can be between 0 (silent) and 1 (full volume) and the scale is linear, such that a value of 0.5 would be half volume. To instantly change the gain, simply set the time argument to 0. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered "full volume" and anything greater may introduce audio clipping.
 * @returns {Undefined}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to stop (as defined in the Audio Groups Window)
 * @param {Real} volume - The final value for the group volume.
 * @param {Real} time - The length of the change in gain in milliseconds.
 */
declare function audio_group_set_gain(groupid: GMAudioGroup,volume: Real,time: Real): Undefined;

/**
 * This function will return the group gain of a given audio group.
 * @returns {Real}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to check (as defined in the Audio Groups window)
 */
declare function audio_group_get_gain(groupid: GMAudioGroup): Real;

/**
 * This function will stop all sounds from the given audio group that are currently playing.
 * @returns {Undefined}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to stop (as defined in the Audio Groups Window)
 */
declare function audio_group_stop_all(groupid: GMAudioGroup): Undefined;

/**
 * This function will unload all the sounds that are flagged as belonging to the given Audio Group into memory. The function will return true if unloading is initiated and false if the group ID is invalid, or it has already been flagged for unloading. Note that any audio currently being played when this function is called will be stopped.
 * @returns {Bool}
 * @param {Asset.GMAudioGroup} groupid - The index of the audio group to unload (as defined in the Audio Groups Window)
 */
declare function audio_group_unload(groupid: GMAudioGroup): Bool;

/**
 * This function will return an array containing the asset index of each audio asset in the given audio group.
 * @returns {Array[Asset.GMSound]}
 * @param {Asset.GMAudioGroup} group_index - The index of the audio group whose asset indices should be retrieved.
 */
declare function audio_group_get_assets(group_index: GMAudioGroup): Array[GMSound];

/**
 * This function will return the index of the audio group that is associated with the given sound index.
 * @returns {Asset.GMAudioGroup}
 * @param {Any} sound_index - The index of the sound whose audio group should be retrieved.
 */
declare function audio_sound_get_audio_group(sound_index: Any): GMAudioGroup;

/**
 * Certain target platforms permit more than one listener, so it is important that you know how many the target has before changing or using different listeners. This function will return the number of listeners available.
 * @returns {Real}
 */
declare function audio_get_listener_count(): Real;

/**
 * This function will create a DS map and populate it with information for the given listener.
 * @returns {Id.DsMap}
 * @param {Real} num - The listener number to get the data for.
 */
declare function audio_get_listener_info(num: Real): DsMap;

/**
 * This function will return the bit-mask data that defines the current default (global) mask for the audio listeners.
 * @returns {Real}
 */
declare function audio_get_listener_mask(): Real;

/**
 * This function will create a DS map and populate it with the position, velocity and orientation values for the given listener. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. If you provide an incorrect listener index then the function will return -1.
 * @returns {Id.DsMap}
 * @param {Real} index - The listener to get the data for (default 0).
 */
declare function audio_listener_get_data(index: Real): DsMap;

/**
 * With this function you can change the orientation of the listener within the 3D audio space. The look at direction and up direction are based on the vectors that are resolved from the given relative x, y and z positions, and default to (0, 0, 1000) for the look at direction and (0, 1, 0) for the up direction, as shown in the illustration below:
 * @returns {Undefined}
 * @param {Real} lookat_x - The x look vector (default 0).
 * @param {Real} lookat_y - The y look vector (default 0).
 * @param {Real} lookat_z - The z look vector (default 1000).
 * @param {Real} up_x - The x up vector (default 0).
 * @param {Real} up_y - The y up vector (default 1).
 * @param {Real} up_z - The z up vector (default 0).
 */
declare function audio_listener_orientation(lookat_x: Real,lookat_y: Real,lookat_z: Real,up_x: Real,up_y: Real,up_z: Real): Undefined;

/**
 * With this function you can change the position of the listener within the 3D audio space. The example image below shows the default position for the listener in the audio space:
 * @returns {Undefined}
 * @param {Real} x - The x position of the listener (default 0).
 * @param {Real} y - The y position of the listener (default 0).
 * @param {Real} z - The z position of the listener (default 0).
 */
declare function audio_listener_position(x: Real,y: Real,z: Real): Undefined;

/**
 * With this function you can change the orientation of the given listener within the 3D audio space. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform.
 * @returns {Undefined}
 * @param {Real} index - The listener to set the orientation of.
 * @param {Real} lookat_x - The x look vector (default 0).
 * @param {Real} lookat_y - The y look vector (default 0).
 * @param {Real} lookat_z - The z look vector (default -1).
 * @param {Real} up_x - The x up vector (default 0).
 * @param {Real} up_y - The y up vector (default 1).
 * @param {Real} up_z - The z up vector (default 0).
 */
declare function audio_listener_set_orientation(index: Real,lookat_x: Real,lookat_y: Real,lookat_z: Real,up_x: Real,up_y: Real,up_z: Real): Undefined;

/**
 * With this function you can change the position of a given listener within the 3D audio space. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform. The example image below shows the default position for the listener in the audio space:
 * @returns {Undefined}
 * @param {Real} index - The listener to get the data for (default 0).
 * @param {Real} x - The x position of the listener (default 0).
 * @param {Real} y - The y position of the listener (default 0).
 * @param {Real} z - The z position of the listener (default 0).
 */
declare function audio_listener_set_position(index: Real,x: Real,y: Real,z: Real): Undefined;

/**
 * This function can be used to give the given listener Doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. The default listener index is 0, but you can use the function audio_get_listener_info() to get the different indices available for the target platform.
 * @returns {Undefined}
 * @param {Real} index - The listener to get the data for (default 0).
 * @param {Real} x - The x velocity of the listener (default 0).
 * @param {Real} y - The y velocity of the listener (default 0).
 * @param {Real} z - The z velocity of the listener (default 0).
 */
declare function audio_listener_set_velocity(index: Real,x: Real,y: Real,z: Real): Undefined;

/**
 * This function can be used to give the listener Doppler effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the listener itself is not ever going to move, or the movement is not a constant motion, you would normally not need to set these values, but, for example, if you are making a scrolling game where the player has a constant bottom to top movement and the enemies a constant top to bottom movement, you would set the listener and emitter velocities (for emitters you would use audio_emitter_velocity()) to the appropriate vectors to simulate the correct Doppler effect as they move past the player instance.
 * @returns {Undefined}
 * @param {Real} vx - The x velocity component of the listener (default 0).
 * @param {Real} vy - The y velocity component of the listener (default 0).
 * @param {Real} vz - The z velocity component of the listener (default 0).
 */
declare function audio_listener_velocity(vx: Real,vy: Real,vz: Real): Undefined;

/**
 * When using multiple listeners on a system, you can set the bit-mask for a sound and have it heard from the flagged listener only. However, you can also set the global mask using this function and all sounds played normally will be heard from the listeners flagged by this mask, without the need to set the mask for each sound individually.
 * @returns {Undefined}
 * @param {String} mask - The bit-mask data to set for the listeners
 */
declare function audio_set_listener_mask(mask: String): Undefined;

/**
 * Creates a sync group and returns a unique ID value for it which should then be used in all further audio function calls for this group. If you want the group to loop then pass in true, otherwise pass in false, but note that if you want them to loop, all the tracks added later need to be the same length. Note that when you create a sync group, you will need to free the memory and sounds associated with it when not in use using the audio_destroy_sync_group() function - for example, in the Room End or Destroy events.
 * @returns {Id.AudioSyncGroup}
 * @param {Bool} loop - Whether the tracks in the group should loop (true) or not (false).
 */
declare function audio_create_sync_group(loop: Bool): AudioSyncGroup;

/**
 * Audio sync groups need to be destroyed when not in use to free up the memory and sound resources associated with them using this function. It takes the group index as returned when the group was created using the function audio_create_sync_group(), and frees all resources used by the group.
 * @returns {Undefined}
 * @param {Id.AudioSyncGroup} group_index - The group index to be destroyed.
 */
declare function audio_destroy_sync_group(group_index: AudioSyncGroup): Undefined;

/**
 * his function will pause the given sync group if it is playing, with the group index being the value returned when you created the group using the function audio_create_sync_group(). This does not stop the sound, and calling audio_resume_sync_group(), will start it playing from the same position it was paused at again.
 * @returns {Undefined}
 * @param {Id.AudioSyncGroup} group_index - The group index to pause.
 */
declare function audio_pause_sync_group(group_index: AudioSyncGroup): Undefined;

/**
 * With this function you can assign a sound to a previously create sync group. The group index is the value returned when you created the group using the function audio_create_sync_group(), and the sound index is the index of any compressed sound (*.ogg or *.mp3) from the Asset Browser. This function only adds the sound to the group, but it does not play the sound, and will be a value > -1 if it succeeds and -1 if it fails, where a successful value indicates the sounds order in the sync group (so 0 would be the first sound added, 1 would be the second, etc...).
 * @returns {Id.Buffer}
 * @param {Id.AudioSyncGroup} group_index - The group index to assign the sound to.
 * @param {Asset.GMSound} sound_index - The sound index to be assigned to the group.
 */
declare function audio_play_in_sync_group(group_index: AudioSyncGroup,sound_index: GMSound): Buffer;

/**
 * This function will resume the given sync group if it is playing and has previously been paused (using the function audio_pause_sync_group). The group index is the value returned when you created the group using the function audio_create_sync_group().
 * @returns {Undefined}
 * @param {Id.AudioSyncGroup} group_index - The group index to resume.
 */
declare function audio_resume_sync_group(group_index: AudioSyncGroup): Undefined;

/**
 * With this function you can start playing a previously created sync group. You need to supply the group index which is the value returned when you created the group using the function audio_create_sync_group().
 * @returns {Undefined}
 * @param {Id.AudioSyncGroup} group_index - The group index to play.
 */
declare function audio_start_sync_group(group_index: AudioSyncGroup): Undefined;

/**
 * This function will stop the given sync group if it is playing, with the group index being the value returned when you created the group using the function audio_create_sync_group().
 * @returns {Undefined}
 * @param {Id.AudioSyncGroup} group_index - The group index to stop playing.
 */
declare function audio_stop_sync_group(group_index: AudioSyncGroup): Undefined;

/**
 * his function can be used to display debug information about any given sync group (the group index is the value returned when the group was created using the function audio_create_sync_group()). You can call the function with a value of -1 to switch off the overlay.
 * @returns {Undefined}
 * @param {Id.AudioSyncGroup} group_index - The group index to debug, or -1 to switch off the debugging.
 */
declare function audio_sync_group_debug(group_index: AudioSyncGroup): Undefined;

/**
 * This function returns the current play position of the given sync group. The group index is the value returned when you created the group using the function audio_create_sync_group(), and the return value is the time in seconds that the tracks have been playing.
 * @returns {Real}
 * @param {Id.AudioSyncGroup} group_index - The group index to get the position of.
 */
declare function audio_sync_group_get_track_pos(group_index: AudioSyncGroup): Real;

/**
 * This function can be used to check if any audio in a synchronised group is playing. You are required to supply the sync group ID as returned by the function audio_create_sync_group().
 * @returns {Bool}
 * @param {Id.AudioSyncGroup} group_index - The group index to check.
 */
declare function audio_sync_group_is_playing(group_index: AudioSyncGroup): Bool;

/**
 * This function can be used to check if any audio in a synchronised group is paused. You are required to supply the sync group ID as returned by the function audio_create_sync_group().
 * @returns {Bool}
 * @param {Id.AudioSyncGroup} group_index - The group index to check.
 */
declare function audio_sync_group_is_paused(group_index: AudioSyncGroup): Bool;

/**
 * This function creates and returns a new audio bus struct, which can be modified to configure the bus' properties and to add audio effects to it.
 * @returns {Struct.AudioBus}
 */
declare function audio_bus_create(): AudioBus;

/**
 * This function creates and returns a new audio effect struct, which can be modified to configure the effect's properties.
 * @returns {Struct.AudioEffect}
 * @param {Enum.AudioEffectType} type - The type of audio effect to create.
 * @param {Struct} params - A struct containing any initial values for the effect's parameters.
 */
declare function audio_effect_create(type: Enum.AudioEffectType,params: Struct): AudioEffect;

/**
 * This function links an emitter to an audio bus. Any sounds played on this emitter will be processed by the audio bus.
 * @returns {Undefined}
 * @param {Id.AudioEmitter} emitter - The emitter to link to the audio bus.
 * @param {Struct.AudioBus} bus - The audio bus to link the emitter to.
 */
declare function audio_emitter_bus(emitter: AudioEmitter,bus: AudioBus): Undefined;

/**
 * This function returns the audio bus that an emitter is linked to.
 * @returns {Struct.AudioBus}
 * @param {Id.AudioEmitter} emitter - The emitter whose audio bus should be returned.
 */
declare function audio_emitter_get_bus(emitter: AudioEmitter): AudioBus;

/**
 * This function returns an array of all of the audio emitters linked to a given audio bus.
 * @returns {Array[Id.AudioEmitter]}
 * @param {Struct.AudioBus} bus - The audio bus whose emitters should be returned.
 */
declare function audio_bus_get_emitters(bus: AudioBus): Array[AudioEmitter];

/**
 * This function relinks all of the emitters linked to the given bus back to the main bus.
 * @returns {Undefined}
 * @param {Struct.AudioBus} bus - The audio bus whose emitters should be cleared.
 */
declare function audio_bus_clear_emitters(bus: AudioBus): Undefined;

/**
 * Converts a linear gain to a gain in decibels (dB).
 * @returns {Real}
 * @param {Real} x - The value to convert.
 */
declare function lin_to_db(x: Real): Real;

/**
 * Converts a gain in decibels (dB) to a linear gain.
 * @returns {Real}
 * @param {Real} x - The value to convert.
 */
declare function db_to_lin(x: Real): Real;

/**
 * Creates a Flexpanel node.
 * @returns {Pointer.FlexpanelNode}
 * @param {Any} struct_or_json - A struct or JSON string that describes style settings and child nodes to set up this flexpanel.
 */
declare function flexpanel_create_node(struct_or_json: Any): Pointer.FlexpanelNode;

/**
 * Deletes a Flexpanel node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be deleted.
 * @param {Bool} recursive - Whether all child nodes should be deleted (false by default).
 */
declare function flexpanel_delete_node(node: Pointer.FlexpanelNode,recursive: Bool): Undefined;

/**
 * Inserts the node as a child of the passed parent node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} root - The parent node.
 * @param {Pointer.FlexpanelNode} node - The node to be inserted as a child.
 * @param {Real} index - The index at which to insert the child.
 */
declare function flexpanel_node_insert_child(root: Pointer.FlexpanelNode,node: Pointer.FlexpanelNode,index: Real): Undefined;

/**
 * Removes a child from the passed parent node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} root - The parent node.
 * @param {Pointer.FlexpanelNode} node - The node to be removed as a child.
 */
declare function flexpanel_node_remove_child(root: Pointer.FlexpanelNode,node: Pointer.FlexpanelNode): Undefined;

/**
 * Removes all the children of the node. NOTE: Children are not deleted.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} root - The parent node.
 */
declare function flexpanel_node_remove_all_children(root: Pointer.FlexpanelNode): Undefined;

/**
 * Returns the number of child nodes of the given node.
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} root - The node.
 */
declare function flexpanel_node_get_num_children(root: Pointer.FlexpanelNode): Real;

/**
 * Returns the child node of the given node either by index or name, undefined if out of range. If name is used then the search is done recursively through all the child nodes and the first matching node in a depth first traversal is returned.
 * @returns {Pointer.FlexpanelNode}
 * @param {Pointer.FlexpanelNode} root - The node.
 * @param {Any} indexOrName - The index of the child to get or a string of the name the node has been given.
 */
declare function flexpanel_node_get_child(root: Pointer.FlexpanelNode,indexOrName: Any): Pointer.FlexpanelNode;

/**
 * Returns the child node of the given node by its name or the hash of its name.
 * @returns {Pointer.FlexpanelNode}
 * @param {Pointer.FlexpanelNode} root - The node.
 * @param {Any} hashOrName - The hash of the child to get or a string of the name the node has been given.
 */
declare function flexpanel_node_get_child_hash(root: Pointer.FlexpanelNode,hashOrName: Any): Pointer.FlexpanelNode;

/**
 * Returns the parent of the given node, undefined if no parent.
 * @returns {Pointer.FlexpanelNode}
 * @param {Pointer.FlexpanelNode} root - The node.
 */
declare function flexpanel_node_get_parent(root: Pointer.FlexpanelNode): Pointer.FlexpanelNode;

/**
 * Returns the name of the given node, undefined if no name is set.
 * @returns {String}
 * @param {Pointer.FlexpanelNode} root - The node.
 */
declare function flexpanel_node_get_name(root: Pointer.FlexpanelNode): String;

/**
 * Sets the name of the node.
 * @returns {undefined}
 * @param {Pointer.FlexpanelNode} root - The node.
 * @param {String} name - The new name to set on the node.
 */
declare function flexpanel_node_set_name(root: Pointer.FlexpanelNode,name: String): undefined;

/**
 * Returns the data struct of the given node.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} root - The node.
 */
declare function flexpanel_node_get_data(root: Pointer.FlexpanelNode): Struct;

/**
 * Returns the layout data of the given node as a struct. This is the same data that can be passed into flexpanel_create_node().
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} root - The node.
 */
declare function flexpanel_node_get_struct(root: Pointer.FlexpanelNode): Struct;

/**
 * Calculates the layout for the selected node and its children.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to start the layout calculations from.
 * @param {Any} width - The width of the area to calculate the layout over.
 * @param {Any} height - The height of the area to calculate the layout over.
 * @param {Enum.flexpanel_direction} direction - The direction the layout calculation should follow.
 */
declare function flexpanel_calculate_layout(node: Pointer.FlexpanelNode,width: Any,height: Any,direction: Enum.flexpanel_direction): Undefined;

/**
 * Returns the calculated node layout position as a struct: {left, top, width, height, bottom, right, hadOverflow, direction, paddingLeft, paddingRight, paddingTop, paddingBottom, marginLeft, marginRight, marginToip, marginBottom}.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node to be queried.
 * @param {Bool} relative - if true then returned coords in struct are relative to parent, otherwise they are absolute (and include parents position), default is true (so relative coords are returned)
 */
declare function flexpanel_node_layout_get_position(node: Pointer.FlexpanelNode,relative: Bool): Struct;

/**
 * Sets the alignment of the content of the node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_justify} align - The selected alignment.
 */
declare function flexpanel_node_style_set_align_content(node: Pointer.FlexpanelNode,align: Enum.flexpanel_justify): Undefined;

/**
 * Sets the alignment of the items of the node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_align} align - The selected alignment.
 */
declare function flexpanel_node_style_set_align_items(node: Pointer.FlexpanelNode,align: Enum.flexpanel_align): Undefined;

/**
 * Sets the alignment of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_align} align - The selected alignment.
 */
declare function flexpanel_node_style_set_align_self(node: Pointer.FlexpanelNode,align: Enum.flexpanel_align): Undefined;

/**
 * Sets the node's aspect ratio
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to set.
 * @param {Real} value - The value
 */
declare function flexpanel_node_style_set_aspect_ratio(node: Pointer.FlexpanelNode,value: Real): Undefined;

/**
 * Sets the display setting of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_display} display - The selected display.
 */
declare function flexpanel_node_style_set_display(node: Pointer.FlexpanelNode,display: Enum.flexpanel_display): Undefined;

/**
 * Sets the flex value of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set
 * @param {Real} flex - The flex value for this
 */
declare function flexpanel_node_style_set_flex(node: Pointer.FlexpanelNode,flex: Real): Undefined;

/**
 * Sets the flex wrap of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_wrap} align - The selected wrap.
 */
declare function flexpanel_node_style_set_flex_wrap(node: Pointer.FlexpanelNode,align: Enum.flexpanel_wrap): Undefined;

/**
 * Sets the flex grow of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Real} grow - The selected grow factor
 */
declare function flexpanel_node_style_set_flex_grow(node: Pointer.FlexpanelNode,grow: Real): Undefined;

/**
 * Sets the flex shrink of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Real} shrink - The selected shrink factor
 */
declare function flexpanel_node_style_set_flex_shrink(node: Pointer.FlexpanelNode,shrink: Real): Undefined;

/**
 * Sets the flex basis of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Real} value - The selected flex basis value
 * @param {Enum.flexpanel_unit} unit - The units to be used
 */
declare function flexpanel_node_style_set_flex_basis(node: Pointer.FlexpanelNode,value: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the flex direction of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_flex_direction} direction - The selected direction.
 */
declare function flexpanel_node_style_set_flex_direction(node: Pointer.FlexpanelNode,direction: Enum.flexpanel_flex_direction): Undefined;

/**
 * Sets the gap of the selected node for the selected gutters.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_gutter} gutter - The selected gutter (column/row/all).
 * @param {Real} size - The selected gap size
 */
declare function flexpanel_node_style_set_gap(node: Pointer.FlexpanelNode,gutter: Enum.flexpanel_gutter,size: Real): Undefined;

/**
 * Sets an inset position on the node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 * @param {Real} value - The value
 * @param {Enum.flexpanel_unit} unit - The units to be used
 */
declare function flexpanel_node_style_set_position(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge,value: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the node's contents justification
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_justify} justify - The justification to use
 */
declare function flexpanel_node_style_set_justify_content(node: Pointer.FlexpanelNode,justify: Enum.flexpanel_justify): Undefined;

/**
 * Sets the layout direction of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_direction} direction - The selected direction.
 */
declare function flexpanel_node_style_set_direction(node: Pointer.FlexpanelNode,direction: Enum.flexpanel_direction): Undefined;

/**
 * Sets the margin of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 * @param {Real} size - The selected padding size
 * @param {Enum.flexpanel_unit} unit - The units to be used
 */
declare function flexpanel_node_style_set_margin(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge,size: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the padding of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 * @param {Real} size - The selected padding size
 * @param {Enum.flexpanel_unit} unit - The units to be used
 */
declare function flexpanel_node_style_set_padding(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge,size: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the border of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 * @param {Real} size - The selected border size
 */
declare function flexpanel_node_style_set_border(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge,size: Real): Undefined;

/**
 * Sets the node's position type.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_position_type} value - The position type to use
 */
declare function flexpanel_node_style_set_position_type(node: Pointer.FlexpanelNode,value: Enum.flexpanel_position_type): Undefined;

/**
 * Sets the node's minimum width
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node whose behaviour should be set.
 * @param {Real} value - The value to use
 * @param {Enum.flexpanel_unit} unit - The units to use for the value
 */
declare function flexpanel_node_style_set_min_width(node: Pointer.FlexpanelNode,value: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the node's maximum width
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node whose behaviour should be set.
 * @param {Real} value - The value to use
 * @param {Enum.flexpanel_unit} unit - The units to use for the value
 */
declare function flexpanel_node_style_set_max_width(node: Pointer.FlexpanelNode,value: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the node's minimum height
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node whose behaviour should be set.
 * @param {Real} value - The value to use
 * @param {Enum.flexpanel_unit} unit - The units to use for the value
 */
declare function flexpanel_node_style_set_min_height(node: Pointer.FlexpanelNode,value: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the node's maximum height
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node whose behaviour should be set.
 * @param {Real} value - The value to use
 * @param {Enum.flexpanel_unit} unit - The units to use for the value
 */
declare function flexpanel_node_style_set_max_height(node: Pointer.FlexpanelNode,value: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the width of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node whose width should be set.
 * @param {Real} width - The selected width.
 * @param {Enum.flexpanel_unit} unit - The units to use for the value
 */
declare function flexpanel_node_style_set_width(node: Pointer.FlexpanelNode,width: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Sets the height of the selected node.
 * @returns {Undefined}
 * @param {Pointer.FlexpanelNode} node - The node whose height should be set.
 * @param {Real} height - The selected height.
 * @param {Enum.flexpanel_unit} unit - The units to use for the value
 */
declare function flexpanel_node_style_set_height(node: Pointer.FlexpanelNode,height: Real,unit: Enum.flexpanel_unit): Undefined;

/**
 * Gets the alignment of the content of the node.
 * @returns {Enum.flexpanel_justify}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_align_content(node: Pointer.FlexpanelNode): Enum.flexpanel_justify;

/**
 * Gets the alignment of the items of the node.
 * @returns {Enum.flexpanel_align}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_align_items(node: Pointer.FlexpanelNode): Enum.flexpanel_align;

/**
 * Gets the alignment of the selected node.
 * @returns {Enum.flexpanel_align}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_align_self(node: Pointer.FlexpanelNode): Enum.flexpanel_align;

/**
 * Gets the node's aspect ratio
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_aspect_ratio(node: Pointer.FlexpanelNode): Real;

/**
 * Gets the display setting of the selected node.
 * @returns {Enum.flexpanel_display}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_display(node: Pointer.FlexpanelNode): Enum.flexpanel_display;

/**
 * Gets the flex value of the selected node.
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_flex(node: Pointer.FlexpanelNode): Real;

/**
 * Gets the flex wrap of the selected node.
 * @returns {Enum.flexpanel_wrap}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_flex_wrap(node: Pointer.FlexpanelNode): Enum.flexpanel_wrap;

/**
 * Gets the flex grow of the selected node.
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_flex_grow(node: Pointer.FlexpanelNode): Real;

/**
 * Gets the flex shrink of the selected node.
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_flex_shrink(node: Pointer.FlexpanelNode): Real;

/**
 * Gets the flex basis of the selected node.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_flex_basis(node: Pointer.FlexpanelNode): Struct;

/**
 * Gets the flex direction of the selected node.
 * @returns {Enum.flexpanel_flex_direction}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_flex_direction(node: Pointer.FlexpanelNode): Enum.flexpanel_flex_direction;

/**
 * Gets the gap of the selected node on the selected side.
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} node - The node to be set.
 * @param {Enum.flexpanel_gutter} gutter - The selected gutter (column/row/all).
 */
declare function flexpanel_node_style_get_gap(node: Pointer.FlexpanelNode,gutter: Enum.flexpanel_gutter): Real;

/**
 * Gets the node's style position.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 */
declare function flexpanel_node_style_get_position(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge): Struct;

/**
 * Gets the node's contents justification
 * @returns {Enum.flexpanel_justify}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_justify_content(node: Pointer.FlexpanelNode): Enum.flexpanel_justify;

/**
 * Gets the direction of the selected node.
 * @returns {Enum.flexpanel_direction}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_direction(node: Pointer.FlexpanelNode): Enum.flexpanel_direction;

/**
 * Gets the margin of the selected node.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 */
declare function flexpanel_node_style_get_margin(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge): Struct;

/**
 * Gets the padding of the selected node.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 */
declare function flexpanel_node_style_get_padding(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge): Struct;

/**
 * Gets the border of the selected node.
 * @returns {Real}
 * @param {Pointer.FlexpanelNode} node - The node.
 * @param {Enum.flexpanel_edge} edge - The selected edge.
 */
declare function flexpanel_node_style_get_border(node: Pointer.FlexpanelNode,edge: Enum.flexpanel_edge): Real;

/**
 * Gets the nodes position type
 * @returns {Enum.flexpanel_position_type}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_position_type(node: Pointer.FlexpanelNode): Enum.flexpanel_position_type;

/**
 * Gets the node's minimum width
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_min_width(node: Pointer.FlexpanelNode): Struct;

/**
 * Gets the node's maximum width
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_max_width(node: Pointer.FlexpanelNode): Struct;

/**
 * Gets the node's minimum height
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_min_height(node: Pointer.FlexpanelNode): Struct;

/**
 * Gets the node's maximum height
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_max_height(node: Pointer.FlexpanelNode): Struct;

/**
 * Gets the width of the selected node.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_width(node: Pointer.FlexpanelNode): Struct;

/**
 * Gets the height of the selected node.
 * @returns {Struct}
 * @param {Pointer.FlexpanelNode} node - The node.
 */
declare function flexpanel_node_style_get_height(node: Pointer.FlexpanelNode): Struct;

/**
 * This function can be used to add a font to your game from a font file present in the Included Files. You can define the size of the font (in points), as well as whether the font should be bold or italic, and you can also define the range of characters to include. The function returns an index value that should be stored in a variable as this will be needed in all further code that refer to this font, or it will return -1 if the function fails for any reason.
 * @returns {Asset.GMFont}
 * @param {String} name - The path of the font file in the Included Files (*.ttf or *.otf).
 * @param {Real} size - The size of the font - points for Web Fonts, pixels for file fonts.
 * @param {Bool} bold - Whether the font is bold (true) or not (false).
 * @param {Bool} italic - Whether the font is italic (true) or not (false).
 * @param {Real} first - The first character to include (if you're unsure, go for 32).
 * @param {Real} last - The last character to include (if you're unsure, go for 128).
 */
declare function font_add(name: String,size: Real,bold: Bool,italic: Bool,first: Real,last: Real): GMFont;

/**
 * This function can be used to enable or disable anti-aliasing (AA) for fonts added using font_add(). This function needs to be called before you add any fonts and setting it to true will enable AA, and setting it to false will disable it. By default AA is enabled. Note that this will have no effect on fonts that have been added before the function was called, and the function only needs to be called once when the font is added, and not every draw/step that the font is being used.
 * @returns {Undefined}
 * @param {Bool} enable - Whether to enable (true) or disable (false) AA for added fonts.
 */
declare function font_add_enable_aa(enable: Bool): Undefined;

/**
 * This function can be used to check whether anti-aliasing (AA) is enabled for fonts added using font_add(). The function will return true if AA is enabled, and false if it is not. Note that AA is enabled by default, but you can change the AA state for added fonts using the function font_add_enable_aa(), as long as it is called before adding the font.
 * @returns {Bool}
 */
declare function font_add_get_enable_aa(): Bool;

/**
 * With this function you can use a "sprite strip" to create a new font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with "!" but remember that you should only include what you need and that you should be using the ord() function to get the correct UTF8 value for the starting letter. The created sprite font will then have the sub-images set to an individual glyph from the font, where the "first" glyph will have the image_index of 0. You can define "space" as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will never be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.
 * @returns {Asset.GMFont}
 * @param {Asset.GMSprite} spr - The sprite to add a font based on.
 * @param {Real} first - The index of the first available character.
 * @param {Bool} prop - Set as proportional font or not.
 * @param {Real} sep - The space to leave between each letter.
 */
declare function font_add_sprite(spr: GMSprite,first: Real,prop: Bool,sep: Real): GMFont;

/**
 * With this function you can use a "sprite strip" (the sprite itself must be a sprite asset from the Asset Browser, or a sprite you have added to the game resources using sprite_add) to create a new font asset, where each sub-image would be an individual symbol or letter. Unlike the normal font_add_sprite() which has a specific order for the sub-images of the sprite, this function will map the sprite sub-images based on the argument "string_map" of the function. This argument is a string that you can use to tell GameMaker what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of "AaBbCcDdEeFfGgHh", your sprite font must have the sub-images ordered in this way. You can define "space" as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will never be rendered), or if you don't supply a sprite for space then the width of the widest character in the sprite font will be used instead.
 * @returns {Asset.GMFont}
 * @param {Asset.GMSprite} spr - The sprite to add a font based on.
 * @param {String} string_map - String from which sprite sub-image order is taken.
 * @param {Bool} prop - Set as proportional font or not.
 * @param {Real} sep - The space to leave between each letter.
 */
declare function font_add_sprite_ext(spr: GMSprite,string_map: String,prop: Bool,sep: Real): GMFont;

/**
 * With this function you can delete a font asset from the game. This is a permanent removal, and changing rooms, or restarting the game will not bring the removed font back. For that the player would need to exit the game and restart that way, so take care when using this function. In general it is only needed for freeing up memory that has been used by a font added to the game through the functions font_add() or font_add_sprite().
 * @returns {Undefined}
 * @param {Asset.GMFont} ind - The index of the font to delete.
 */
declare function font_delete(ind: GMFont): Undefined;

/**
 * With this function you can enable or disable SDF rendering for the specified font. This only works on fonts added using font_add().
 * @returns {Undefined}
 * @param {Asset.GMFont} ind - The index of the font.
 * @param {Bool} enable - Whether to enable (true) or disable (false) SDF rendering for the specified font.
 */
declare function font_enable_sdf(ind: GMFont,enable: Bool): Undefined;

/**
 * With this function you can determine whether SDF rendering is enabled or disabled for the specified font
 * @returns {Bool}
 * @param {Asset.GMFont} ind - The index of the font.
 */
declare function font_get_sdf_enabled(ind: GMFont): Bool;

/**
 * With this function you can set the SDF spread value for the specified font. This only works on fonts added using font_add(), and its effect is only visible if the font is using SDF rendering.
 * @returns {Undefined}
 * @param {Asset.GMFont} ind - The index of the font.
 * @param {Real} spread - The SDF spread value to set for the specified font.
 */
declare function font_sdf_spread(ind: GMFont,spread: Real): Undefined;

/**
 * With this function you can query the SDF spread value for the specified font
 * @returns {Real}
 * @param {Asset.GMFont} ind - The index of the font.
 */
declare function font_get_sdf_spread(ind: GMFont): Real;

/**
 * With this function you can enable or disable built-in effects rendering for the specified font. Built-in effects will only have an effect with SDF-enabled fonts.
 * @returns {Undefined}
 * @param {Asset.GMFont} ind - The index of the font.
 * @param {Bool} enable - Whether to enable (true) or disable (false) effects rendering for the specified font.
 * @param {Struct.FontEffectParams} params - A struct containing any initial values for the font's effect parameters.
 */
declare function font_enable_effects(ind: GMFont,enable: Bool,params: FontEffectParams): Undefined;

/**
 * This function returns whether a font with the specified index exists or not. You can check font indices as defined from the Asset Browser, or fonts that have been added using functions like font_add().
 * @returns {Bool}
 * @param {Asset.GMFont} ind - Index of the font to check.
 */
declare function font_exists(ind: GMFont): Bool;

/**
 * With this function you can check any font asset to see if it has the bold flag or not. If it does the function will return true, otherwise it will return false.
 * @returns {Bool}
 * @param {Asset.GMFont} ind - Index of the font to check.
 */
declare function font_get_bold(ind: GMFont): Bool;

/**
 * With this function you can get the actual system name of the selected font asset. This function returns a string and not an index, and the name returned will depend on the font being used. For example, you may have a font asset called "fnt_Main" in the GameMaker Asset Browser, and the font itself may be the Windows system font Arial. In this case the function will return "Arial" as that is the system name of the font. Should you need the name as it appears in the Asset Browser, you should use font_get_name().
 * @returns {String}
 * @param {Asset.GMFont} ind - Index of the font to check.
 */
declare function font_get_fontname(ind: GMFont): String;

/**
 * This function is used to retrieve information for the given font. You supply a font index (which can be an asset added through the Asset Browser or a font added at runtime) and the function returns a struct with the following variables:
 * @returns {Struct.FontInfo}
 * @param {Asset.GMFont} font - The font for which information should be retrieved.
 */
declare function font_get_info(font: GMFont): FontInfo;

/**
 * With this function you can check any font asset to see if it has the italic flag or not. If it does the function will return true, otherwise it will return false.
 * @returns {Bool}
 * @param {Asset.GMFont} ind - Index of the font to check.
 */
declare function font_get_italic(ind: GMFont): Bool;

/**
 * When defining a font in GameMaker, you can define a range of characters to include. This is because the font itself is not actually included with your game (for legal reasons) but an image of the font is included on a texture page and that is what your game will use (just like any other graphics asset). This means that you will want to keep the number of characters that you use to a minimum and specify only the range of characters that your game will need so as to keep texture memory as optimised as possible. This function can be used to find the last character (as an UTF8 value) that was used when your font asset was added to your game.
 * @returns {Real}
 * @param {Asset.GMFont} ind - Index of the font to check.
 */
declare function font_get_last(ind: GMFont): Real;

/**
 * This function can be used to get the name (as a string) that was given to the font when it was added as an asset to the GameMaker Asset Browser. Please note that this is only a string and cannot be used to reference the font directly - for that you would need the font index. You can, however, use this string to get the font index using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMFont} ind - Index of the font to check.
 */
declare function font_get_name(ind: GMFont): String;

/**
 * With this function you can get the size of any font resource, which is the point value shown by the font resource dialogue.
 * @returns {Real}
 * @param {Asset.GMFont} ind - Index of the font to get the size of.
 */
declare function font_get_size(ind: GMFont): Real;

/**
 * This function returns a special pointer for the font texture page. This value can then be used in other draw functions, particularly in general drawing when using primitives as well as the Shader functions. You can get more information about the returned texture page using the different texture_ functions found here.
 * @returns {Pointer.Texture}
 * @param {Asset.GMFont} font - The index of the font to use.
 */
declare function font_get_texture(font: GMFont): Pointer.Texture;

/**
 * This function returns an array with the UV coordinates for the font texture on the texture page, filling in the array with the following values:
 * @returns {Array[Real]}
 * @param {Asset.GMFont} font - The index of the font to use.
 */
declare function font_get_uvs(font: GMFont): Array[Real];

/**
 * With this function you can use a "sprite strip" to replace a previously created sprite font asset, where each sub-image would be an individual symbol or letter. The index is the UTF8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with "!" but remember that you should only include what you need and that you should be using the ord() function to get the correct UTF8 value for the starting letter.
 * @returns {Undefined}
 * @param {Asset.GMFont} ind - The index of the font that shall be replaced (ie all references to this resource past this function will refer to the new font, not the original).
 * @param {Asset.GMSprite} spr - The sprite to add a font based on.
 * @param {Real} first - The index of the first available character.
 * @param {Bool} prop - Whether white space around each letter should be removed (if false, the created font will be monospaced, otherwise it'll be like most regular fonts).
 * @param {Real} sep - The space between each letter, 0 meaning the right of one letter just touches the left of the next one.
 */
declare function font_replace_sprite(ind: GMFont,spr: GMSprite,first: Real,prop: Bool,sep: Real): Undefined;

/**
 * This function will replace a sprite font that you created previously using the function font_add_sprite_ext(). It uses a "sprite strip", where each sub-image is be an individual symbol or letter, and the images are mapped to letters based on the argument "string_map" of the function. This argument is a string that you can use to tell GameMaker what order the sub-images of the sprite font are and it will map these automatically when writing text. So, for example, if you have a string-map of "AaBbCcDdEeFfGgHh", your sprite font must have the sub-images ordered in this way.
 * @returns {Undefined}
 * @param {Asset.GMFont} font - The font to replace.
 * @param {Asset.GMSprite} spr - The sprite to add a font based on.
 * @param {String} string_map - String from which sprite sub-image order is taken.
 * @param {Bool} prop - Set as proportional font or not.
 * @param {Real} sep - The space to leave between each letter.
 */
declare function font_replace_sprite_ext(font: GMFont,spr: GMSprite,string_map: String,prop: Bool,sep: Real): Undefined;

/**
 * When performing image blending and colouring, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker has to temporarily save a blended copy of the images and load them in when needed. This function sets how many blended copies of the given font can be cached before old ones are overwritten. The default value is 4.
 * @returns {Undefined}
 * @param {Asset.GMFont} ind - The index of the font to change the cache size of.
 * @param {Real} max - The maximum number of cached copies of the font that can be stored.
 */
declare function font_set_cache_size(ind: GMFont,max: Real): Undefined;

/**
 * This function can be used to get the current value of the given alarm. You supply the alarm number from 0 to 11 and this function will return the value that the alarm is currently on. This is an alternative method to getting the alarm array value directly.
 * @returns {Real}
 * @param {Real} index - The alarm index to get, from 0 to 11.
 */
declare function alarm_get(index: Real): Real;

/**
 * This function can be used to set an alarm. You supply the alarm number from 0 to 11, and then the value to set the alarm to. The value must be an integer value, and you can set it to -1 to stop the alarm (non integer values will be rounded to the nearest integer). This is an alternative method to setting the alarm array directly.
 * @returns {Undefined}
 * @param {Real} index - The alarm index to set, from 0 to 11.
 * @param {Real} value - The value (an integer) to set the alarm to.
 */
declare function alarm_set(index: Real,value: Real): Undefined;

/**
 * You can use this function to change one instance of an object into another instance of a different object, and while doing so decide whether to perform the initial instances Destroy and Clean Up Events and the new instances Create Event. In this way, you can have (for example) a bomb change into an explosion - in which case the "perf" argument would probably be true as you would want the bomb to perform its Destroy Event and Clean Up Event, as well as the explosion to perform its Create Event - or you could have your player character change into a different one - in which case the "perf" argument would probably be false as you do not want the instances to perform their Create and Destroy/Clean Up events.
 * @returns {Undefined}
 * @param {Asset.GMObject} obj - The new object the calling object will change into.
 * @param {Bool} perf - Whether to perform that new object's create and destroy events (true) or not (false).
 */
declare function instance_change(obj: GMObject,perf: Bool): Undefined;

/**
 * With this function you can "clone" an instance as this will create a new version of the instance running the code at its same position. The "perf" argument is used to instruct this new instance to perform the create event or not. This function returns the id of the new instance which can then be stored in a variable or used to access that instance.
 * @returns {Id.Instance}
 * @param {Bool} perf - Whether to perform the new instance's Create event (true) or not (false).
 */
declare function instance_copy(perf: Bool): Instance;

/**
 * With this function you can create a new instance of the specified object at any given point within the room and at the depth specified. The depth can be any value, where the lower the depth the "nearer" to the camera things will be drawn and the higher the depth the further away, so an instance at depth -200 will be drawn over an instance at depth +300 (for example).
 * @returns {Id.Instance}
 * @param {Real} x - The x position the object will be created at
 * @param {Real} y - The y position the object will be created at
 * @param {Real} depth - The depth to assign the created instance to
 * @param {Asset.GMObject} obj - The object index of the object to create an instance of
 * @param {Struct} var_struct - A structure that contains variables that are copied into the new instance before the Create Event is called
 */
declare function instance_create_depth(x: Real,y: Real,depth: Real,obj: GMObject,var_struct: Struct): Instance;

/**
 * With this function you can create a new instance of the specified object at any given point within the room and on the layer specified. The layer can be identified using the layer ID value (as returned by the function layer_create()) or by the name of the layer (as a string, for example "instance_layer") as defined in the room editor.
 * @returns {Id.Instance}
 * @param {Real} x - The x position the object will be created at
 * @param {Real} y - The y position the object will be created at
 * @param {Any} layer_id - The layer ID (or name) to assign the created instance to
 * @param {Asset.GMObject} obj - The object index of the object to create an instance of
 * @param {Struct} var_struct - A structure that contains variables that are copied into the new instance before the Create Event is called
 */
declare function instance_create_layer(x: Real,y: Real,layer_id: Any,obj: GMObject,var_struct: Struct): Instance;

/**
 * You call this function whenever you wish to destroy an instance, normally triggering a Destroy Event and also a Clean Up Event. This will remove it from the room until the room is restarted (unless the room is persistent). Calling the function with no arguments will simply destroy the instance that is currently in scope and running the code, but you can provide an optional "id" argument and target a specific instance by using the instance id value, or you can target all instances of a particular object by using an object_index. For example:
 * @returns {Undefined}
 * @param {Any} id - The instance ID or object_index to destroy (optional, default is the calling instance)
 * @param {Bool} execute_event_flag - Set to true or false to perform the destroy event or not (optional, default is true)
 */
declare function instance_destroy(id: Any,execute_event_flag: Bool): Undefined;

/**
 * This function checks if any instance of the given Object handle exists in the room, or whether the given specific Instance handle exists in the room.
 * @returns {Bool}
 * @param {Any} obj - The object or instance to check for the existence of.
 */
declare function instance_exists(obj: Any): Bool;

/**
 * All instances have a unique identifier (id) which can be used to modify and manipulate them while a game is running, but you may not always know what the id for a specific instance is and so this function can help as you can use it to iterate through all of them to find what you need. You specify the object that you want to find the instance of and a number, and if there is an instance at that position in the instance list then the function returns the id of that instance, and if not it returns the special keyword noone. You can also use the keyword all to iterate through all the instances in a room, as well as a parent object to iterate through all the instances that are part of that parent / child hierarchy, and you can even specify an instance (if you have its id) as a check to see if it actually exists in the current room. Please note that as instances are sorted in an arbitrary manner, there is no specific order to how the instances are checked by this function, and any instance can be in any position.
 * @returns {Id.Instance}
 * @param {Any} obj - The object to find the nth instance of
 * @param {Real} n - The number of the instance to find.
 */
declare function instance_find(obj: Any,n: Real): Instance;

/**
 * This function will check all the instances of the given object to see which is furthest from the given x/y point. All checks will be from the given x/y position to the origin (the x/y position) of instances of the object specified. If no instances of the object exist, the function will return the keyword noone, but if there are instances then it will return the id of the instance found. Please note that if the instance running the code has the same object index as the object being checked, then it will be included in the check (this includes checks for parent objects if the calling instance is also a child of the parent).
 * @returns {Id.Instance}
 * @param {Real} x - The x position to check for instances far from.
 * @param {Real} y - The y position to check for instances far from.
 * @param {Any} obj - The object to check for instances of.
 */
declare function instance_furthest(x: Real,y: Real,obj: Any): Instance;

/**
 * With this function you can get the unique ID value of any instance from the currently active instance list. You give the index in the instance list to get the ID from and the function will return the value for storing in a variable.
 * @returns {Real}
 * @param {Id.Instance} index - The index within the instance list from 0 - (instance count - 1).
 */
declare function instance_id_get(index: Instance): Real;

/**
 * This function will check all the instances of the given object to see which is nearest to the given x/y point. All checks will be from the given x/y position to the origin (the x/y position) of instances of the object specified. If no instances of the object exist, the function will return the keyword noone, but if there are instances then it will return the id of the instance found. Please note that if the instance running the code has the same object index as the object being checked, then it will be included in the check (this includes checks for parent objects if the calling instance is also a child of the parent).
 * @returns {Id.Instance}
 * @param {Real} x - The x position to check from.
 * @param {Real} y - The y position to check from.
 * @param {Any} obj - The object to check for instances of.
 */
declare function instance_nearest(x: Real,y: Real,obj: Any): Instance;

/**
 * With this function you can find out how many active instances of the specified object exists in the room. When checking using this function, if the object is a parent, then all child objects will also be included in the return value, and also note that those instances which have been deactivated with the instance deactivate functions will not be included in this check.
 * @returns {Real}
 * @param {Any} obj - The object to total the number of instances of.
 */
declare function instance_number(obj: Any): Real;

/**
 * With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. this function will return the unique instance id of the object being collided, but if that is not needed it is slightly faster to use the function place_meeting(). This function also accepts the special keywords all and other and will return the keyword noone if no collision occurs, or the unique instance ID value of the instance found if a collision does occur.
 * @returns {Id.Instance}
 * @param {Real} x - The x position to check for instances.
 * @param {Real} y - The y position to check for instances.
 * @param {Any} obj - The object to check for instances of.
 */
declare function instance_place(x: Real,y: Real,obj: Any): Instance;

/**
 * With this function you can check a position for a collision with all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker to move the instance to the new position, check for a collision, then move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the instances of the object being checked for have precise collision masks selected, otherwise only bounding box collisions are applied. The function will populate a (previously created) DS list with the unique id values of all instances of the object that are considered to be in collision with the calling instance, and you have the option to order the list based on the distance from the origin of the instance doing the checking to the origin of the instances found to be in collision. Note that the function also accepts the special keyword all, in which case all instances found to be in collision will be listed. The function returns the number of instances found, or 0 if none are found.
 * @returns {Real}
 * @param {Real} x - The x position to check for instances.
 * @param {Real} y - The y position to check for instances.
 * @param {Any} obj - The object to check for instances of.
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function instance_place_list(x: Real,y: Real,obj: Any,list: DsList,ordered: Bool): Real;

/**
 * With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked and will return the unique instance id. If you do not need the id of the colliding instance you should consider using position_meeting() instead. This function also accepts the special keywords all and other and will return the keyword noone if no collision occurs or the unique ID value of the instance found if a collision does occur.
 * @returns {Id.Instance}
 * @param {Real} x - The x position to check for instances.
 * @param {Real} y - The y position to check for instances.
 * @param {Any} obj - The object to check for instances of.
 */
declare function instance_position(x: Real,y: Real,obj: Any): Instance;

/**
 * With this function you can check a position for a collision with all instances of another object. When you use this you are checking a single point in the room for all instances of an object, and the check will be done against the bounding box of the instances or against the mask of the instances if that object has precise collisions checked.
 * @returns {Real}
 * @param {Real} x - The x position to check for instances.
 * @param {Real} y - The y position to check for instances.
 * @param {Any} obj - The object to check for instances of.
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function instance_position_list(x: Real,y: Real,obj: Any,list: DsList,ordered: Bool): Real;

/**
 * With this function you can tell GameMaker to activate all instances that have been previously deactivated in a room. Note that activation is not instantaneous, and an instance that has been activated in this way will not be considered to be active until the end of the event in which the function was called.
 * @returns {Undefined}
 */
declare function instance_activate_all(): Undefined;

/**
 * With this function you can activate a layer that has been deactivated previously. You need to supply the layer ID, which can either be the name of the layer as written in the code editor (as a string) or the actual layer ID value as returned by the layer_create() and all deactivated instances on that layer will activated once again. Note that if you have deactivated a layer that has persistent instances, you will need to reactivate the layer again with this function before changing room, otherwise any persistent instances will not be carried over and will be discarded. Note too that activation is not instantaneous, and an instance that has been activated in this way will not be considered to be active until the end of the event in which the function was called.
 * @returns {Undefined}
 * @param {Any} layer_id - The layer ID string (or value) to be used
 */
declare function instance_activate_layer(layer_id: Any): Undefined;

/**
 * With this function you can activate a single instance or all instances of a specific object from all those that have been deactivated previously. Note that if you have deactivated an instance or object that has been flagged as Persistent, then you will need to reactivate it again with this function before changing room, otherwise it will not be carried over and will be discarded instead. Note too that activation is not instantaneous, and an instance that has been activated in this way will not be considered to be active until the end of the event in which the function was called.
 * @returns {Undefined}
 * @param {Any} obj - The object or instance to activate (the keyword all can also be used).
 */
declare function instance_activate_object(obj: Any): Undefined;

/**
 * With this function you can define a region within the room to activate instances that have previously been deactivated. This region can either be flagged as "inside" or "outside" as demonstrated in the following image:
 * @returns {Undefined}
 * @param {Real} left - The x coordinate of the left of the rectangular region to activate.
 * @param {Real} top - The y coordinate of the top of the rectangular region to activate.
 * @param {Real} width - The width of the region to activate.
 * @param {Real} height - The height of the region to activate.
 * @param {Bool} inside - Whether to activate instances on the inside of the region (true) or the outside (false).
 */
declare function instance_activate_region(left: Real,top: Real,width: Real,height: Real,inside: Bool): Undefined;

/**
 * This function will deactivate all instances that are in the room at the moment that the code is run. This may include the instance running the code if the "notme" flag is set to false, but normally you would want that instance to be active, in which case the "notme" flag should be set to true. Note that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.
 * @returns {Undefined}
 * @param {Bool} notme - Whether to keep the calling instance activated (true) or not (false).
 */
declare function instance_deactivate_all(notme: Bool): Undefined;

/**
 * With this function you can deactivate all instances assigned to a specific layer. You need to supply the layer ID, which can either be the name of the layer as written in the code editor (as a string) or the actual layer ID value as returned by the layer_create(), and note that you can only deactivate instance layers with this function. Note that if you have deactivated a layer that has instances of objects flagged as Persistent, then you will need to reactivate the layer again with the function instance_activate_layer() before changing room, otherwise any persistent instances on the layer will not be carried over and will be discarded. Note too that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.
 * @returns {Undefined}
 * @param {Any} layer - The layer ID string (or value) to be used
 */
declare function instance_deactivate_layer(layer: Any): Undefined;

/**
 * With this function you can deactivate a single instance or all instances of a specific object from all those that have been activated previously. Note that if you have deactivated an instance or object that has been flagged as Persistent, then you will need to reactivate it again with the function instance_activate_object() before changing room, otherwise it will not be carried over and will be discarded instead. Note too that deactivation is not instantaneous, and an instance that has been deactivated in this way will not be considered to be inactive until the end of the event in which the function was called.
 * @returns {Undefined}
 * @param {Any} obj - The object or instance to deactivate (the keyword all can also be used).
 */
declare function instance_deactivate_object(obj: Any): Undefined;

/**
 * With this function you can define a region within the room to deactivate instances that have previously been activated. This region can either be flagged as "inside" or "outside" as demonstrated in the following image:
 * @returns {Undefined}
 * @param {Real} left - The x coordinate of the left of the rectangular region to deactivate.
 * @param {Real} top - The y coordinate of the top of the rectangular region to deactivate.
 * @param {Real} width - The width of the region to deactivate.
 * @param {Real} height - The height of the region to deactivate.
 * @param {Bool} inside - Whether to deactivate instances on the inside of the region (true) or the outside (false).
 * @param {Bool} notme - Whether to exclude the calling instance from deactivation (true) or not (false).
 */
declare function instance_deactivate_region(left: Real,top: Real,width: Real,height: Real,inside: Bool,notme: Bool): Undefined;

/**
 * This function returns whether an object with the specified index exists or not. Note that this checks to see if an object is present in the Asset Browser, and not actually in the game room. For that you should use the function instance_exists().
 * @returns {Bool}
 * @param {Asset.GMObject} obj - The index of the object to check.
 */
declare function object_exists(obj: GMObject): Bool;

/**
 * This function will tell you whether the object you are checking has a mask index or not, and if it does then it will return the index of that mask, or -1 if it does not. Please note that this is not an instance function! You can have an object with no mask while an instance of that same object can have one and vice-versa, or they can even have different masks. You can set an individual instances mask index using the mask_index instance variable.
 * @returns {Asset.GMSprite}
 * @param {Asset.GMObject} obj - The index of the object to check
 */
declare function object_get_mask(obj: GMObject): GMSprite;

/**
 * This function will return the name as a string of the specified object. This name is the one that has been specified for the object in the Asset Browser of the main GameMaker window. Please note that this is only a string and cannot be used to reference the object directly - for that you would need the object index. You can, however, use this string to get the object index using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMObject} obj - The index of the object to check.
 */
declare function object_get_name(obj: GMObject): String;

/**
 * This function will get you the object_index of any parent that has been assigned to the specified object, or else return -100 to show that the object has no parent assigned to it, or -1 if the object being checked does not exist. For more information on parents see the section on the Object Editor.
 * @returns {Asset.GMObject}
 * @param {Asset.GMObject} obj - The index of the object to check
 */
declare function object_get_parent(obj: GMObject): GMObject;

/**
 * This function will tell you whether the object you are checking has been flagged as "persistent" or not. A persistent object is one that will cause any instances of it to be carried through from room to room unless they are explicitly destroyed. Please note that this is not an instance function! So, you can have a persistent object and a non-persistent instance of the same object and vice-versa. You can set an individual instances persistent flag using the persistent instance variable.
 * @returns {Bool}
 * @param {Asset.GMObject} obj - The index of the object to check.
 */
declare function object_get_persistent(obj: GMObject): Bool;

/**
 * This function will tell you whether the object you are checking has been flagged as "physics enabled"  - in which case it'll return true, - or not - in which case it will return false.
 * @returns {Bool}
 * @param {Asset.GMObject} obj - The index of the object to check.
 */
declare function object_get_physics(obj: GMObject): Bool;

/**
 * This function will tell you whether the object you are checking has been flagged as "solid" or not. A solid object generates a special collision event when using the traditional collision system (ie: the physics world is off). Please note that this is not an instance function! So, you can have a solid object and a normal instance of the same object and vice-versa. You can set an individual instances solid flag using the solid instance variable.
 * @returns {Bool}
 * @param {Asset.GMObject} obj - The index of the object to check.
 */
declare function object_get_solid(obj: GMObject): Bool;

/**
 * This function will tell you whether the object you are checking has a sprite or not, and if it does then it will return the index of that sprite, or -1 if it does not. Please note that this is not an instance function! You can have an object with no sprite while an instance of that same object can have one and vice-versa, or they can even have different sprites. You can set an individual instances sprite using the sprite_index instance variable.
 * @returns {Asset.GMSprite}
 * @param {Asset.GMObject} obj - The index of the object to check
 */
declare function object_get_sprite(obj: GMObject): GMSprite;

/**
 * This function will tell you whether the object you are checking has been flagged as "visible" (runs its draw event) or not (does not run its draw event). Please note that this is not an instance function! So, you can have a visible object and an invisible instance of the same object and vice-versa. You can set an individual instances visibility using the visible instance variable.
 * @returns {Bool}
 * @param {Asset.GMObject} obj - The index of the object to check.
 */
declare function object_get_visible(obj: GMObject): Bool;

/**
 * This function can be used to check an object and see if it is an ancestor or not of another object. So, both arguments need to be object indices and not the instance ids, and the first one is always the object that you want to find out if it is a child of the second argument, which is always the object that want to check as the ancestor (parent).
 * @returns {Bool}
 * @param {Asset.GMObject} obj - The object that is being checked as the child.
 * @param {Asset.GMObject} par - The object that is being checked as the ancestor (parent).
 */
declare function object_is_ancestor(obj: GMObject,par: GMObject): Bool;

/**
 * With this function you can set the mask_index of a specific object (for more information on masks see The Object Editor). This means that all instances of this object that are created after the mask has been changed will be created with this new mask, while instances that are already in the room may not be affected. You can set this to -1 to remove a mask sprite and so default to the mask defined for the sprite of the object (or no masks if no sprite has been chosen).
 * @returns {Undefined}
 * @param {Asset.GMObject} index - The index of the object to change.
 * @param {Asset.GMSprite} spr - The new sprite to use as the object's mask.
 */
declare function object_set_mask(index: GMObject,spr: GMSprite): Undefined;

/**
 * With this function you can set the persistence of a specific object. A persistent object is "carried over" from room to room and maintains its properties at all times (for more information on persistence see the section on the Object Editor). Setting the persistence of the object means that all instances of this object that are created after the persistence has been changed will be created persistent, while instances that are already in the room may not be affected.
 * @returns {Undefined}
 * @param {Asset.GMObject} index - The index of the object to change.
 * @param {Bool} pers - Whether the object should be flagged as persistent (true) or not (false).
 */
declare function object_set_persistent(index: GMObject,pers: Bool): Undefined;

/**
 * With this function you can flag a specific object as being solid or not (for more information on the "solid" flag see the section on the Object Editor). This means that all instances of this object that are created after solid has been changed will be created with this new state, while instances that are already in the room may not be affected.
 * @returns {Undefined}
 * @param {Asset.GMObject} index - The index of the object to change.
 * @param {Bool} solid - The new solidity of the object (true=solid, false=not solid).
 */
declare function object_set_solid(index: GMObject,solid: Bool): Undefined;

/**
 * With this function you can set the sprite index of a specific object. This means that all instances of this object that are created after the sprite_index has been changed will be created with this new sprite_index, while instances that are already in the room may not be affected.
 * @returns {Undefined}
 * @param {Asset.GMObject} index - The index of the object to change.
 * @param {Asset.GMSprite} spr - The sprite to assign to the object.
 */
declare function object_set_sprite(index: GMObject,spr: GMSprite): Undefined;

/**
 * With this function you can flag a specific object as being visible or not (for more information on the "visible" flag see the section on the Object Editor). This means that all instances of this object that are created after visible has been changed will be created with this new state, while instances that are already in the room may not be affected.
 * @returns {Undefined}
 * @param {Asset.GMObject} index - The index of the object to change.
 * @param {Bool} vis - The new visibility of the object (true=visible, false=invisible).
 */
declare function object_set_visible(index: GMObject,vis: Bool): Undefined;

/**
 * This function will call the current event of the parent object of the instance. Normally, when an instance has a parent object, it automatically inherits all the same events as the parent, but if (for example) your parent object has a create event and you add one to your child object, all instances of the child object will run the new create event that you have added and not that which is in the parent object. Should you need to use both the parent object event and the child object event of the same type, you should use this function as it will run the parent object event before continuing with the rest of the code or actions that the child event contains.
 * @returns {Undefined}
 */
declare function event_inherited(): Undefined;

/**
 * This function will perform the specified event, with the designated argument, for the instance running the code. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down.
 * @returns {Undefined}
 * @param {Constant.EventType} type - The type of event to perform (see the table above).
 * @param {Any} numb - The specific event constant or value, if one is necessary (otherwise, just use 0).
 */
declare function event_perform(type: EventType,numb: Any): Undefined;

/**
 * This function is used to perform any one of the Asynchronous Events provided in GameMaker. You supply the Async event constant (shown in the table below) and a DS map which will be available in the called Async event in the async_load variable.
 * @returns {Undefined}
 * @param {Constant.AsyncEventType} type - The type of event to perform (see the table above).
 * @param {Id.DsMap} ds_map - The DS map to use as async_load in the called event.
 */
declare function event_perform_async(type: AsyncEventType,ds_map: DsMap): Undefined;

/**
 * This functions works the same as event_perform() except that this time you can specify events from another object. There are many options here which allow complete simulation of all possible events, but note that this literally just performs all the code in the event and the game will not modify anything to make it trigger itself manually, for example if you choose to perform a keyboard press event, the event will be triggered but the relevant key will not be recognised as having been pressed. Or if you perform an alarm event, the alarm counter will not be set to -1 but rather continue to count down. You can find a complete list of the available constants this function requires from the the page for the function event_perform().
 * @returns {Undefined}
 * @param {Any} obj - The object that should have its event triggered.
 * @param {Constant.EventType} type - The type of event to perform.
 * @param {Any} numb - The specific event, if one is necessary (otherwise, just use 0).
 */
declare function event_perform_object(obj: Any,type: EventType,numb: Any): Undefined;

/**
 * With this function you tell the instance to run the actions or code that has been placed within one of the 16 user defined events. These events can only be called in this way, or using the event_perform function.
 * @returns {Undefined}
 * @param {Real} numb - The number of event to call, between 0 and 15.
 */
declare function event_user(numb: Real): Undefined;

/**
 * Calling this function will end the current path that the instance is following, as set when the function path_start() was called..
 * @returns {Undefined}
 */
declare function path_end(): Undefined;

/**
 * This function can be used to return whether the path is flagged as closed (true) or open (false), ie whether the path loops or if it has a definitive beginning and end.
 * @returns {Bool}
 * @param {Asset.GMPath} index - The index of the path to check.
 */
declare function path_get_closed(index: GMPath): Bool;

/**
 * Paths can be either smooth or straight (a smooth path calculates a curved path around the defining points, whereas a straight path just goes straight from one point to another). This function can be used to find out whether the given path is smooth (true) or not (false).
 * @returns {Bool}
 * @param {Asset.GMPath} index - The index of the path to check.
 */
declare function path_get_kind(index: GMPath): Bool;

/**
 * You can use this function to get the exact length of a path in pixels. this is not an approximate length from point to point, but rather an exact length along the shape of the path, even when the path is smooth with a high curved precision.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to measure.
 */
declare function path_get_length(index: GMPath): Real;

/**
 * This function will return the name of the path that is referenced as a string. The name is whatever has been used to define the path in the editor or (if the path has been created through a code function) it will return a string with the format " _newpathXX" where "XX" is the number of the path generated, starting at 0 and incrementing by one every time a new path is created. Please note that this is only a string and cannot be used to reference the path directly - for that you would need the path index ID. You can, however, use this string to get the path index ID using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMPath} index - The index of the path to check.
 */
declare function path_get_name(index: GMPath): String;

/**
 * This function can be used to return the number of points on a path.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 */
declare function path_get_number(index: GMPath): Real;

/**
 * With this function you can get the speed of the point (as defined in the Path Editor or when you dynamically add a path point using path_add_point()) expressed as a percentage. So, if you have a path point set to 50 in the path editor, this function would return 50 when used.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 * @param {Real} n - The point identity to check.
 */
declare function path_get_point_speed(index: GMPath,n: Real): Real;

/**
 * This function will return the x position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the x position of point 10) then a value of 0 will be returned.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 * @param {Real} n - The point identity to check.
 */
declare function path_get_point_x(index: GMPath,n: Real): Real;

/**
 * This function will return the y position (in room coordinates) of the point that you input for the path that you index. If the point is outside of the range of the path (ie: a path has 8 points and you ask for the y position of point 10) then a value of 0 will be returned.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 * @param {Real} n - The point identity to check.
 */
declare function path_get_point_y(index: GMPath,n: Real): Real;

/**
 * This function returns with what precision the given path has been "smoothed", and will be an integer value from 1 to 8. Although you can get (and set) this value for a straight-line path it will have no influence over how an instance uses the path as it is only relevant when the path kind is set to "smooth".
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 */
declare function path_get_precision(index: GMPath): Real;

/**
 * This function returns the speed factor of any given position on a path. The position should be a value between 0 and 1 (you can use path_position, for example, if you need the current position of the instance) with 0 being the start position and 1 being the end. The value returned will be the factor by which the actual path_speed is being set. For example, on a path with only two points, 0 and 1, where the point 0 speed factor is 100 and point 1 speed factor is 0, the function path_get_speed(path, 0.5) will return 50.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 * @param {Real} pos - How far through the path to check. Between 0 (start) and 1 (end), can be decimal.
 */
declare function path_get_speed(index: GMPath,pos: Real): Real;

/**
 * With this function you can get the x coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to that far through the path. This needn't be a defining point of the path, it can be anywhere on it.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 * @param {Real} pos - How far through the path to check. Between 0 (start) and 1 (end).
 */
declare function path_get_x(index: GMPath,pos: Real): Real;

/**
 * With this function you can get the y coordinate of a position on any given path. 0 is the start of the path, 1 is the end of the path, and anything in between equates to the normalised distance along the length of the path. This value needn't be a defining point of the path, it can be anywhere on it.
 * @returns {Real}
 * @param {Asset.GMPath} index - The index of the path to check.
 * @param {Real} pos - How far through the path to check. Between 0 (start) and 1 (end).
 */
declare function path_get_y(index: GMPath,pos: Real): Real;

/**
 * A path is created from a series of defining points that are linked together and then used to plan the movements of an instance. They can be created with code, or in the Path Editor and they are assigned to an instance to use in the game. You would then use this function to tell your instance which path to follow, what speed to follow the path (measured in pixels per step), how to behave when it reaches the end of the path, and whether to follow the absolute or relative path position. This last part means that it either starts and follows the path exactly as you designed and placed it in the Path Editor (absolute), or it starts and follows the path from the position at which the instance was created (relative).
 * @returns {Undefined}
 * @param {Asset.GMPath} path - The path index to start.
 * @param {Real} speed - The speed of which to follow the path in pixels per step, negative meaning going backwards.
 * @param {Constant.PathAction} endaction - What to do when the end of the path is reached (see the constants listed below).
 * @param {Bool} absolute - Whether the calling instance should follow the absolute path as it is in the editor (true) or a relative path to its current position (false).
 */
declare function path_start(path: GMPath,speed: Real,endaction: PathAction,absolute: Bool): Undefined;

/**
 * With this function you can create a path in GameMaker without using the path editor. this function will return the index of the path which should be stored in a variable and used as the reference for that path from then on. Please note that the created path is empty ie: it has no points defined, so you will then have to use the other available functions to add points to the path or be using MP grids to generate the path. Once you have finished using the path, or wish to create a new one and store its index in the same variable you should first delete the old path with path_delete to prevent memory leaks which can eventually crash your game.
 * @returns {Asset.GMPath}
 */
declare function path_add(): GMPath;

/**
 * With this function you can add a point to the specified path and set its speed factor. This point is added onto the end of the path, irrespective of the position of the point, and the factor is equal to the percentage of path_speed that the following instance actually goes at when it reaches this point in the path. If you wish to place a path point at some other position that is not the end, you should use path_insert_point().
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to add the point to.
 * @param {Real} x - The x coordinate of the new point.
 * @param {Real} y - The y coordinate of the new point.
 * @param {Real} speed - The speed factor of the point (default value is 100).
 */
declare function path_add_point(index: GMPath,x: Real,y: Real,speed: Real): Undefined;

/**
 * With this code you can append one path onto another one, effectively joining them together, and for this to work, both paths must previously exist. In general you would want to use this function on paths created using path_add(), since if you use it on a path asset, it will permanently affect the path for instances in the game from the moment the function is used until the end of the game.
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The new index of the path.
 * @param {Asset.GMPath} path - The index of the path that will be appended to 'index'.
 */
declare function path_append(index: GMPath,path: GMPath): Undefined;

/**
 * With this function you can copy the path data from one path to another. The path being copied to will be cleared first (should it have any path points) and be completely overwritten by the path being copied from. Neither path is deleted in the process and the result is two paths, with two different indexes, but the exact same form and points. In general you would want to use this function on a path created using path_add(), since if you use it on a path asset, it will permanently affect the path for all instances in the game from the moment the function is used until the end of the game.
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to be overwritten.
 * @param {Asset.GMPath} path - The index of the path that will overwrite 'index'.
 */
declare function path_assign(index: GMPath,path: GMPath): Undefined;

/**
 * With this function you can change the position and/or the speed factor of any point previously defined for a path (the path can have been created in the path editor or through code using path_add()). If used on a path from the Asset Browser, note that the function will change the actual asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to change a point of.
 * @param {Real} n - The defining point to change the attributes of.
 * @param {Real} x - The new x coordinate (relative to the path) of the point.
 * @param {Real} y - The new y coordinate (relative to the path) of the point.
 * @param {Real} speed - The new speed factor of the point.
 */
declare function path_change_point(index: GMPath,n: Real,x: Real,y: Real,speed: Real): Undefined;

/**
 * With this function you can remove all point definitions from a path, effectively making an "empty" path. This does not delete the path, for that you should use path_delete(), however it should be noted that this function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to clear.
 */
declare function path_clear_points(index: GMPath): Undefined;

/**
 * You can use this code to remove a path from memory. If this path has been created dynamically using path_add(), the variable that holds the path index will no longer be valid for accessing the path as it no longer exists, and if the path was created using the Path Editor that path can no longer be accessed in the whole game as you are permanently deleting it.
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to delete.
 */
declare function path_delete(index: GMPath): Undefined;

/**
 * With this function you can remove a point from the specified path. Path points are numbered from 0 so the first point is always the 0th point and the last path point will be path_get_number() - 1. If you call this function on a path asset, then the removal of the point will be permanent and all instances assigned the path in the future will be missing the point that was removed. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to delete a point from.
 * @param {Asset.GMPath} n - The defining point to delete.
 */
declare function path_delete_point(index: GMPath,n: GMPath): Undefined;

/**
 * This function takes a path and copies it into a new path. The new path is created in the process, and the index is returned to be used in all further calls to use this new path.
 * @returns {Asset.GMPath}
 * @param {Asset.GMPath} index - The index of the existing path to duplicate.
 */
declare function path_duplicate(index: GMPath): GMPath;

/**
 * his function returns whether a path with the given index exists or not. Note that if you check for the existence of a path through a variable that has yet to have been declared, this will throw an error.
 * @returns {Bool}
 * @param {Asset.GMPath} index - The index of the path to check for.
 */
declare function path_exists(index: GMPath): Bool;

/**
 * This function takes all the path points and flips them along the horizontal axis. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to flip.
 */
declare function path_flip(index: GMPath): Undefined;

/**
 * With this function you can insert a new point into a path (the path can have been created in the path editor or through code using path_add()). The point will be added into the path before the point "n" that is specified in the function.
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to insert the point into.
 * @param {Real} n - The defining point to insert the new point BEFORE.
 * @param {Real} x - The x coordinate (relative to the path) of the new point.
 * @param {Real} y - The y coordinate (relative to the path) of the new point.
 * @param {Real} speed - The speed factor of the point.
 */
declare function path_insert_point(index: GMPath,n: Real,x: Real,y: Real,speed: Real): Undefined;

/**
 * This function takes all the path points and mirrors them along the vertical axis. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to mirror.
 */
declare function path_mirror(index: GMPath): Undefined;

/**
 * This function can be used to re-scale the given path along both (or either) the vertical and horizontal axis, basically moving each of the path points to a new position corresponding to this scale around the centre of the path. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to scale.
 * @param {Real} xscale - What to multiply the current horizontal scale by. Default scale is 1.
 * @param {Real} yscale - What to multiply the current vertical scale by. Default scale is 1.
 */
declare function path_rescale(index: GMPath,xscale: Real,yscale: Real): Undefined;

/**
 * With this function you can reverse the order in which the individual path points are numbered, so, for example, if the path has 5 points, point 0 would become point 4, point 1 would be point 3 and point 2 would not be changed. The actual position of the points remains the same, only the order in which they are processed is changed. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to change.
 */
declare function path_reverse(index: GMPath): Undefined;

/**
 * You can use this function to rotate a given path around its center. Remember that in GameMaker (unless you are using physics) the angles are calculated counter-clockwise, so rotating the path by 90 degrees would rotate the path to the left. This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to flip.
 * @param {Real} angle - The angle of rotation degrees.
 */
declare function path_rotate(index: GMPath,angle: Real): Undefined;

/**
 * This function can be used to flag a given path as being open (false) or closed (true). A closed path has its start point connected to its end point, forming a loop, and an open path has a definitive, unconnected start and finish. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to change.
 * @param {Bool} closed - Whether the path is closed (true) or not (false).
 */
declare function path_set_closed(index: GMPath,closed: Bool): Undefined;

/**
 * This function can be used to set the kind of path that you wish the specified resource to be. This can be either a straight line path (set to 0) or a smoothed path (set to 1) in which case the path precision has to be taken into account too (the precision can be set too using path_set_precision()). This function changes the actual path resource, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game.If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to change.
 * @param {Real} val - The kind of the path, 0 for straight or 1 for smooth.
 */
declare function path_set_kind(index: GMPath,val: Real): Undefined;

/**
 * With this function you can change the "smoothness" of a path. This value must be between 1 and 8, with a low value creating straighter edges with sharper curves between points, while a higher value will round the points and make the path a lot more "curvy". Note that this function will have no visible effect if the path has not been set to smooth in the path editor or using the function path_set_kind(). This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to change.
 * @param {Real} prec - The precision of the path. Must be an integer between 1 and 8.
 */
declare function path_set_precision(index: GMPath,prec: Real): Undefined;

/**
 * With this function you can shift a path along the horizontal and vertical axis. Please note that this will have no visible effect in-game if the instance following the path being shifted follows it relatively (rather than absolutely) as the path's position is disregarded then. This function changes the actual path asset, and so will permanently affect how the path is used by all instances in the game from the moment the function is used until the end of the game. If this is not what you require, then you should use a function like path_duplicate() to create a copy of the path first, then call this function on the duplicated asset (don't forget to call path_delete() on the asset when it is no longer required).
 * @returns {Undefined}
 * @param {Asset.GMPath} index - The index of the path to change.
 * @param {Real} xshift - The number of horizontal pixels to shift the path. Negative=left, positive=right.
 * @param {Real} yshift - The number of vertical pixels to shift the path. Negative=up, positive=down.
 */
declare function path_shift(index: GMPath,xshift: Real,yshift: Real): Undefined;

/**
 * This function will create a new, empty, room and add it to your game, returning its index to be stored in a variable for all further codes that deal with this room. Note that each room is permanently added to the game until the executable is closed, ie: rooms added through code cannot be deleted again. This has important implications for memory use and so you should use this function with care.
 * @returns {Asset.GMRoom}
 */
declare function room_add(): GMRoom;

/**
 * This function will copy one room to another, removing all instances, tiles etc... from the room that is being copied to and replacing them completely with the new room contents. You supply the index to for the room to be copied to (either as defined in the asset browser or as returned by the function room_add()) as well as the index of the source room. Note that calling this function on a room asset created in the Asset Browser will permanently change the contents of the room, and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).
 * @returns {Undefined}
 * @param {Asset.GMRoom} ind - The index of the room to be copied to.
 * @param {Asset.GMRoom} source - The index of the room to be copied from.
 */
declare function room_assign(ind: GMRoom,source: GMRoom): Undefined;

/**
 * This will duplicate a given room and return the duplicates index to be used in all further calls to reference the new room.
 * @returns {Asset.GMRoom}
 * @param {Asset.GMRoom} index - The index of the original room to be duplicated.
 */
declare function room_duplicate(index: GMRoom): GMRoom;

/**
 * With this function you can check and see whether the room you specify exists or not. This function takes the room index (a real number) and not the room name (a string). This function is most useful when you are creating rooms dynamically using the function room_add(), but you can also use the read only variables room_first and room_last or the functions room_next() and room_previous() to get a specific room index, or provide a variable that has stored the index of any other room in your game.
 * @returns {Bool}
 * @param {Asset.GMRoom} index - The index of the room to check.
 */
declare function room_exists(index: GMRoom): Bool;

/**
 * With this function you can get the unique index ID of the camera assigned to a specific view in a room other than the current one. You give the room to use, the view port to use (from 0 to 7) and the function will return a camera index.
 * @returns {Id.Camera}
 * @param {Asset.GMRoom} rm - The index of the room to get the view camera of
 * @param {Real} vind - The index of the view port to get the camera of
 */
declare function room_get_camera(rm: GMRoom,vind: Real): Camera;

/**
 * This function can be used to return the name of the specified room as a string. Please note that this is only a string and cannot be used to reference the room directly - for that you would need the room index. You can, however, use this string to get the room index using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMRoom} index - The index of the room to check the name of.
 */
declare function room_get_name(index: GMRoom): String;

/**
 * This function can be used to get all the information on a room. It returns a struct that contains data that has been requested, a room can be very large so this can take a long time to complete, and optionally some data can be omitted to speed it up. NOTE: Tilemap data is an array of all the tilemap indices stored as a one dimensional array of width * height, where an x, y entry is indexed as (y*width)+x
 * @returns {Struct}
 * @param {Asset.GMRoom} index - The index of the room.
 * @param {Bool} views - Add room view information to the struct (defaults to true)
 * @param {Bool} instances - Add instance information to the struct (defaults to true)
 * @param {Bool} layers - Add room layer information to the struct (defaults to true)
 * @param {Bool} layer_elements - Add layer element information to the struct (defaults to true), NOTE: you must have layers enabled to get any layer_elements
 * @param {Bool} tilemap_data - Add tilemap data information to the struct (defaults to true), NOTE: you must have layers and layer_elements enabled to get any tilemap_data (if present)
 */
declare function room_get_info(index: GMRoom,views: Bool,instances: Bool,layers: Bool,layer_elements: Bool,tilemap_data: Bool): Struct;

/**
 * With this function you can retrieve the details of a view port in a room other than the current one. You give the room ID and the index of the view port to retrieve (from 0 to 7) and the function will return an array of 5 indices, where:
 * @returns {Array[Real]}
 * @param {Asset.GMRoom} rm - The index of the room to get viewport data from
 * @param {Real} vind - The index of the view port to get
 */
declare function room_get_viewport(rm: GMRoom,vind: Real): Array[Real];

/**
 * This function permits you to go to any room in your game project, whether created using code or in the Asset Browser. You supply the room index (stored in the variable for the room name, or as a variable returned from the function room_add()). Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the Room End event.
 * @returns {Undefined}
 * @param {Asset.GMRoom} index - The index of the room to go to.
 */
declare function room_goto(index: GMRoom): Undefined;

/**
 * With this function you can make your game go to the next one as listed in the Room Manager at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event.
 * @returns {Undefined}
 */
declare function room_goto_next(): Undefined;

/**
 * With this function you can make your game go to the previous one as listed in the Room Manager at the time the game was compiled. If this room does not exist, an error will be thrown and the game will be forced to close. Note that the room will not change until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the Room End event.
 * @returns {Undefined}
 */
declare function room_goto_previous(): Undefined;

/**
 * With this function you can add an instance into any room other than the current one and at any position within that room. The function returns the unique id of the instance which can then be used in further function calls to set properties etc... of that instance, but only once the game has entered the specified room. If you wish to create an instance in the current room you should be using the function instance_create_layer(). Note that calling this function on a room asset created in the Asset Browser will permanently add the instance to the room, and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).
 * @returns {Id.Instance}
 * @param {Asset.GMRoom} index - The index of the room to add an object instance to.
 * @param {Real} x - The x position of the new instance.
 * @param {Real} y - The y position of the new instance.
 * @param {Asset.GMObject} obj - The object to add an instance of.
 */
declare function room_instance_add(index: GMRoom,x: Real,y: Real,obj: GMObject): Instance;

/**
 * This function will clear a room of all instances (no destroy events shall be called for the instances that are being removed). Note that calling this function on a room asset created in the Asset Browser will permanently clear the room of instances, and even calling game_restart() will not return the room to it's original state (only ending the game and opening it again will start with the room in its original state again).
 * @returns {Undefined}
 * @param {Asset.GMRoom} index - The index of the room to clear all instances in.
 */
declare function room_instance_clear(index: GMRoom): Undefined;

/**
 * With this function you can retrieve the index of the room after the room input into the function. For example you can use the variable room to get the index of the current room and then use this function to find the room that follows it, as listed in the Room Manager. If there is no room after the one you input then -1 is returned. Note that this function will not recognise or take into consideration rooms that have been added dynamically using room_add() or room_duplicate().
 * @returns {Asset.GMRoom}
 * @param {Asset.GMRoom} numb - The index of the room to get the next one after.
 */
declare function room_next(numb: GMRoom): GMRoom;

/**
 * With this function you can retrieve the index of the room before the room input into the function. For example you can use the variable room to get the index of the current room and then use this function to find the room that comes before it, as listed in the Room Manager. If there is no room before the one you input then -1 is returned. Note that this function will not recognise or take into consideration rooms that have been added dynamically using room_add() or room_duplicate().
 * @returns {Asset.GMRoom}
 * @param {Asset.GMRoom} numb - The index of the room to get the one before from.
 */
declare function room_previous(numb: GMRoom): GMRoom;

/**
 * This function will restart the current room, as if it had just been entered. Note that the room will not restart until the end of the event where the function was called, so any code after this has been called will still run if in the same event. This function will also trigger the Room End event.
 * @returns {Undefined}
 */
declare function room_restart(): Undefined;

/**
 * With this function you can assign a camera to a specific viewport in a room other than the current one. You supply the room index, the view index (from 0 to 7) and then the index of the camera to use.
 * @returns {Undefined}
 * @param {Asset.GMRoom} rm - The index of the room to set the view camera of
 * @param {Real} vind - The index of the view port to assign the camera to
 * @param {Id.Camera} camera - The index of the camera to assign
 */
declare function room_set_camera(rm: GMRoom,vind: Real,camera: Camera): Undefined;

/**
 * With this function you can change (or set) the height of any room in your game except the current one.
 * @returns {Undefined}
 * @param {Asset.GMRoom} index - The index of the room to set the height of.
 * @param {Real} h - The new height of the room in pixels.
 */
declare function room_set_height(index: GMRoom,h: Real): Undefined;

/**
 * With this function you can change (or set) the persistence of any room in your game except the current one. A room with persistence flagged as true it will maintain the state of all instances within that room if the player leaves and then returns, whereas if persistence is flagged as false it will be reset to the initial state every time. You should note that a persistent room uses considerably more memory than a normal room and it is not recommended to have too many of them in your game.
 * @returns {Undefined}
 * @param {Asset.GMRoom} index - The index of the room to set the persistence of.
 * @param {Bool} val - Whether the room shall be persistent (true) or not (false).
 */
declare function room_set_persistent(index: GMRoom,val: Bool): Undefined;

/**
 * With this function you can set the view port properties for any room in your game except the current one. You supply the room index to set the view port in, the view port index (from 0 to 7) and then whether the view port should be visible at the start of the room or not (set to true to make the port visible, and false otherwise). After that you set the x and y coordinate (corresponding to the top left position of the view port) and then the width and height in pixels.
 * @returns {Undefined}
 * @param {Asset.GMRoom} rm - The index of the room to set
 * @param {Real} vind - The index of the view port to set
 * @param {Bool} vis - The visibility of the view port (true is visible, false is invisible)
 * @param {Real} xport - The x position for the view port in the room
 * @param {Real} yport - The y position of the view port in the room
 * @param {Real} wport - The width (in pixels) of the view port
 * @param {Real} hport - The height (in pixels) of the view port
 */
declare function room_set_viewport(rm: GMRoom,vind: Real,vis: Bool,xport: Real,yport: Real,wport: Real,hport: Real): Undefined;

/**
 * With this function you can enable (true) or disable (false) the view of any room within your game except the current one.
 * @returns {Undefined}
 * @param {Asset.GMRoom} index - The index of the room to set.
 * @param {Bool} val - Whether to enable (true) or disable (false) views in the given room.
 */
declare function room_set_view_enabled(index: GMRoom,val: Bool): Undefined;

/**
 * With this function you can change (or set) the width of any room in your game except the current one.
 * @returns {Undefined}
 * @param {Asset.GMRoom} index - The index of the room to set the width of.
 * @param {Real} w - The new width of the room in pixels.
 */
declare function room_set_width(index: GMRoom,w: Real): Undefined;

/**
 * This function controls the alpha (transparency) of the background sprite. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the background element being 1. Note that if the layer the background element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible again.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Real} alpha - The alpha for background sprite, from 0 to 1 (default is 1)
 */
declare function layer_background_alpha(background_element_id: BackgroundElement,alpha: Real): Undefined;

/**
 * This function controls the blending (or "tinting") of the background sprite and the default value is -1 (which represents the constant c_white, which can also be used). Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the blending colour to use. Below you can see an example of a sprite that has been blended with different colours:
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Constant.Color} blend - The colour to blend with the background sprite (default is c_white)
 */
declare function layer_background_blend(background_element_id: BackgroundElement,blend: Color): Undefined;

/**
 * With this function you can assign a sprite resource to a layer to be used as a background in your project. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and a sprite index (which would be the name of the sprite as shown in the Asset Browser), and it will be added to the layer. The function returns the unique ID value for the element, which can then be used in further layer functions for backgrounds.
 * @returns {Id.BackgroundElement}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Asset.GMSprite} sprite - The sprite index to be used
 */
declare function layer_background_create(layer_id: Any,sprite: GMSprite): BackgroundElement;

/**
 * This function will destroy the given background element. You supply the background ID (which you get when you create the background using layer_background_create() or when you use the layer ID along with layer_get_background_id()) and this will remove it. Note that this does not remove the layer, only the background from it, and if the background is one that has been added in the room editor, then the next time you leave the room and then return, the background will be recreated again. However if the room is persistent, the background will be removed unless room persistence is switched off again.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background to be destroyed
 */
declare function layer_background_destroy(background_element_id: BackgroundElement): Undefined;

/**
 * You can use this function to check and see if a background element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()) and the function will return either true if the element exists, or false if it does not.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to check
 */
declare function layer_background_exists(layer_id: Any,background_element_id: BackgroundElement): Bool;

/**
 * This function can be used to get the alpha value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).
 * @returns {Real}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_alpha(background_element_id: BackgroundElement): Real;

/**
 * This function can be used to get the blend colour of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the colour assigned.
 * @returns {Constant.Color}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_blend(background_element_id: BackgroundElement): Color;

/**
 * This function can be used to find out if the background element is tiled horizontally or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element is currently tiled, or false if it is not.
 * @returns {Bool}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_htiled(background_element_id: BackgroundElement): Bool;

/**
 * This function can be used to retrieve the unique ID value of the background element on a layer. You supply the layer ID (which you get when you use the layer name along with layer_get_id()) and the function will return the ID value associated with the background element on the layer. Note that this function is specifically designed for use with backgrounds that have been added in the IDE, as if you add a background to a layer through code using the function layer_background_create(), then it will return the unique ID for the background element added.
 * @returns {Id.BackgroundElement}
 * @param {Any} layer_id - The unique ID value of the layer to target
 */
declare function layer_background_get_id(layer_id: Any): BackgroundElement;

/**
 * This function can be used to get the current image index value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the image index being shown for the sprite. The function will return -1 if either the background element doesn't exist or the element doesn't have a valid sprite assigned to it.
 * @returns {Real}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_index(background_element_id: BackgroundElement): Real;

/**
 * This function can be used to get the current speed multiplier value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the speed multiplier being used to animate the sprite. Default value is 1.
 * @returns {Real}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_speed(background_element_id: BackgroundElement): Real;

/**
 * This function can be used to get the current sprite index value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return a real value that represents the sprite index being shown. If the element has no sprite assigned, the function will return -1.
 * @returns {Asset.GMSprite}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_sprite(background_element_id: BackgroundElement): GMSprite;

/**
 * This function can be used to get the stretched state of the background element sprite. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element sprite is currently stretched to fit the room, or false if it is not.
 * @returns {Bool}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_stretch(background_element_id: BackgroundElement): Bool;

/**
 * This function can be used to get the visible state of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element is currently visible, or false if it is not. Note that this return value is not affected by whether the layer the element is on is visible or not.
 * @returns {Bool}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_visible(background_element_id: BackgroundElement): Bool;

/**
 * This function can be used to find out if the background element is tiled vertically or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return either true if the element is currently tiled, or false if it is not.
 * @returns {Bool}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_vtiled(background_element_id: BackgroundElement): Bool;

/**
 * This function can be used to get the current scale multiplier value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the scale multiplier being used to draw the sprite. Default value is 1.
 * @returns {Real}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_xscale(background_element_id: BackgroundElement): Real;

/**
 * This function can be used to get the current scale multiplier value of the background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and the function will return real value that represents the scale multiplier being used to draw the sprite. Default value is 1.
 * @returns {Real}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to get the information from
 */
declare function layer_background_get_yscale(background_element_id: BackgroundElement): Real;

/**
 * Using this function you can change whether the given background element on a layer should be tiled horizontally or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the tiling value. If set to true then the element will be displayed tiled horizontally across the room, and when set to false, the element will not be tiled. This function is for 2D projects only, and will not work correctly when a 3D camera projection is used.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Bool} htile - The horizontal tiling toggle, which can be true or false
 */
declare function layer_background_htiled(background_element_id: BackgroundElement,htile: Bool): Undefined;

/**
 * This function can be used to set the image index of the background sprite which has multiple sub-images. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the image index to use. If you set a value outside of the range of sub-images, then the image index will loop around.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Real} index - The image index to use for the background
 */
declare function layer_background_index(background_element_id: BackgroundElement,index: Real): Undefined;

/**
 * This function can be used to set the speed of an animating sprite that has been assigned to a background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the animation speed. If the IDE has set the animation speed for the sprite used to be calculated as Frames Per Game Frame, then the speed value given is a multiplier, with 1 being the default value, and setting it to 0.5 will half the animation speed, while setting it to 2 will double it. However, if the IDE has set the animation speed for the sprite used to be calculated as Frames Per Second, then the speed value given is a literal frames per second value, so setting this to 5, for example, will set the animation to loop 5 frames every second that the game runs. If the background element has no sprite attached or the sprite used has no sub-images, this function will have no effect.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Real} speed - The speed multiplier/value to use for the element
 */
declare function layer_background_speed(background_element_id: BackgroundElement,speed: Real): Undefined;

/**
 * Using this function you can set the sprite index of the background element. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then give a sprite index to be used. The background element image will be replaced with the new sprite. If you give a value of -1, the element will have no sprite assigned (but will still exist and can have a sprite assigned again later).
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Asset.GMSprite} sprite_index - The sprite index of the sprite to use for the background element
 */
declare function layer_background_sprite(background_element_id: BackgroundElement,sprite_index: GMSprite): Undefined;

/**
 * Using this function you can toggle a background element sprite to stretch to fit the room or remain at 1:1 with the resolution. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the stretch argument to true or false. When set to true the element sprite will be stretched to fit the room (either scaled up or scaled down depending on the sizes of the sprite and the room), and when set to false, the element sprite will be displayed at its native resolution.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Bool} stretch - The stretch toggle, which can be true or false
 */
declare function layer_background_stretch(background_element_id: BackgroundElement,stretch: Bool): Undefined;

/**
 * Using this function you can toggle a background elements visibility. You supply the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the visible argument to true or false. When set to true the element will be displayed, and when set to false, the element will not be displayed. Note that this is dependent on the layer visibility, and even if the background element is flagged as visible, it will not be drawn if the layer it is on is flagged as not visible.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Bool} visible - The visibility toggle, which can be true or false
 */
declare function layer_background_visible(background_element_id: BackgroundElement,visible: Bool): Undefined;

/**
 * Using this function you can change whether the given background element on a layer should be tiled vertically or not. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the tiling value. If set to true then the element will be displayed tiled vertically down the room, and when set to false, the element will not be tiled. This function is for 2D projects only, and will not work correctly when a 3D camera projection is used.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Bool} vtile - The vertical tiling toggle, which can be true or false
 */
declare function layer_background_vtiled(background_element_id: BackgroundElement,vtile: Bool): Undefined;

/**
 * This function can be used to set the scale along the x-axis of a background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the scale value. The scale value you give is a multiplier that will be used to change the way the background element is displayed, where a value of 0.5 would display the element at half scale, and a value of 2 would display at double scale. Note that negative values are valid, and will "flip" the element around the (0,0) position, so an x scale of -1 would show the image reversed.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Real} xscale - The scale value to use (1 is no scaling)
 */
declare function layer_background_xscale(background_element_id: BackgroundElement,xscale: Real): Undefined;

/**
 * This function can be used to set the scale along the y-axis of a background element. You give the background element ID (which you get when you create a background element using layer_background_create() or when you use the function layer_background_get_id()), and then set the scale value. The scale value you give is a multiplier that will be used to change the way the background element is displayed, where a value of 0.5 would display the element at half scale, and a value of 2 would display at double scale. Note that negative values are valid, and will "flip" the element around the (0,0) position, so an x scale of -1 would show the image reversed.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - The unique ID value of the background element to change
 * @param {Real} speed - The speed multiplier/value to use for the element
 */
declare function layer_background_yscale(background_element_id: BackgroundElement,speed: Real): Undefined;

/**
 * This function can be used to move a given instance from the layer it is currently on to another layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the instance ID of the instance to move between layers. For example, say your player is on a layer that is at a lower depth than another layer and you want it to appear behind the layers between the two. You can use this function to switch the player from the foreground layer to the background layer and make it appear behind the other layers being drawn.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the instance layer to target (or the layer name as a string)
 * @param {Id.Instance} instance_id - The unique instance ID value of the instance to move over to the target layer
 */
declare function layer_add_instance(layer_id: Any,instance_id: Instance): Undefined;

/**
 * This function is used to create a new layer within the current room. You supply the depth that the new layer is to occupy and the function returns the unique Layer ID value that can then be used to access the layer in further functions. You can also supply an optional "name" argument, which will enable you to give the layer a specific name (as a string), and instead of using the layer ID to access the layer, you can use this name string instead, although it should be noted that using name strings will have a greater impact on performance than using just the ID value. If you do not specify the name of the layer, then the created layer will be assigned a name with the format "_layer_XXX", where "XXX" is a hex value used to give the layer a unique name.
 * @returns {Id.Layer}
 * @param {Real} depth - The depth that the layer has to be created at.
 * @param {String} name - The name to give the layer (a string - optional)
 */
declare function layer_create(depth: Real,name: String): Layer;

/**
 * This function can be used to change the depth of the given layer, changing the order in which its contents will be rendered to the screen. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and then give the new depth to set it to (an integer value form -16000 to 16000). The layer depth is defined as being higher when "further away" from the camera and lower when "closer" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the "top" layer (i.e., the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to set the depth of (or the layer name as a string)
 * @param {Real} depth - The new depth for the layer
 */
declare function layer_depth(layer_id: Any,depth: Real): Undefined;

/**
 * This function will destroy the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and this will remove it from the current room. If the layer is one that has been designed in the room editor, then the next time you leave the room and then return, the layer will be recreated again with the original contents, however if the room is persistent, the layer will be removed unless room persistence is switched off again. When you destroy a layer in this way, all it's contents will be removed too, so any reference IDs for backgrounds or tile maps, etc... will no longer be valid and any instances assigned to the layer will be destroyed (performing their Destroy Event at the same time, if they have one, as well as the Clean Up Event).
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to destroy (or the layer name as a string)
 */
declare function layer_destroy(layer_id: Any): Undefined;

/**
 * This function can be used to destroy all the instances assigned to the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact), and then all instances that are on the layer will be removed from the game, triggering their Destroy and Clean Up events.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to set the depth of (or the layer name as a string)
 */
declare function layer_destroy_instances(layer_id: Any): Undefined;

/**
 * You can use this function to move an element from one layer to another. You give the element ID, as returned by the function used to create the element or the room editor or the function layer_get_all_elements(), and then you give the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact).
 * @returns {Undefined}
 * @param {Any} element_id - The unique ID value of the element to move
 * @param {Any} layer_id - The unique ID value of the layer to move the element to (or the layer name as a string)
 */
declare function layer_element_move(element_id: Any,layer_id: Any): Undefined;

/**
 * This function can be used to check if the given layer exists. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return a boolean value of true if it exists or false if it does not.
 * @returns {Bool}
 * @param {Any} layer_name - The name of the layer (a string or ID value)
 */
declare function layer_exists(layer_name: Any): Bool;

/**
 * This function forces all layers to be drawn at the specified z depth. This does not change the order the layers are rendered in and they'll still be drawn in depth order, it simply changes what z value is used. In general you do not need to worry about this, but if you have layers that have a depth outside of the legal range (-16000 to 16000) then they won't be rendered, so you can force the Z depth to a reasonable value - 0 for example - and they will all be rendered fine. Note that this is generally only for use with legacy projects from previous version of GameMaker where you could have draw depths higher or lower than the permitted layer range.
 * @returns {Undefined}
 * @param {Bool} force - Whether to enable (set to true or disable (set to false) Z depth forcing
 * @param {Real} depth - The new Z depth
 */
declare function layer_force_draw_depth(force: Bool,depth: Real): Undefined;

/**
 * This function will return an array populated with the unique ID values of each layer in the room.
 * @returns {Array[Id.Layer]}
 */
declare function layer_get_all(): Array[Layer];

/**
 * You can use this function to get the element IDs of the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return an array of IDs, where each entry in the array is a unique ID for an element on that layer. For example, if the layer is an Asset Layer, the array will be populated with the ID values for each sprite asset that is assigned to the layer. Note that using code to work with layers means that you can assign different element types to the same layer - so you can have sprite assets along with instances, for example - in which case you can then use the function layer_get_element_type() to get the type of element the ID relates to.
 * @returns {Array[Any]}
 * @param {Any} layer_id - The unique ID value of the layer to get the elements from (or the layer name as a string)
 */
declare function layer_get_all_elements(layer_id: Any): Array[Any];

/**
 * You can use this function to get the depth value associated with a given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return that layers depth as a real number. Note that depth is defined as being higher the "further away" from the camera and lower the "closer" to the camera, so if you have three layers with depths -100, 0, 100, the layers will draw in the order 100, 0, -100, so that the "top" layer (ie, the closest to the camera view and so drawn over everything else) will be the layer with the -100 depth.
 * @returns {Real}
 * @param {Any} layer_id - The unique ID value of the layer to get the depth of (or the layer name as a string)
 */
declare function layer_get_depth(layer_id: Any): Real;

/**
 * You can use this function to get the type of a given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return its type, which will be either layer_type_unknown, layer_type_room, layer_type_ui_viewports or layer_type_ui_display
 * @returns {Constant.LayerType}
 * @param {Any} layer_id - The unique ID value of the layer to get the type of (or the layer name as a string)
 */
declare function layer_get_type(layer_id: Any): LayerType;

/**
 * You can use this function to get the Layer ID that the given element is on. You supply the unique element ID value (for example, as returned by the function that created the element or from the room editor) and the function will return the unique ID of the layer that the element is found on. If the element ID given is not a valid one, then the function will return -1.
 * @returns {Id.Layer}
 * @param {Any} element_id - The unique ID value of the element to get the layer of
 */
declare function layer_get_element_layer(element_id: Any): Layer;

/**
 * You can use this function to get the element type for the given element. You supply the unique element ID value (for example, as returned the function that created the element or from the room editor) and the function will return one of the following constants (or -1 if the element does not exist or the ID value is erroneous):
 * @returns {Constant.LayerElementType}
 * @param {Any} element_id - The unique ID value of the element to get the type of
 */
declare function layer_get_element_type(element_id: Any): LayerElementType;

/**
 * This function retrieves the root-level flexpanel node on a UI layer.
 * @returns {Pointer.FlexpanelNode}
 * @param {String} layer_name - The unique name of the UI layer.
 */
declare function layer_get_flexpanel_node(layer_name: String): Pointer.FlexpanelNode;

/**
 * This function can be used to retrieve the Z depth set for rendering layers within the room. See layer_force_draw_depth() for more information.
 * @returns {Real}
 */
declare function layer_is_draw_depth_forced(): Real;

/**
 * You can use this function to retrieve the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the horizontal speed, where a positive value is to the right and a negative value to the left. Default is 0 (unless set in the room editor).
 * @returns {Real}
 * @param {Any} layer_id - The unique ID value of the layer to get the horizontal speed from
 */
declare function layer_get_hspeed(layer_id: Any): Real;

/**
 * This function can be used to get the unique ID value for a given layer. In the IDE, all layers have a name and a type, and to be able to edit or change them through code you must give the layer ID value. This function is used to retrieve this ID by using the name (a string) of the layer (as written in the IDE). If you create a new layer through code using the function layer_create() then that function will return the unique ID value instead (dynamical created layers do not get names). Note that if you give the name of a layer that does not exist in the current room, then you will get an error and the project will crash.
 * @returns {Id.Layer}
 * @param {String} layer_name - The name of the layer (a string)
 */
declare function layer_get_id(layer_name: String): Layer;

/**
 * You can use this function to get the IDs of all layers assigned a specific depth. You give the depth to check and the function will return an array with 1 or more entries depending on whether there are any layers at the given depth or not. If there are no layers at the given depth then the array will have a single entry at the [0] position with a value of -1, but, if there are layers at the depth, then an entry will be made in the array for each layer found - the entry value will be the unique ID value for a layer.
 * @returns {Array[Id.Layer]}
 * @param {Real} depth - The depth to check and retrieve the layer IDs from.
 */
declare function layer_get_id_at_depth(depth: Real): Array[Layer];

/**
 * You can use this function to get the name of the given layer. You supply the unique layer ID value and if the layer is one of the named layers created in the room editor, then the function will return a string with the layer name. If the layer is not one of the room editor ones (ie: it was created using layer_create()) then an empty string will be returned.
 * @returns {String}
 * @param {Id.Layer} layer_id - The unique ID value of the layer to get the name of
 */
declare function layer_get_name(layer_id: Layer): String;

/**
 * You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and this function will return the script function index of the function assigned to run at the beginning of rendering for that layer, or it will return -1 if no function is assigned. You can assign script functions to a layer with layer_script_begin() and layer_script_end().
 * @returns {Function}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 */
declare function layer_get_script_begin(layer_id: Any): Function;

/**
 * This function returns the script function index of the function assigned to run at the end of rendering the given layer, or it will return -1 if no function is assigned. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact). You can assign script functions to a layer with layer_script_begin() and layer_script_end().
 * @returns {Function}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 */
declare function layer_get_script_end(layer_id: Any): Function;

/**
 * This function can be used to check if the given layer has a shader assigned to it. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact), and the function will return either the shader index of the shader assigned, or -1 if no shader is assigned.
 * @returns {Asset.GMShader}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 */
declare function layer_get_shader(layer_id: Any): GMShader;

/**
 * This function will return the current room being targeted by the layer functions. See layer_set_target_room() for more information.
 * @returns {Asset.GMRoom}
 */
declare function layer_get_target_room(): GMRoom;

/**
 * With this function you can check whether a layer is visible or not. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return true if it is visible, and false otherwise.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 */
declare function layer_get_visible(layer_id: Any): Bool;

/**
 * You can use this function to retrieve the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the vertical speed, where a positive value is down and a negative value up. Default is 0 (unless set in the room editor).
 * @returns {Real}
 * @param {Any} layer_id - The unique ID value of the layer to get the vertical speed from
 */
declare function layer_get_vspeed(layer_id: Any): Real;

/**
 * You can use this function to retrieve the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.
 * @returns {Real}
 * @param {Any} layer_id - The unique ID value of the layer to get the x position of
 */
declare function layer_get_x(layer_id: Any): Real;

/**
 * You can use this function to retrieve the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function returns a real number for the x position of the layer, relative to the (0,0) position of the room. Default is 0.
 * @returns {Real}
 * @param {Any} layer_id - The unique ID value of the layer to get the y position of
 */
declare function layer_get_y(layer_id: Any): Real;

/**
 * This function can be used to check if a given instance is currently assigned to the given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the instance ID of the instance to check for. You can also give an object_index (ie: the name of the object in the Asset Browser) and the function will check if any instances of that object are on the given layer. The function will return true if the instance is on the layer and false if it is not.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Id.Instance} instance_id - The unique instance ID or the object index of the instance to check for
 */
declare function layer_has_instance(layer_id: Any,instance_id: Instance): Bool;

/**
 * You can use this function to set the horizontal speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is to the right and a negative value to the left.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to set the horizontal speed of
 * @param {Real} hspd - The horizontal speed (in pixels per game frame) to set
 */
declare function layer_hspeed(layer_id: Any,hspd: Real): Undefined;

/**
 * This function can be used to get the unique instance ID of the given instance element. You give the instance element ID (see the code example below for how to get this), and the function will return a real value that represents the unique instance id for the element. If the element is not an instance, the function will return -1.
 * @returns {Id.Instance}
 * @param {Any} element_id - The unique ID value of the instance element to get the ID of
 */
declare function layer_instance_get_instance(element_id: Any): Instance;

/**
 * This function is used to reset the layer target to the current room. See the function layer_set_target_room() for further information.
 * @returns {Undefined}
 */
declare function layer_reset_target_room(): Undefined;

/**
 * With this function you can assign a script function to a layer and it will be called before the layer is rendered. When adding a function to a layer, in this way it will be run at the start of each of the different draw events so you may want to check in the function assigned which event is currently rendering and adapt the code to suit. This can be done by checking the event_type and/or the event_number (see the extended example below). Note that the function is not meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the Room Creation Code or in the Create Event / Room Start Event of an instance.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Any} script - The script function index to assign to the layer (or -1)
 */
declare function layer_script_begin(layer_id: Any,script: Any): Undefined;

/**
 * With this function you can assign a script function to a layer and it will be called after the layer is rendered. When adding a function to a layer in this way, it will be run at the end of each of the different draw events so you may want to check in the function assigned which event is currently finished rendering and adapt the code to suit. This can be done by checking the event_type and/or the event_number (see the extended example below). Note that the function is not meant to be called in any draw events or step events, but rather only needs to be called at the start of the room in the Room Creation Code or in the Create Event / Room Start Event of an instance.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Any} script - The script function index to assign to the layer (or -1)
 */
declare function layer_script_end(layer_id: Any,script: Any): Undefined;

/**
 * When you call this function you are telling GameMaker that all further layer functions should be applied to the given room. In this way you can procedurally change or generate layers and layer contents in a room that is not the current room. When you are finished adding layers or layer elements to a room, call the function layer_reset_target_room() to reset the room target (or call this function again with a room argument of -1). Note that this function can only be used on rooms other than the current room, and is designed so that you can add/remove layers and layer elements to rooms other than the room that is currently running.
 * @returns {Undefined}
 * @param {Asset.GMRoom} room - The room to target for all further layer functions
 */
declare function layer_set_target_room(room: GMRoom): Undefined;

/**
 * With this function you can toggle the visibility of a layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) as well as the toggle value for the layer where visible is true and invisible is false.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Bool} visible - Whether the layer should be visible (true) or not (false)
 */
declare function layer_set_visible(layer_id: Any,visible: Bool): Undefined;

/**
 * With this function you can assign a shader resource to any given layer and the layer will then be rendered using that shader. You supply either the unique ID value of the layer or the name of the layer (as a string - this will have a performance impact) , along with the ID of the shader to use. The shader must have been created previously in the Asset Browser and the shader index (the name of the shader resource) is then passed to this function. If the layer assigned has instances added to it, then the shader will be applied to all the draw events that the instance uses - for example if the instance has a Draw GUI Begin event, then the shader will be applied automatically to it. The shader will also affect any other graphic elements drawn on that layer, like sprite assets or tile maps.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Asset.GMShader} shader - The shader index to assign to the layer
 */
declare function layer_shader(layer_id: Any,shader: GMShader): Undefined;

/**
 * You can use this function to set the vertical speed (in pixels per game frame) of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the speed value to set, where a positive value is downwards and a negative value upwards.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to set the vertical speed of
 * @param {Real} vspd - The vertical speed (in pixels per game frame) to set
 */
declare function layer_vspeed(layer_id: Any,vspd: Real): Undefined;

/**
 * You can use this function to set the x position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the horizontal axis of the room.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to set the x position of
 * @param {Real} x - The x position in the room to set the layer to
 */
declare function layer_x(layer_id: Any,x: Real): Undefined;

/**
 * You can use this function to set the y position of the layer within the currently scoped room. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will move the layer the given number of pixels along the vertical axis of the room.
 * @returns {Undefined}
 * @param {Any} layer_id - The unique ID value of the layer to set the y position of
 * @param {Real} y - The y position in the room to set the layer to
 */
declare function layer_y(layer_id: Any,y: Real): Undefined;

/**
 * With this function you can set the angle of rotation for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new angle to set and the sequence will be rotated about its origin to the new position. Angles in GameMaker are calculated with 0║ to the right, and go anti-clockwise - so 90║ is up, 180║ is left and 270║ is down - and the default angle for a sequence would be 0║.
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} angle - The new angle to rotate the sequence element to
 */
declare function layer_sequence_angle(sequence_element_id: SequenceElement,angle: Real): Undefined;

/**
 * With this function you can create an instance of a sequence asset on the given layer. You supply the layer ID which can be a string of the layer name - as defined in the room editor - or the unique layer ID - as returned by the function layer_get_id(), as well as the X and Y position in the room to create the sequence at, and finally the ID of the sequence to create. The sequence ID is the name constant that you defined in the Asset Browser for the sequence. The function will return the unique ID of the sequence element, which can then be used in all further layer functions for sequences, or it can be used to retrieve the sequence instance struct using the function layer_sequence_get_instance().
 * @returns {Id.SequenceElement}
 * @param {Any} layer_id - The unique ID value of the instance layer to target
 * @param {Real} x - The x position in the room to create the sequence at
 * @param {Real} y - The y position in the room to create the sequence at
 * @param {Asset.GMSequence} sequence_id - The sequence ID to create, as defined in the Asset Browser
 */
declare function layer_sequence_create(layer_id: Any,x: Real,y: Real,sequence_id: GMSequence): SequenceElement;

/**
 * With this function you can destroy (remove from the room) a sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and the sequence will be destroyed.
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_destroy(sequence_element_id: SequenceElement): Undefined;

/**
 * With this function you can check to see if a sequence element exists on the given layer. You supply the layer ID which can be a string of the layer name - as defined in the room editor - or the unique layer ID - as returned by the function layer_get_id(), as well the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return true if the given element exists or false otherwise.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID or name of the layer to check
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_exists(layer_id: Any,sequence_element_id: SequenceElement): Bool;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current angle of the sequence element in the game room. Note that angles are returned in degrees, and 0║ is to the right, 90║ is up, 180║ is to the left and 270║ is down.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_angle(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current playhead direction, which will be one of the constants listed below.
 * @returns {Constant.SequenceDirection}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_headdir(sequence_element_id: SequenceElement): SequenceDirection;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current playhead position (the current frame the playhead is on).
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_headpos(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the sequence instance struct. You can find out more about the format of the sequence instance struct on this page.
 * @returns {Struct.SequenceInstance}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_instance(sequence_element_id: SequenceElement): SequenceInstance;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the length of the sequence. This is the number of frames that the sequence will run for.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_length(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the sequence object struct. This function bypasses the need to first get the sequence instance struct and permits you to access the sequence data directly. You can find out more about the format of the sequence object struct on this page.
 * @returns {Struct.Sequence}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_sequence(sequence_element_id: SequenceElement): Sequence;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current playback speed scale. This is the multiplier value used to slow down or speed up the playback speed. A value of 1 is the default value, and values lower than 1 mean that playback is slowed down and values greater than 1 mean that playback is sped up.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_speedscale(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current X position in the game room for the sequence.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_x(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current scale along the X axis of the sequence element in the game room.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_xscale(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current Y position in the game room for the sequence.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_y(sequence_element_id: SequenceElement): Real;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will return the current scale along the Y axis of the sequence element in the game room.
 * @returns {Real}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_get_yscale(sequence_element_id: SequenceElement): Real;

/**
 * With this function you can set the direction for the given sequence playhead. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions, and then give the playhead direction which should be one of the following constants:
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Constant.SequenceDirection} direction - The playhead direction, a constant, listed above
 */
declare function layer_sequence_headdir(sequence_element_id: SequenceElement,direction: SequenceDirection): Undefined;

/**
 * With this function you can set the playhead position of a sequence element to a specific frame. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new position to set. Note that the position is in frames and if you set a value greater than the total number of frames (or less than 0) then the actual final playhead position will depend on the type of sequence playback that has been selected, following these rules:
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} position - The position within the sequence (in frames) to set the playhead position to (can be a decimal value)
 */
declare function layer_sequence_headpos(sequence_element_id: SequenceElement,position: Real): Undefined;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will check if the sequence is finished playing or not, returning true if it is, and false if it is not. Note that this is only applicable when the sequence is not set to loop or ping-pong in the playback mode.
 * @returns {Bool}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_is_finished(sequence_element_id: SequenceElement): Bool;

/**
 * With this function you supply the sequence element ID - as returned by layer_sequence_create() or by one of the layer element functions - and it will check if the sequence is currently paused or not, returning true if it is paused, and false if it is not.
 * @returns {Bool}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_is_paused(sequence_element_id: SequenceElement): Bool;

/**
 * With this function you can pause the playback of the given sequence. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and the function will pause the sequence until you begin playback again using the function layer_sequence_play().
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_pause(sequence_element_id: SequenceElement): Undefined;

/**
 * With this function you can start the playback of the given sequence. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and the function will play the sequence, which you can then pause if required using the function layer_sequence_pause().
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 */
declare function layer_sequence_play(sequence_element_id: SequenceElement): Undefined;

/**
 * With this function you can change the playback speed of the given sequence. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions and then a speed scale value. This value is a multiplier, where 1 is the default playback speed and values less than 1 will slow the playback and values larger than 1 will speed it up, eg: a value of 0.5 would be half playback speed, while a value of 2 would be double playback speed.
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} speedscale - The speed scale to use (a multiplier), default is 1
 */
declare function layer_sequence_speedscale(sequence_element_id: SequenceElement,speedscale: Real): Undefined;

/**
 * With this function you can set the position along the X (horizontal) axis of the room for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the X position to set and the sequence will be moved to the new position.
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} pos_x - The X position to move the sequence element to
 */
declare function layer_sequence_x(sequence_element_id: SequenceElement,pos_x: Real): Undefined;

/**
 * With this function you can set the X scale for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new scale to set on the X axis and the sequence will be scaled by this amount. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sequence), larger values will scale up and negative values will mirror the sequence about its origin and scale it unless the value used is exactly -1 (in which case the sequence is just mirrored about its origin with no scaling).
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} xscale - The new X axis scale value to apply to the sequence element
 */
declare function layer_sequence_xscale(sequence_element_id: SequenceElement,xscale: Real): Undefined;

/**
 * With this function you can set the position along the Y (vertical) axis of the room for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the Y position to set and the sequence will be moved to the new position.
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} pos_y - The Y position to move the sequence element to
 */
declare function layer_sequence_y(sequence_element_id: SequenceElement,pos_y: Real): Undefined;

/**
 * With this function you can set the Y scale for the given sequence element. You supply the sequence element ID as returned by layer_sequence_create() or by one of the layer element functions along with the new scale to set on the Y axis and the sequence will be scaled by this amount. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sequence), larger values will scale up and negative values will flip the sequence about its origin and scale it unless the value used is exactly -1 (in which case the sequence is just flipped about its origin with no scaling).
 * @returns {Undefined}
 * @param {Id.SequenceElement} sequence_element_id - The unique ID value of the sequence element to target
 * @param {Real} yscale - The new Y axis scale value to apply to the sequence element
 */
declare function layer_sequence_yscale(sequence_element_id: SequenceElement,yscale: Real): Undefined;

/**
 * This function controls the alpha (transparency) of the sprite on the asset layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the sprite element being 1. Note that if the layer the sprite element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible again.
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} alpha - The alpha for sprite sprite, from 0 to 1 (default is 1)
 */
declare function layer_sprite_alpha(sprite_element_id: SpriteElement,alpha: Real): Undefined;

/**
 * Using this function you can change the angle for the given sprite element on a layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the angle value, from 0 to 359 anti-clockwise, where 0 is to the right, 90 is to the top, 180 is to the left and 270 is to the bottom. If you set a value greater than 360 this will be looped to bring it within the 0 - 359 range.
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} angle - The angle of the sprite (default is 0)
 */
declare function layer_sprite_angle(sprite_element_id: SpriteElement,angle: Real): Undefined;

/**
 * This function controls the blending (or "tinting") of the sprite sprite and the default value is -1 (which represents the constant c_white, which can also be used). Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the blending colour to use. Below you can see an example of a sprite that has been blended with different colours:
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Constant.Color} blend - The colour to blend with the sprite sprite (default is c_white)
 */
declare function layer_sprite_blend(sprite_element_id: SpriteElement,blend: Color): Undefined;

/**
 * Using this function you can change the sprite resource assigned to a given sprite element on a layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then supply a sprite index element asset will be changed. Note that if the sprite has sub-images then it will animate too (this can be controlled using the layer_sprite_index() and layer_sprite_speed() functions). Note that you can assign a value of -1 as the new sprite index and no sprite will be shown, although the element will still exist and can still be changed again later.
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Asset.GMSprite} sprite_index - The new sprite index to use
 */
declare function layer_sprite_change(sprite_element_id: SpriteElement,sprite_index: GMSprite): Undefined;

/**
 * With this function you can assign a sprite resource to a layer to be used in your project. You supply the layer ID (which you get when you create the layer using layer_create() or when you use the layer name along with layer_get_id()), a position within the room, and a sprite index (which would be the name of the sprite as shown in the Asset Browser), and it will be added to the layer. The function returns the unique ID value for the element, which can then be used in further layer functions for sprites.
 * @returns {Id.SpriteElement}
 * @param {Any} layer_id - The unique ID value of the layer to target
 * @param {Real} x - The x position to use
 * @param {Real} y - The y position to use
 * @param {Asset.GMSprite} sprite - The sprite index to be used
 */
declare function layer_sprite_create(layer_id: Any,x: Real,y: Real,sprite: GMSprite): SpriteElement;

/**
 * This function will destroy the given sprite element. You supply the sprite ID (which you get when you create the sprite using layer_sprite_create() or when you use the layer ID along with layer_get_sprite_id()) and this will remove it. Note that this does not remove the layer, only the sprite from it, and if the sprite is one that has been added in the room editor, then the next time you leave the room and then return, the sprite will be recreated again. However if the room is persistent, the sprite will be removed unless room persistence is switched off again.
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite to be destroyed
 */
declare function layer_sprite_destroy(sprite_element_id: SpriteElement): Undefined;

/**
 * You can use this function to check and see if a sprite element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()) and the function will return either true if the element exists, or false if it does not.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to check
 */
declare function layer_sprite_exists(layer_id: Any,sprite_element_id: SpriteElement): Bool;

/**
 * This function can be used to get the alpha value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_alpha(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the current angle for the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value for the angle. This value will be between 0 and 360, where 0 represents right, 90 up, 180 left and 270 down.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_angle(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the blend colour of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value that represents the colour assigned.
 * @returns {Constant.Color}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_blend(sprite_element_id: SpriteElement): Color;

/**
 * This function can be used to retrieve the unique ID value of a sprite element on a layer. You supply the layer ID (which you get when you create the layer using layer_create() or when you use the layer name along with layer_get_id()) and the name of the sprite element as defined in the Room Editor. The function will return the ID value associated with that sprite element on the layer.
 * @returns {Id.SpriteElement}
 * @param {Any} layer_id - The unique ID value of the layer to target
 * @param {String} sprite_element_name - The unique name of the sprite element on the layer as defined in the Room Editor
 */
declare function layer_sprite_get_id(layer_id: Any,sprite_element_name: String): SpriteElement;

/**
 * This function can be used to get the current image index value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value that represents the image index being shown for the sprite. The function will return -1 if either the sprite element doesn't exist or the element doesn't have a valid sprite assigned to it.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_index(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the current speed multiplier value of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value that represents the speed multiplier being used to animate the sprite. Default value is 1.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_speed(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the current sprite index of the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return a real value that represents the sprite index being shown. If the element has no sprite assigned, the function will return -1.
 * @returns {Asset.GMSprite}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_sprite(sprite_element_id: SpriteElement): GMSprite;

/**
 * This function can be used to get the x position of the sprite element in the room. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return the x position value.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_x(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the current scale multiplier along the x axis for the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value for the x scale, where 1 is no scaling.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_xscale(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the y position of the sprite element in the room. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return the y position value.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_y(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to get the current scale multiplier along the y axis for the sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and the function will return real value for the y scale, where 1 is no scaling.
 * @returns {Real}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to get the information from
 */
declare function layer_sprite_get_yscale(sprite_element_id: SpriteElement): Real;

/**
 * This function can be used to set the image index of a sprite asset which has multiple sub-images on a layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the image index to use. If you set a value outside of the range of sub-images, then the image index will loop around.
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to set
 * @param {Real} index - The image index to use for the sprite
 */
declare function layer_sprite_index(sprite_element_id: SpriteElement,index: Real): Undefined;

/**
 * This function can be used to set the speed of an animating image that has been assigned to a sprite element. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the animation speed. If the IDE has set the animation speed for the sprite used to be calculated as Frames Per Game Frame, then the speed value given is a multiplier, with 1 being the default value, and setting it to 0.5 will half the animation speed, while setting it to 1.5 will double it. However, if the IDE has set the animation speed for the sprite used to be calculated as Frames Per Second, then the speed value given is a literal frames per second value, so setting this to 5, for example, will set the animation to loop 5 frames every second that the game runs. If the sprite used has no sub-images, this function will have no effect.
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} speed - The speed multiplier/value to use for the element
 */
declare function layer_sprite_speed(sprite_element_id: SpriteElement,speed: Real): Undefined;

/**
 * This function controls the position along the x-axis of the room of the asset sprite element on the layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the x value to use (based on the room coordinates).
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} x - The x position for the sprite
 */
declare function layer_sprite_x(sprite_element_id: SpriteElement,x: Real): Undefined;

/**
 * Using this function you can change whether the given sprite element on a layer should be scaled along the x axis or not. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite used), larger values will scale up, and negative values will flip the sprite and scale it unless the value used is exactly -1 (in which case the sprite used is just flipped right-to-left about its origin position with no scaling).
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} xscale - The xscale value (default is 1)
 */
declare function layer_sprite_xscale(sprite_element_id: SpriteElement,xscale: Real): Undefined;

/**
 * This function controls the position along the y-axis of the room of the asset sprite element on the layer. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the y value to use (based on the room coordinates).
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} y - The y position for the sprite
 */
declare function layer_sprite_y(sprite_element_id: SpriteElement,y: Real): Undefined;

/**
 * Using this function you can change whether the given sprite element on a layer should be scaled along the y axis or not. You give the sprite element ID (which you get when you create a sprite element using layer_sprite_create() or when you use the function layer_sprite_get_id()), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the sprite used), larger values will scale up, and negative values will mirror the sprite and scale it unless the value used is exactly -1 (in which case the sprite used is just mirrored top-to-bottom about its (0, 0) position with no scaling).
 * @returns {Undefined}
 * @param {Id.SpriteElement} sprite_element_id - The unique ID value of the sprite element to change
 * @param {Real} yscale - The yscale value (default is 1)
 */
declare function layer_sprite_yscale(sprite_element_id: SpriteElement,yscale: Real): Undefined;

/**
 * This function can be used to retrieve the unique ID value of a text element on a layer. You supply the layer ID (which you get when you create the layer using layer_create() or when you use the layer name along with layer_get_id()) and the name of the text element as defined in the Room Editor. The function will return the ID value associated with that text element on the layer.
 * @returns {Id.TextElement}
 * @param {Any} layer_id - The unique ID value of the layer to target
 * @param {String} text_element_name - The unique name of the text element on the layer as defined in the Room Editor
 */
declare function layer_text_get_id(layer_id: Any,text_element_name: String): TextElement;

/**
 * You can use this function to check and see if a text element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()) and the function will return either true if the element exists, or false if it does not.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to check
 */
declare function layer_text_exists(layer_id: Any,text_element_id: TextElement): Bool;

/**
 * With this function you can create a new text element on the specified layer. You supply the layer ID (which you get when you create the layer using layer_create() or when you use the layer name along with layer_get_id()), a position within the room, a font reference (which would be the name of the font as shown in the Asset Browser), and the text to be displayed and it will be added to the layer. The function returns the unique ID value for the element, which can then be used in further layer functions for text elements.
 * @returns {Id.TextElement}
 * @param {Any} layer_id - The unique ID value of the layer to target
 * @param {Real} x - The x position to use
 * @param {Real} y - The y position to use
 * @param {Asset.GMFont} font - The font to be used
 * @param {String} text - The text string to be displayed
 */
declare function layer_text_create(layer_id: Any,x: Real,y: Real,font: GMFont,text: String): TextElement;

/**
 * This function will destroy the given text element. You supply the text ID (which you get when you create the text using layer_text_create() or when you use the layer ID along with layer_get_text_id()) and this will remove it. Note that this does not remove the layer, only the text element from it, and if the text element is one that has been added in the room editor, then the next time you leave the room and then return, the text element will be recreated again. However if the room is persistent, the text element will be removed unless room persistence is switched off again.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to be destroyed
 */
declare function layer_text_destroy(text_element_id: TextElement): Undefined;

/**
 * This function controls the position along the x-axis of the room of the text element on the layer. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the x value to use (based on the room coordinates).
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} x - The x position for the text element
 */
declare function layer_text_x(text_element_id: TextElement,x: Real): Undefined;

/**
 * This function controls the position along the y-axis of the room of the text element on the layer. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the y value to use (based on the room coordinates).
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} y - The y position for the text element
 */
declare function layer_text_y(text_element_id: TextElement,y: Real): Undefined;

/**
 * Using this function you can change the angle for the given text element on a layer. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the angle value, from 0 to 359 anti-clockwise, where 0 is to the right, 90 is to the top, 180 is to the left and 270 is to the bottom. If you set a value greater than 360 this will be looped to bring it within the 0 - 359 range.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} angle - The angle of the text element (default is 0)
 */
declare function layer_text_angle(text_element_id: TextElement,angle: Real): Undefined;

/**
 * Using this function you can change whether the given text element on a layer should be scaled along the x axis or not. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the text element), larger values will scale up, and negative values will flip the text element and scale it unless the value used is exactly -1 (in which case the text element used is just flipped right-to-left about its origin position with no scaling).
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} xscale - The xscale value (default is 1)
 */
declare function layer_text_xscale(text_element_id: TextElement,xscale: Real): Undefined;

/**
 * Using this function you can change whether the given text element on a layer should be scaled along the y axis or not. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the scale value. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the text element), larger values will scale up, and negative values will flip the text element and scale it unless the value used is exactly -1 (in which case the text element used is just mirrored top-to-bottom about its origin position with no scaling).
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} yscale - The yscale value (default is 1)
 */
declare function layer_text_yscale(text_element_id: TextElement,yscale: Real): Undefined;

/**
 * This function controls the colour (or "tinting") of the text element and the default value is -1 (which represents the constant c_white, which can also be used). Any other value (including internal colour constants like c_red, or c_aqua) will draw the text element with the specified colour. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the colour to use.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Constant.Color} blend - The colour to draw the text element (default is c_white)
 */
declare function layer_text_blend(text_element_id: TextElement,blend: Color): Undefined;

/**
 * This function controls the alpha (transparency) of the text element on the asset layer. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the alpha value to use. Alpha can be between 0 (fully transparent) and 1 (fully opaque) with the default alpha value for the text element being 1. Note that if the layer the text element has been assigned to is not visible - or the element itself has been made invisible - you will not see any difference with this function until the layer or element has been made visible again.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} alpha - The alpha for text element, from 0 to 1 (default is 1)
 */
declare function layer_text_alpha(text_element_id: TextElement,alpha: Real): Undefined;

/**
 * Using this function you can change the font resource assigned to a given text element on a layer. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then supply a font resource reference which the text element will be changed to use.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Asset.GMFont} font - The new font to use
 */
declare function layer_text_font(text_element_id: TextElement,font: GMFont): Undefined;

/**
 * Using this function you can change the x position of the origin of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the origin value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} xorigin - The xorigin value (default is 0)
 */
declare function layer_text_xorigin(text_element_id: TextElement,xorigin: Real): Undefined;

/**
 * Using this function you can change the y position of the origin of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the origin value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} yorigin - The yorigin value (default is 0)
 */
declare function layer_text_yorigin(text_element_id: TextElement,yorigin: Real): Undefined;

/**
 * Using this function you can change the text string assigned to a given text element on a layer. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then supply a text string which the text element will be changed to use.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {String} text - The new text string to be displayed
 */
declare function layer_text_text(text_element_id: TextElement,text: String): Undefined;

/**
 * Using this function you can change the horizontal alignment of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the alignment value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Constant.TextAlign} alignment - The alignment value (default is 0)
 */
declare function layer_text_halign(text_element_id: TextElement,alignment: TextAlign): Undefined;

/**
 * Using this function you can change the vertical alignment of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the alignment value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Constant.TextAlign} alignment - The alignment value (default is 0)
 */
declare function layer_text_valign(text_element_id: TextElement,alignment: TextAlign): Undefined;

/**
 * Using this function you can change the character spacing of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the spacing value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} charspacing - The character spacing value (default is 0)
 */
declare function layer_text_charspacing(text_element_id: TextElement,charspacing: Real): Undefined;

/**
 * Using this function you can change the line spacing of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the spacing value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} linespacing - The line spacing value (default is 0)
 */
declare function layer_text_linespacing(text_element_id: TextElement,linespacing: Real): Undefined;

/**
 * Using this function you can change the width of the frame of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the frame width value. This only affects rendering when wrapping is enabled.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} width - The frame width value (default is -1)
 */
declare function layer_text_framew(text_element_id: TextElement,width: Real): Undefined;

/**
 * Using this function you can change the height of the frame of the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set the frame width value. The affects vertical alignment of the text.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Real} height - The frame height value (default is -1)
 */
declare function layer_text_frameh(text_element_id: TextElement,height: Real): Undefined;

/**
 * Using this function you can change whether wrapping is enabled for the given text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and then set true or false for the wrapping value.
 * @returns {Undefined}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to change
 * @param {Bool} wrap - True if wrapping is enabled or false if disabled (default is false)
 */
declare function layer_text_wrap(text_element_id: TextElement,wrap: Bool): Undefined;

/**
 * This function can be used to get the x position of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the x position value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_x(text_element_id: TextElement): Real;

/**
 * This function can be used to get the y position of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the y position value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_y(text_element_id: TextElement): Real;

/**
 * This function can be used to get the x scale of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the x scale value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_xscale(text_element_id: TextElement): Real;

/**
 * This function can be used to get the y scale of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the y scale value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_yscale(text_element_id: TextElement): Real;

/**
 * This function can be used to get the rotation angle of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the rotation angle value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_angle(text_element_id: TextElement): Real;

/**
 * This function can be used to get the blend colour of the text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return real value that represents the colour assigned.
 * @returns {Constant.Color}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_blend(text_element_id: TextElement): Color;

/**
 * This function can be used to get the alpha value of the text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return a value between 0 (fully transparent) and 1 (fully opaque).
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_alpha(text_element_id: TextElement): Real;

/**
 * This function can be used to get the font resource reference of the text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the font resource referenced assigned to the element.
 * @returns {Asset.GMFont}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_font(text_element_id: TextElement): GMFont;

/**
 * This function can be used to get the x origin of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the x origin value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_xorigin(text_element_id: TextElement): Real;

/**
 * This function can be used to get the y origin of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the y origin value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_yorigin(text_element_id: TextElement): Real;

/**
 * This function can be used to get the text string of the text element. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the text string displayed by the element.
 * @returns {String}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_text(text_element_id: TextElement): String;

/**
 * This function can be used to get the horizontal alignment of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the horizontal alignment value.
 * @returns {Constant.TextAlign}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_halign(text_element_id: TextElement): TextAlign;

/**
 * This function can be used to get the vertical alignment of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the vertical alignment value.
 * @returns {Constant.TextAlign}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_valign(text_element_id: TextElement): TextAlign;

/**
 * This function can be used to get the character spacing of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the character spacing value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_charspacing(text_element_id: TextElement): Real;

/**
 * This function can be used to get the line spacing of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the line spacing value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_linespacing(text_element_id: TextElement): Real;

/**
 * This function can be used to get the width of the frame of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the frame width value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_framew(text_element_id: TextElement): Real;

/**
 * This function can be used to get the height of the frame of the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the frame height value.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_frameh(text_element_id: TextElement): Real;

/**
 * This function can be used to get whether wrapping is enabled for the text element in the room. You give the text element ID (which you get when you create a text element using layer_text_create() or when you use the function layer_text_get_id()), and the function will return the wrapping status.
 * @returns {Real}
 * @param {Id.TextElement} text_element_id - The unique ID value of the text element to get the information from
 */
declare function layer_text_get_wrap(text_element_id: TextElement): Real;

/**
 * With this function you can assign a tile-set resource to a layer to be used as a tile map in your project. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and then an initial (x, y) position to add the tile map to the room, the tile set resource to use, and then the width and height of the tile map in cells (ie: a width of 20 and a height of 10 will create a tile map with 200 cells that is 20 cells wide and 10 cells tall), with the size of the cells themselves being defined by the tile set chosen. It is worth noting that you cannot place tiles at negative positions within the tile map, so all tiles must be placed within the cell spaces 0 to width - 1, 0 to height - 1.
 * @returns {Id.TileMapElement}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Real} x - The x position of the tile map in the room
 * @param {Real} y - The y position of the tile map in the room
 * @param {Asset.GMTileSet} tile set - The tile set index to be used
 * @param {Real} width - The width tile map (in cells)
 * @param {Real} height - The height of the tile map (in cells)
 */
declare function layer_tilemap_create(layer_id: Any,x: Real,y: Real,tile set: GMTileSet,width: Real,height: Real): TileMapElement;

/**
 * This function will destroy the given tile map element. You supply the tile map ID (which you get when you create the tile map using layer_tilemap_create() or when you use the layer ID along with layer_get_tilemap_id()) and this will remove it. Note that this does not remove the layer, only the tile map from it, and if the tile map is one that has been added in the room editor, then the next time you leave the room and then return, the tile map will be recreated again. However if the room is persistent, the tile map will be removed unless room persistence is switched off again.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map to be destroyed
 */
declare function layer_tilemap_destroy(tilemap_element_id: TileMapElement): Undefined;

/**
 * You can use this function to check and see if a tile map element exists on any given layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()) and the function will return either true if the element exists, or false if it does not.
 * @returns {Bool}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to check
 */
declare function layer_tilemap_exists(layer_id: Any,tilemap_element_id: TileMapElement): Bool;

/**
 * This function can be used to retrieve the unique ID value of the tile map element on a layer. You supply the layer ID (which you get when you create the layer using layer_create()) or the layer name (as a string - this will have a performance impact) and the function will return the ID value associated with the tile map element on the layer. Note that this function is specifically designed for use with tile maps that have been added in the IDE, as if you add a tile map to a layer through code using the function layer_tilemap_create(), then it will return the unique ID for the tile map element added. If the given tilemap ID is incorrect or the tilemap doesn't exist, the function will return -1.
 * @returns {Id.TileMapElement}
 * @param {Any} layer_id - The unique ID value of the layer to target (or the layer name as a string)
 */
declare function layer_tilemap_get_id(layer_id: Any): TileMapElement;

/**
 * Using this function you can clear/set all the tiles on a given tile-map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then supply the tile data that you wish to clear the layer with. A default value of 0 will clear all the tiles from the layer (essentially making all tiles "empty"), while you can use the dedicated tile_* functions to create your own tile data to clear the tile map with.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to change
 * @param {Constant.TileMask} tiledata - The tile data to use to clear the layer
 */
declare function tilemap_clear(tilemap_element_id: TileMapElement,tiledata: TileMask): Undefined;

/**
 * Using this function you can retrieve the tile data from a cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), as well as the cell x and y position and the function will return the tile data "blob". This data is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see tilemap_set_mask() for details), and the resulting data value can then be used in the tile_* functions to change a tiles properties. Note that we are using x/y cell positions based on the size of the tile map grid and not as a position in the room, so "cell_x" is a value from 0 to tile map width, and "cell_y" is a value from 0 to tile map height. If you need to get the data for a tile at a specific room position then you need to use the function tilemap_get_at_pixel().
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the tile-data of
 * @param {Real} x_cell - The cell along the x-axis to get the tile data from
 * @param {Real} y_cell - The cell along the y-axis to get the tile data from
 */
declare function tilemap_get(tilemap_element_id: TileMapElement,x_cell: Real,y_cell: Real): Real;

/**
 * Using this function you can retrieve the tile data from a position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()) as well as the x and y position in the room to get the tile data from and the function will return the tile data "blob". This data is essentially a bit mask that contains the tile index, the flip/rotate/mirror booleans and any mask data that has been applied (see tilemap_set_mask() for details), and the resulting data value can then be used in the tile_* functions to change a tiles properties. If you need to get the tile data from a specific tile cell you should be using the function tilemap_get() instead.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the tile-data of
 * @param {Real} x - The position along the x-axis to get the tile data from (in room pixels)
 * @param {Real} y - The position along the y-axis to get the tile data from (in room pixels)
 */
declare function tilemap_get_at_pixel(tilemap_element_id: TileMapElement,x: Real,y: Real): Real;

/**
 * Using this function you can retrieve the x-axis position of an individual tile map cell by giving the relative x-axis position within the room. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), as well as the x and y position within the room and the function will return the x position of the cell within the tile map for that point. Note that if the value is outside of the tile map area, and no cell is available, it will return -1.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the cell x position of
 * @param {Real} x - The x position within the room to use for getting the cell
 * @param {Real} y - The y position within the room to use for getting the cell
 */
declare function tilemap_get_cell_x_at_pixel(tilemap_element_id: TileMapElement,x: Real,y: Real): Real;

/**
 * Using this function you can retrieve the y-axis position of an individual tile map cell by giving the relative y-axis position within the room. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), as well as the x and y position within the room and the function will return the y position of the cell within the tile map for that point. Note that if the value is outside of the tile map area, and no cell is available, it will return -1.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the cell y position of
 * @param {Real} x - The x position within the room to use for getting the cell
 * @param {Real} y - The y position within the room to use for getting the cell
 */
declare function tilemap_get_cell_y_at_pixel(tilemap_element_id: TileMapElement,x: Real,y: Real): Real;

/**
 * Since tiles can be animated, it can sometimes be useful to know which frame is currently being drawn and react accordingly, so with this function you can retrieve the current frame index for a given tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the frame index.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the frame index of
 */
declare function tilemap_get_frame(tilemap_element_id: TileMapElement): Real;

/**
 * This function can be used to retrieve the bit mask value for all tile maps, returning the current mask value or -1 if there is an error or 0 if no mask is specified. For further information on global tile map bit masks, see the function tilemap_set_global_mask().
 * @returns {Real}
 */
declare function tilemap_get_global_mask(): Real;

/**
 * Using this function you can retrieve the height (in cells) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the height (number of cells wide).
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the height of
 */
declare function tilemap_get_height(tilemap_element_id: TileMapElement): Real;

/**
 * This function can be used to retrieve the bit mask value for the given tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the current mask value or -1 if there is an error or 0 if no mask is specified. For further information on tile map bit masks, see the function tilemap_set_mask().
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the mask of
 */
declare function tilemap_get_mask(tilemap_element_id: TileMapElement): Real;

/**
 * Using this function you can retrieve the index value of the tile set resource assigned to a given tile map element on a layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the tile set index value.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the tile set from
 */
declare function tilemap_get_tileset(tilemap_element_id: TileMapElement): Real;

/**
 * Using this function you can retrieve the height (in pixels) of each tile cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the tile set cell height.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the tile cell height of
 */
declare function tilemap_get_tile_height(tilemap_element_id: TileMapElement): Real;

/**
 * Using this function you can retrieve the width (in pixels) of each tile cell of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the tile set cell width.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the tile cell width of
 */
declare function tilemap_get_tile_width(tilemap_element_id: TileMapElement): Real;

/**
 * Using this function you can retrieve the width (in cells) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the width (number of cells wide).
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the width of
 */
declare function tilemap_get_width(tilemap_element_id: TileMapElement): Real;

/**
 * Using this function you can retrieve the x position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the x-axis position.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the x position of
 */
declare function tilemap_get_x(tilemap_element_id: TileMapElement): Real;

/**
 * Using this function you can retrieve the y position (within the room) of the tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the function will return the y-axis position.
 * @returns {Real}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to get the y position of
 */
declare function tilemap_get_y(tilemap_element_id: TileMapElement): Real;

/**
 * This function can be used to set any cell (grid square) within the tile map element on the layer to a new tile. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the tile data to set as well as the position within the tile map. You can retrieve tile data using the function tilemap_get() and then use the tile_ functions to change it before setting the cell using this function. The function will return true if the tile was successfully set and false if there was an issue and it wasn't set.
 * @returns {Bool}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to change
 * @param {Constant.TileMask} tiledata - The tile data to set
 * @param {Real} xcell - The cell (grid) position to set along the x-axis
 * @param {Real} ycell - The cell (grid) position to set along the y-axis
 */
declare function tilemap_set(tilemap_element_id: TileMapElement,tiledata: TileMask,xcell: Real,ycell: Real): Bool;

/**
 * This function can be used to set a cell within the tile map element on the layer to a new tile using the actual position of the tile to change within the room. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the tile data to set as well as the position within the room. You can retrieve tile data using the function tilemap_get_at_pixel() and then use the tile_ functions to change it before setting it again using this function. The function will return true if the tile was successfully set and false if there was an issue and it wasn't set.
 * @returns {Bool}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to change
 * @param {Constant.TileMask} tiledata - The tile set data to set
 * @param {Real} xcell - The x position (in the room)
 * @param {Real} ycell - The y position (in the room)
 */
declare function tilemap_set_at_pixel(tilemap_element_id: TileMapElement,tiledata: TileMask,xcell: Real,ycell: Real): Bool;

/**
 * This function can be used to set the tile bit mask for a all tile maps in the game. The idea is that if you have, for example, pretty small tile sets of 16 x 16 tiles will have a total of 256 different tiles in each tile set, which only uses up 8 bits of your index in the tile data "blob" (from an available 19 bits of data). These bits can be "masked" and then the rest of the tile data can be used to store additional values.
 * @returns {Undefined}
 * @param {Constant.TileMask} mask - The mask value to use
 */
declare function tilemap_set_global_mask(mask: TileMask): Undefined;

/**
 * This function can be used to resize a tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the new height of the tile map in tile cells.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to set the height of
 * @param {Real} height - The height value (in "cells")
 */
declare function tilemap_set_height(tilemap_element_id: TileMapElement,height: Real): Undefined;

/**
 * This function can be used to set the tile bit mask for a single tile map. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then the mask value. The idea is that if you have, for example, a pretty small tile set of 16 x 16 tiles then you have a total of 256 different tiles in your tile set, which only uses up 8 bits of your index in the tile data "blob" (from an available 19 bits of data). These bits can be "masked" and then the rest of the tile data can be used to store additional values.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to set the mask of
 * @param {Constant.TileMask} mask - The mask value
 */
declare function tilemap_set_mask(tilemap_element_id: TileMapElement,mask: TileMask): Undefined;

/**
 * This function can be used to resize a tile map element. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and the new width of the tile map in tile cells.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to set the width of
 * @param {Real} width - The width value (in "cells")
 */
declare function tilemap_set_width(tilemap_element_id: TileMapElement,width: Real): Undefined;

/**
 * Using this function you can change the tile set resource assigned to a given tile map element on a layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then supply a tile set index and the tile map will be given the new sprite.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to change
 * @param {Asset.GMTileSet} tileset_index - The new tile set index to use
 */
declare function tilemap_tileset(tilemap_element_id: TileMapElement,tileset_index: GMTileSet): Undefined;

/**
 * This function controls the position along the x-axis of the room of the asset tile map element on the layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then set the x value to use (based on the room coordinates).
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to change
 * @param {Real} x - The x position for the tile map
 */
declare function tilemap_x(tilemap_element_id: TileMapElement,x: Real): Undefined;

/**
 * This function controls the position along the y-axis of the room of the asset tile map element on the layer. You give the tile map element ID (which you get when you create a tile map element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), and then set the y value to use (based on the room coordinates).
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tile map element to change
 * @param {Real} y - The y position for the tile map
 */
declare function tilemap_y(tilemap_element_id: TileMapElement,y: Real): Undefined;

/**
 * This function can be used to check whether a given set of tile-data is for an empty tile or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is empty, or false if there is a tile index.
 * @returns {Bool}
 * @param {Real} tiledata - the tile-data to check
 */
declare function tile_get_empty(tiledata: Real): Bool;

/**
 * This function can be used to check whether in a given set of tile-data the tile has been flipped or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is flipped, or false if not.
 * @returns {Bool}
 * @param {Real} tiledata - the tile-data to check
 */
declare function tile_get_flip(tiledata: Real): Bool;

/**
 * This function can be used to get the tile index (the position of the tile within the tile set image) from a set of tile-data. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return an integer value for the index or -1 if there is an error.
 * @returns {Real}
 * @param {Real} tiledata - the tile-data to check
 */
declare function tile_get_index(tiledata: Real): Real;

/**
 * This function can be used to check whether in a given set of tile-data the tile has been mirrored or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is mirrored, or false if not.
 * @returns {Bool}
 * @param {Real} tiledata - the tile-data to check
 */
declare function tile_get_mirror(tiledata: Real): Bool;

/**
 * This function can be used to check whether in a given set of tile-data the tile has been rotated 90 degrees or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is rotated, or false if not.
 * @returns {Bool}
 * @param {Real} tiledata - the tile-data to check
 */
declare function tile_get_rotate(tiledata: Real): Bool;

/**
 * This function can be used to set a given set of tile-data to be an empty tile. You give the tile-data, which can be retrieved using the function tilemap_get(), and the function will return true if the tile is empty, or false if there is a tile index. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.
 * @returns {Real}
 * @param {Real} tiledata - the tile-data to set
 */
declare function tile_set_empty(tiledata: Real): Real;

/**
 * This function can be used to set a given set of tile-data to flip the tile or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and then set the flip argument to either true if you want the tile flipped, or false if you want the tile to be in its default, un-flipped state. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.
 * @returns {Real}
 * @param {Real} tiledata - the tile-data to set
 * @param {Bool} flip - Set to true to flip and false to leave it as-is
 */
declare function tile_set_flip(tiledata: Real,flip: Bool): Real;

/**
 * This function can be used to set the tile index (the position of the tile within the tile set image) for a set of tile-data. You give the tile-data, which can be retrieved using the function tilemap_get(), and then the integer value that represents the position of the tile (its index) within the tile set. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.
 * @returns {Real}
 * @param {Real} tiledata - the tile-data to set
 * @param {Real} index - The integer index value of the tile set to use
 */
declare function tile_set_index(tiledata: Real,index: Real): Real;

/**
 * This function can be used to set a given set of tile-data to mirror the tile or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and then set the mirror argument to either true if you want the tile mirrored, or false if you want the tile to be in its default, un-mirrored state. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.
 * @returns {Real}
 * @param {Real} tiledata - the tile-data to set
 * @param {Bool} mirror - Set to true to mirror and false to leave it as-is
 */
declare function tile_set_mirror(tiledata: Real,mirror: Bool): Real;

/**
 * This function can be used to set a given set of tile-data to rotate the tile 90 degrees or not. You give the tile-data, which can be retrieved using the function tilemap_get(), and then set the rotate argument to either true if you want the tile rotated, or false if you want the tile to be in its default, un-rotated state. The function will return a modified tile-data set which can then be applied using the tilemap_set() function.
 * @returns {Real}
 * @param {Real} tiledata - the tile-data to set
 * @param {Bool} rotate - Set to true to rotate and false to leave it as-is
 */
declare function tile_set_rotate(tiledata: Real,rotate: Bool): Real;

/**
 * This function was originally designed for calling script assets in a dynamic way, but with the introduction of user-defined functions it can now be used in two ways:
 * @returns {Any}
 * @param {Any} scr - The name of the function/script that you want to call
 * @param {ArgumentIdentity} ... - The different arguments that you want to pass through to the function/script
 */
declare function script_execute(scr: Any,...: ArgumentIdentity): Any;

/**
 * This function works similarly to the function script_execute() only you can supply an array that contains the arguments required for the function/script being called. You may also supply two optional arguments to the function to specify an offset into the array to get the arguments from, as well as the number of arguments to use from the array (this must be a maximum of array_length - offset).
 * @returns {Any}
 * @param {Any} scr - The name of the function/script that you want to call
 * @param {Array} array_args - The array containing the arguments for the function/script
 * @param {Real} offset - OPTIONAL! The offset into the argument array
 * @param {Real} num_args - OPTIONAL! The number of arguments to (from the offset onwards)
 */
declare function script_execute_ext(scr: Any,array_args: Array,offset: Real,num_args: Real): Any;

/**
 * This function works similarly to the function script_execute_ext() only you can supply an array that contains the arguments required for the function/script being called. You may also supply two optional arguments to the function to specify an offset into the array to get the arguments from, as well as the number of arguments to use from the array (this must be a maximum of array_length - offset).
 * @returns {Any}
 * @param {Function} method - method/function that you want to call
 * @param {Array} array_args - The array containing the arguments for the function/script
 * @param {Real} offset - OPTIONAL! The offset into the argument array
 * @param {Real} num_args - OPTIONAL! The number of arguments to (from the offset onwards)
 */
declare function method_call(method: Function,array_args: Array,offset: Real,num_args: Real): Any;

/**
 * This function will return true or false depending on whether the script or script function with the given index exists. Note, that this is not a string, but rather the asset name which holds the unique index for each script (as it would appear in the IDE) or the script function name variable, as defined within the script asset (note that this will not work for method variables). For more information on scripts, see The Script Editor.
 * @returns {Bool}
 * @param {Asset.GMScript} scr - The name of the script that you want to check.
 */
declare function script_exists(scr: GMScript): Bool;

/**
 * This function will return the name as a string of the specified script. This name is the one that has been specified for the script in the Asset Browser of the main GameMaker window. For more information about scripts, see The Script Editor.
 * @returns {String}
 * @param {Any} scr - The index of the script that you want to get the name of.
 */
declare function script_get_name(scr: Any): String;

/**
 * With this function you can create a new sequence object which you can then add tracks to. The function returns a struct which you can then access to setup the new sequence you have created. The contents of this struct are detailed on this page. The sequence object struct can then be used to create instances of the sequence on a room layer using the function layer_sequence_create(). Note that when creating sequence objects in this way you should remove them again by calling the function sequence_destroy() when they are no longer required, otherwise you will have a memory leak which can slow down and eventually crash your game.
 * @returns {Struct.Sequence}
 */
declare function sequence_create(): Sequence;

/**
 * With this function you can destroy a sequence object that has been created dynamically. You supply either the sequence object struct (as returned by the function sequence_create()) or the sequence ID (as returned by the function layer_sequence_get_sequence() or from the sequence instance struct property sequence). This function should be used whenever a dynamically created sequence is no longer required to free up the memory associated with it.
 * @returns {Undefined}
 * @param {Struct.Sequence} sequence_struct_or_id - The sequence object struct or ID to destroy
 */
declare function sequence_destroy(sequence_struct_or_id: Sequence): Undefined;

/**
 * With this function you can check to see if a sequence object exists or not. You supply either the sequence object struct (as returned by the function sequence_create() or sequence_get()) or the sequence ID (as returned by the function layer_sequence_get_sequence() or from the sequence instance struct property sequence, or the index from the asset browser) and the function will return true if the sequence object exists or false if it does not.
 * @returns {Bool}
 * @param {Any} sequence_struct_or_id - The sequence object struct or ID to check for
 */
declare function sequence_exists(sequence_struct_or_id: Any): Bool;

/**
 * With this function you can retrieve the sequence object struct from a sequence asset index. You supply the asset index for the sequence as defined in the asset browser, and the function will return the sequence object struct that can then be accessed, or -1 if the sequence doesn't exist or the asset index given is not a sequence.
 * @returns {Struct.Sequence}
 * @param {Asset.GMSequence} sequence_index - The sequence index as defined in the asset browser.
 */
declare function sequence_get(sequence_index: GMSequence): Sequence;

/**
 * With this function you can retrieve an array of all the object indices that have instances being created within the given sequence. You supply either the sequence object struct (as returned by the function sequence_create() or sequence_get()) or the sequence ID (as returned by the function layer_sequence_get_sequence() or from the sequence instance struct property sequence) and the function will return an array, where each item in the array is an object_index for the different objects being used by the sequence to create instances.
 * @returns {Array[Asset.GMObject]}
 * @param {Any} sequence_struct_or_id - The sequence object struct or ID to get the objects from.
 */
declare function sequence_get_objects(sequence_struct_or_id: Any): Array[GMObject];

/**
 * With this function you can override (replace) all instances of an object used in a sequence with another one. You supply the sequence instance struct ID (as returned when the sequence instance was created in the room or by using one of the room layer functions - see here), as well as the object index (as defined in the asset browser) for the object that you want to override. Finally you give an object index or an instance ID to use as the object that is going to override the sequence (supplying an instance ID will simply use the object that the instance was created from as the override). Note that this can only be done on sequence instances (not sequence objects) and must be done before the sequence starts to play, otherwise it won't work.
 * @returns {Undefined}
 * @param {Struct.Sequence} sequence_instance_struct - The sequence instance struct to modify.
 * @param {Asset.GMObject} object_id - The object index of the object within the sequence to override.
 * @param {Any} instance_or_object_id - The object index or instance ID to use to override the sequence objects.
 */
declare function sequence_instance_override_object(sequence_instance_struct: Sequence,object_id: GMObject,instance_or_object_id: Any): Undefined;

/**
 * With this function you can create a new keyframe data struct, supplying the type of track that the keyframe data will be applied to, which will be one of the following constants:
 * @returns {Struct}
 * @param {Constant.SequenceTrackType} type - The type of keyframe data to create, a constant, listed above.
 */
declare function sequence_keyframedata_new(type: SequenceTrackType): Struct;

/**
 * With this function you can create a new track keyframe struct, supplying the type of track that the keyframe will be applied to, which will be one of the following constants:
 * @returns {Struct.Keyframe}
 * @param {Constant.SequenceTrackType} type - The type of keyframe to create, a constant, listed above.
 */
declare function sequence_keyframe_new(type: SequenceTrackType): Keyframe;

/**
 * With this function you can create a new sequence track struct, supplying the type of track that you wish to make which will be one of the following constants:
 * @returns {Struct.Track}
 * @param {Constant.SequenceTrackType} type - The type of track to create, a constant, listed above.
 */
declare function sequence_track_new(type: SequenceTrackType): Track;

/**
 * This function will do a check to see if the chosen target platform supports shaders, returning true if they do, and false if they do not. It is important to note that on Android, if the project does not have any shader resources defined, then the function will always return false, regardless of whether the device supports shaders or not.
 * @returns {Bool}
 */
declare function shaders_are_supported(): Bool;

/**
 * This function will return the index ID value of the shader currently being used for rendering, or it will return -1 if no shader is being used.
 * @returns {Asset.GMShader}
 */
declare function shader_current(): GMShader;

/**
 * With this function you can set a global state for all shaders being used where, when enabled, the shader "steals" 2 bits from the input colour values. The first is from the lower bit of the red colour value, and the second is from the lower bit of the blue colour value. These values can get then be recovered in the shader to work out which vertex you are dealing with (ie: which corner).
 * @returns {Undefined}
 * @param {Bool} enable - Enable (true) or disable (false) this function.
 */
declare function shader_enable_corner_id(enable: Bool): Undefined;

/**
 * With this function you can retrieve the name of a shader resource. You supply the unique ID value for the shader to get the name of and the function will return the name of the resource as a string.
 * @returns {String}
 * @param {Asset.GMShader} shader - The index of the shader to get the name of.
 */
declare function shader_get_name(shader: GMShader): String;

/**
 * Since you cannot change the value of a shader sampler within the shader itself, you have to set it before calling the shader using one of the available uniform set functions. However, to be able to do that you must first call this function to get the "handle" of the shader sampler that you will want to set.
 * @returns {Id.Sampler}
 * @param {Asset.GMShader} shader - The index of the shader to use.
 * @param {String} uniform - The shader sampler to get the handle of (a string).
 */
declare function shader_get_sampler_index(shader: GMShader,uniform: String): Sampler;

/**
 * Since you cannot change the value of a shader constant within the shader itself, you have to set it before calling the shader using one of the available uniform set functions. However, to be able to do that you must first call this function to get the "handle" of the shader constant that you will want to change.
 * @returns {Id.Uniform}
 * @param {Asset.GMShader} shader - The index of the shader to use.
 * @param {String} uniform - The shader constant to get the handle of (a string).
 */
declare function shader_get_uniform(shader: GMShader,uniform: String): Uniform;

/**
 * This function will check a shader at run-time to make sure that it has been successfully compiled. If it has then the function returns true otherwise it returns false. This function should be used at the start of the game to make sure that the platform running your game has successfully compiled any shaders used (particularly on Windows where some computers may be using DX9 with Shader Level 2.0 and not a later version using shader level 3.0).
 * @returns {Bool}
 * @param {Asset.GMShader} shader - The shader to check.
 */
declare function shader_is_compiled(shader: GMShader): Bool;

/**
 * This function resets the draw target and should be called when you no longer wish to use the current shader (set using shader_set()).
 * @returns {Undefined}
 * @param {Id.Uniform} handle - The handle of the shader constant to set.
 * @param {Array} array - A previously initialised array of floating point values.
 */
declare function shader_set_uniform_matrix_array(handle: Uniform,array: Array): Undefined;

/**
 * With this function you can set the drawing target to the given shader and all further drawing will be done using that. You can end shader use with function shader_reset().
 * @returns {Undefined}
 * @param {Asset.GMShader} shader - The index of the shader to use.
 */
declare function shader_set(shader: GMShader): Undefined;

/**
 * With this function you can set the value (or values) of a shader constant. You must previously have gotten the "handle" of the constant using the function shader_get_uniform(), and you will have to know what type of constant it is to pass the correct number of floating point values through to it, ie: if you have a vec2 you will need to pass two values to the function.
 * @returns {Undefined}
 * @param {Id.Uniform} handle - The handle of the shader constant to set.
 * @param {Real} value1 - The floating point value (or values) to set the shader constant to.
 * @param {Real} value2 - The floating point value (or values) to set the shader constant to.
 * @param {Real} value3 - The floating point value (or values) to set the shader constant to.
 * @param {Real} value4 - The floating point value (or values) to set the shader constant to.
 */
declare function shader_set_uniform_f(handle: Uniform,value1: Real,value2: Real,value3: Real,value4: Real): Undefined;

/**
 * With this function you can set a shader constant to hold an array of values. You must previously have gotten the "handle" of the constant using the function shader_get_uniform(), and you will have to have previously initialised the array.
 * @returns {Undefined}
 * @param {Id.Uniform} handle - The handle of the shader constant to set.
 * @param {Array} array - A previously initialised array of floating point values.
 */
declare function shader_set_uniform_f_array(handle: Uniform,array: Array): Undefined;

/**
 * With this function you can set values of a shader constant from a buffer. You must previously have gotten the "handle" of the constant using the function shader_get_uniform(), and you will have to have previously initialised the buffer and filled it with buffer_f32 data.
 * @returns {Undefined}
 * @param {Id.Uniform} handle - The handle of the shader constant to set.
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The offset position (in bytes) within the buffer to read the data from.
 * @param {Real} count - The number of entires to read from the buffer.
 */
declare function shader_set_uniform_f_buffer(handle: Uniform,buffer: Buffer,offset: Real,count: Real): Undefined;

/**
 * With this function you can set the value (or values) of a shader constant. You must previously have gotten the "handle" of the constant using the function shader_get_uniform(), and you will have to know what type of constant it is to pass the correct number of integer values through to it, ie: if you have a vec2 you will need to pass two values to the function.
 * @returns {Undefined}
 * @param {Id.Uniform} handle - The handle of the shader constant to set.
 * @param {Real} value1 - The integer value (or values) to set the shader constant to.
 * @param {Real} value2 - The integer value (or values) to set the shader constant to.
 * @param {Real} value3 - The integer value (or values) to set the shader constant to.
 * @param {Real} value4 - The integer value (or values) to set the shader constant to.
 */
declare function shader_set_uniform_i(handle: Uniform,value1: Real,value2: Real,value3: Real,value4: Real): Undefined;

/**
 * With this function you can set the value (or values) of a shader constant to the current transform matrix (as set using the Matrix Functions). You must previously have gotten the "handle" of the constant using the function shader_get_uniform().
 * @returns {Undefined}
 * @param {Id.Uniform} handle - The handle of the shader constant to set.
 */
declare function shader_set_uniform_matrix(handle: Uniform): Undefined;

/**
 * This function will clear the specified animation track of all animations, ready to be re-assigned.
 * @returns {Undefined}
 * @param {Real} track - The animation track to clear.
 * @param {Bool} reset - Whether to reset the skeleton to setup pose (defaults to false).
 * @param {Real} duration - How long animating the skeleton back to setup pose will take.
 */
declare function skeleton_animation_clear(track: Real,reset: Bool,duration: Real): Undefined;

/**
 * With this function you can get the current animation set being used by your skeletal animation sprite. The return value is a string, which will be the name of the set as you defined it in your skeletal animation program.
 * @returns {String}
 */
declare function skeleton_animation_get(): String;

/**
 * This function will return the time required for the given animation set to run before looping back to the beginning. The return value is in seconds.
 * @returns {Real}
 * @param {String} animname - The name (a string) of the animation set to use.
 */
declare function skeleton_animation_get_duration(animname: String): Real;

/**
 * A single skeletal animation sprite can have various animation sets, and these sets can be assigned different tracks so that you can "mix and match" animation sets. This function will return the name of the animation set currently used by the given track number (as set by the function skeleton_animation_set_ext).
 * @returns {String}
 * @param {Real} track - The track number to get the animation set name of.
 */
declare function skeleton_animation_get_ext(track: Real): String;

/**
 * This function will return the frame number of the animation on the specified animation track. The function will return -1 if no animation is assigned to the specific track given.
 * @returns {Real}
 * @param {Real} track - The animation track to get the frame of.
 */
declare function skeleton_animation_get_frame(track: Real): Real;

/**
 * This function will return the current position of the specified animation track in the range (0.0 to 1.0). The function will return -1 if no animation is assigned to the specific track given.
 * @returns {Real}
 * @param {Real} track - The animation track to get the frame of.
 */
declare function skeleton_animation_get_position(track: Real): Real;

/**
 * This function can be used to retrieve the number of frames that any given skeleton animation has. You supply the skeleton animation name (as a string, as defined in the program used to make the animation, or as returned by using the function skeleton_animation_get, and the function returns the frames that it has as an integer value. The function will return 0 if the specified animation does not exist.
 * @returns {Real}
 * @param {String} anim_name - The animation name to get the frames of.
 */
declare function skeleton_animation_get_frames(anim_name: String): Real;

/**
 * This function will return true if the animation on the given track has finished.
 * @returns {Bool}
 * @param {Real} track - The animation track.
 */
declare function skeleton_animation_is_finished(track: Real): Bool;

/**
 * This function will return true if the animation on the given track is looping.
 * @returns {Bool}
 * @param {Real} track - The animation track.
 */
declare function skeleton_animation_is_looping(track: Real): Bool;

/**
 * With this function you can populate a (pre-created) DS list with all the names of the animations included as part of the skeletal animation sprite. The names will be strings and can then be used in the other animation functions for these types of sprite.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The sprite index of the Spine skeletal animation to get the list from.
 * @param {Id.DsList} list - The ID of the DS list to populate with the animation names.
 */
declare function skeleton_animation_list(sprite: GMSprite,list: DsList): Undefined;

/**
 * You can switch animation sets easily using the skeleton_animation_set() function, but this may cause a skip or stutter as one animation is swapped for another. To prevent this, you can set the mix value between two animation sets and the sprite will interpolate between them. normally you would want to do this in the Create Event of the instance with the skeletal animation as it only needs set once, and GameMaker will interpolate all further changes to the sprite using the animation sets in that instance. Note that the duration value is from 0 to 1, where a value of 0.5 would have a "half and half" interpolation from one set to the other.
 * @returns {Undefined}
 * @param {String} animfrom - The name (a string) of the first animation set to interpolate from.
 * @param {String} animto - The name (a string) of the second animation set to interpolate to.
 * @param {Real} duration - The duration of the interpolation (from 0 to 1)
 */
declare function skeleton_animation_mix(animfrom: String,animto: String,duration: Real): Undefined;

/**
 * Once you have assigned a skeletal animation sprite to your instance, you can then define which animation set it should use at any given time with this function. When you created your sprite (in Spine) you will have defined multiple animations sets for different states and named each of them appropriately. These names are what you will use to tell GameMaker which animation set to use at any time in your game. For example, if your sprite is for a platform game, then you may have a "jump" set, a "run" set and an "idle" set all contained within the one sprite and you can switch between them in your game using this function.
 * @returns {Undefined}
 * @param {String} animname - The name (a string) of the animation set to use.
 * @param {Bool} loop - Whether the animation should loop (defaults to true).
 */
declare function skeleton_animation_set(animname: String,loop: Bool): Undefined;

/**
 * When you set an animation set for your skeletal animation sprite, it is assigned track 0 internally. However, you can assign further sets to further tracks (1 and above) and in this way have your sprite play two (or more) animations at the same time. Note that the sprite should have been designed in your animation program with this in mind, such that the "base" animation in track 0 only has keyframes for certain bones, while the next tracks have keyframes for the others. For example, if you have a "walk" animation and its keyframes only affect the legs of the sprite, you can then have a set of head animations and arm animations which you can set in tracks 1 and 2 respectively, permitting you to have a base movement and adapt on it in real-time while the game is being played.
 * @returns {Undefined}
 * @param {String} animname - The name (a string) of the animation set to use.
 * @param {Real} track - The track for the animation set to use.
 * @param {Bool} loop - Whether the animation should loop (defaults to true).
 */
declare function skeleton_animation_set_ext(animname: String,track: Real,loop: Bool): Undefined;

/**
 * This function will set the animation assigned to the given track to the frame you supply. The frame index should be an real value between 0 and the number of frames for the animation (which you can get using the function skeleton_animation_get_frames). If you supply a value outside of this range, the animation will be looped to make up the difference, for example if the animation has 5 frames and you set the frame to 8, the actual frame shown will be 3.
 * @returns {Undefined}
 * @param {Real} track - The animation track to set the frame of.
 * @param {Real} index - The new index for the animation frame.
 */
declare function skeleton_animation_set_frame(track: Real,index: Real): Undefined;

/**
 * This function will set the animation assigned to the given track to the proportional position you supply. The position should be an real value between 0.0 and 1.0. If you supply a value outside of this range, the animation will be looped to make up the difference, for example if the given position is 1.5 the actual position will be 0.5.
 * @returns {Undefined}
 * @param {Real} track - The animation track to set the frame of.
 * @param {Real} position - The new position for the animation track.
 */
declare function skeleton_animation_set_position(track: Real,position: Real): Undefined;

/**
 * When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images that are apart from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a UNIQUE name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.
 * @returns {Any}
 * @param {String} name - The name (as a string) of the attachment to create.
 * @param {Asset.GMSprite} sprite - The sprite_index to get the attachment image from.
 * @param {Real} ind - The image_index to get the attachment image from.
 * @param {Real} xorigin - The x origin for the image being used.
 * @param {Real} yorigin - The y origin for the image being used.
 * @param {Real} xscale - The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the image. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 */
declare function skeleton_attachment_create(name: String,sprite: GMSprite,ind: Real,xorigin: Real,yorigin: Real,xscale: Real,yscale: Real,rot: Real): Any;

/**
 * When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a UNIQUE name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached, as well as the colour to be blended with the image and it's alpha (transparency) value. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.
 * @returns {Any}
 * @param {String} name - The name (as a string) of the attachment to create.
 * @param {Asset.GMSprite} sprite - The sprite_index to get the attachment image from.
 * @param {Real} ind - The image_index to get the attachment image from.
 * @param {Real} xorigin - The x origin for the image being used.
 * @param {Real} yorigin - The y origin for the image being used.
 * @param {Real} xscale - The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the image: 0 = normal, 90 = turned 90░ counter-clockwise etc.
 * @param {Constant.Color} colour - The colour value to use (A constant, integer or hex value).
 * @param {Real} alpha - The alpha value to use (from 0 to 1).
 */
declare function skeleton_attachment_create_colour(name: String,sprite: GMSprite,ind: Real,xorigin: Real,yorigin: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Any;

/**
 * This function checks if a custom attachment has been created using the skeleton_attachment_create() or skeleton_attachment_replace() functions.
 * @returns {Bool}
 * @param {String} name - The name (as a string) of the attachment to check.
 */
declare function skeleton_attachment_exists(name: String): Bool;

/**
 * When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images that are apart from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create/replace your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.
 * @returns {Any}
 * @param {String} name - The name (as a string) of the attachment to create.
 * @param {Asset.GMSprite} sprite - The sprite_index to get the attachment image from.
 * @param {Real} ind - The image_index to get the attachment image from.
 * @param {Real} xorigin - The x origin for the image being used.
 * @param {Real} yorigin - The y origin for the image being used.
 * @param {Real} xscale - The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the image. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 */
declare function skeleton_attachment_replace(name: String,sprite: GMSprite,ind: Real,xorigin: Real,yorigin: Real,xscale: Real,yscale: Real,rot: Real): Any;

/**
 * When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create/replace your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached, as well as the colour to be blended with the image and it's alpha (transparency) value. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.
 * @returns {Any}
 * @param {String} name - The name (as a string) of the attachment to create.
 * @param {Asset.GMSprite} sprite - The sprite_index to get the attachment image from.
 * @param {Real} ind - The image_index to get the attachment image from.
 * @param {Real} xorigin - The x origin for the image being used.
 * @param {Real} yorigin - The y origin for the image being used.
 * @param {Real} xscale - The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the image: 0 = normal, 90 = turned 90░ counter-clockwise etc.
 * @param {Constant.Color} colour - The colour value to use (A constant, integer or hex value).
 * @param {Real} alpha - The alpha value to use (from 0 to 1).
 */
declare function skeleton_attachment_replace_colour(name: String,sprite: GMSprite,ind: Real,xorigin: Real,yorigin: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Any;

/**
 * This function destroys a custom attachment previously created using the skeleton_attachment_create() or skeleton_attachment_replace() functions. Any slots using the attachment will be cleared.
 * @returns {Any}
 * @param {String} name - The name (as a string) of the attachment to destroy.
 */
declare function skeleton_attachment_destroy(name: String): Any;

/**
 * A skeletal animation sprite may have other sprites added as attachments, with these sprites being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can get the name (as a string) of the attachment for the given slot of the currently assigned sprite. Note that attached sprites are referenced through their name string as assigned in Spine, or when you called skeleton_attachment_create().
 * @returns {String}
 * @param {String} slot - The slot name (a string) to get the attachment of.
 */
declare function skeleton_attachment_get(slot: String): String;

/**
 * A skeletal animation sprite may have other images added as attachments, with these images being added to a named slot (the name is given when you create the attachment slot in your animation program) and they will be drawn along with the animation of the current sprite. With this function you can set an attachment to a given slot, where you are required to give the names (as strings) of the slot and the attachment. These names are defined by the animation program used, or (in the case of the attachment) when you call skeleton_attachment_create().
 * @returns {String}
 * @param {String} slot - The slot name (a string) to get the attachment of.
 * @param {Any} attachment - The name (as a string or a sprite_index) of the attachment image.
 */
declare function skeleton_attachment_set(slot: String,attachment: Any): String;

/**
 * Your skeletal animation is made up of a number of "bones", which you will have defined and given names to in your animation program. This function can be used to get information on the named bone at any time and store the data in an empty DS map, which you must have created previously. Note that this data refers to the default pose for the skeleton, and not the current pose that is being drawn. If you need the data from the current pose, use skeleton_bone_state_get().
 * @returns {Undefined}
 * @param {String} bone - The name (as a string) of the bone.
 * @param {Id.DsMap} map - The (previously created) DS map that stores the bone data.
 */
declare function skeleton_bone_data_get(bone: String,map: DsMap): Undefined;

/**
 * Your skeletal animation is made up of a number of "bones", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data refers to the default pose for the skeleton, and not the current pose that is being drawn (for that use the function skeleton_bone_state_set()), and must be set from a previously created DS map, which should have the following keys and their equivalent values:
 * @returns {Undefined}
 * @param {String} bone - The name (as a string) of the bone.
 * @param {Id.DsMap} map - The (previously created) DS map that stores the bone data.
 */
declare function skeleton_bone_data_set(bone: String,map: DsMap): Undefined;

/**
 * With this function you can populate a (pre-created) DS list with all the names of the bones used as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation bone functions for these types of sprite.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The sprite index of the Spine skeletal animation to get the list from.
 * @param {Id.DsMap} list - The ID of the DS list to populate with the bone names.
 */
declare function skeleton_bone_list(sprite: GMSprite,list: DsMap): Undefined;

/**
 * Your skeletal animation is made up of a number of "bones", which you will have defined and given names to in your animation program, and this function can be used to get certain data for the named bone at any time. Note that this data refers to the current pose for the skeleton, depending on the animation set used, and the function requires a previously created DS map, which will then have the following keys and their equivalent values after calling the function:
 * @returns {Undefined}
 * @param {String} bone - The name (as a string) of the bone.
 * @param {Id.DsMap} map - The (previously created) DS map that stores the bone data.
 */
declare function skeleton_bone_state_get(bone: String,map: DsMap): Undefined;

/**
 * Your skeletal animation is made up of a number of "bones", which you will have defined and given names to in your animation program, and this function can be used to set certain data for the named bone at any time. Note that this data will set the current pose for the skeleton, depending on the animation set used, and the function requires a previously created DS map, which should have the following keys and their required values:
 * @returns {Undefined}
 * @param {String} bone - The name (as a string) of the bone.
 * @param {Id.DsMap} map - The (previously created) DS map that stores the bone data.
 */
declare function skeleton_bone_state_set(bone: String,map: DsMap): Undefined;

/**
 * This function is only for use with sprites that have been created using a skeletal animation program like Spine. While you can draw these sprites using the normal draw functions (like draw_self()), there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties. In these cases you can draw the sprite with this function, where you give the sprite index and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling GameMaker what part of the animation to show and is a value between 0 and the image_number. The rest of the arguments are the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {String} animname - The name of the animation to get the frame from (a string).
 * @param {String} skinname - The name of the skin to use (a string).
 * @param {Real} frame - The animation frame to draw (from 0 to image_number - 1).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 * @param {Constant.Color} colour - The colour with which to blend the sprite.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_skeleton(sprite: GMSprite,animname: String,skinname: String,frame: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Undefined;

/**
 * This function will draw the collision masks associated with the given skeletal animation. You supply the base sprite, the animation set to use and the frame to get the information from, and you can also set the transform properties to suit.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {String} animname - The name of the animation to get the frame from (a string).
 * @param {Real} frame - The animation frame to draw (from 0 to image_number - 1).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 * @param {Constant.Color} colour - The colour with which to blend the sprite.
 */
declare function draw_skeleton_collision(sprite: GMSprite,animname: String,frame: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,colour: Color): Undefined;

/**
 * This function is only for use with instances which have sprites assigned to them created using the skeletal animation program Spine. While you can draw these sprites using the normal draw functions (like draw_self()), there are times when you may want to draw a single frame or show a change of skin texture without actually changing the sprite properties for an instance. In these cases you can draw the sprite that has been assigned to the instance with this function, where you give the unique Instance ID and then the name of the animation to get the frame from (a string, as set within the program used to make the sprite). Next you give the name of the skin to use (again, as set when the sprite was made), and a frame value. The frame value is for telling GameMaker what part of the animation to show and is a value between 0 and the image_number. The rest of the arguments are the same as those used for normal sprite drawing and will change the scale, angle, blend colour and alpha of the final animation frame being drawn.
 * @returns {Undefined}
 * @param {Id.Instance} instance - The index of the instance to draw the sprite from.
 * @param {String} animname - The name of the animation to get the frame from (a string).
 * @param {String} skinname - The name of the skin to use (a string).
 * @param {Real} frame - The animation frame to draw (from 0 to image_number - 1).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 * @param {Constant.Color} colour - The colour with which to blend the sprite.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_skeleton_instance(instance: Instance,animname: String,skinname: String,frame: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Undefined;

/**
 * This function will draw the given animation using the given skin at a specific time in the animation. The time value should be between 0 (the beginning) and the end duration of the animation, which you can find using the function skeleton_animation_get_duration(). You can set the time value to values higher than the total duration of the animation and the animation will loop back to the beginning, but you run the risk of losing floating point accuracy as the accumulated time gets larger.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {String} animname - The name of the animation to get the frame from (a string).
 * @param {String} skinname - The name of the skin to use for drawing (a string).
 * @param {Real} time - The time-frame to draw the animation at (from 0 to the end duration, in seconds).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 * @param {Constant.Color} colour - The colour with which to blend the sprite.
 * @param {Real} alpha - None
 */
declare function draw_skeleton_time(sprite: GMSprite,animname: String,skinname: String,time: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Undefined;

/**
 * With this function, you can toggle on (true) or off (false) drawing the collision data for the current skeletal animation sprite being used by the instance. If this is switched on, the bounding box and the precise collision mask will be drawn as outlines around the sprite.
 * @returns {Undefined}
 * @param {Bool} flag - Set to true to turn on drawing, and false to turn it off.
 */
declare function skeleton_collision_draw_set(flag: Bool): Undefined;

/**
 * This function will return an array of values associated with any given bounding box for the currently assigned skeleton animation sprite. You supply the index number for the bounding box to get the details of (you can retrieve the total number of bounding boxes for the sprite using the function skeleton_get_num_bounds()) and the function will return an array with the following elements:
 * @returns {Array[Real]}
 * @param {Real} index - The bounding box index to get the values of.
 */
declare function skeleton_get_bounds(index: Real): Array[Real];

/**
 * This function will return an array with the total bounding box value for all the individual bounding boxes assigned to a skeleton animation sprite. The returned array will have 4 elements:
 * @returns {Array[Real]}
 */
declare function skeleton_get_minmax(): Array[Real];

/**
 * This function will return the number of bounding boxes associated with the skeleton animation sprite assigned to the instance running the code. This can then be used along with the function skeleton_get_bounds() to retrieve data about each of the bounding boxes.
 * @returns {Real}
 */
declare function skeleton_get_num_bounds(): Real;

/**
 * Creates a new skin by combining one or more skins defined in the sprite. This can be used (for example) to combine multiple skins defining different pieces of clothing or accessories on a character sprite.
 * @returns {Struct.SkeletonSkin}
 * @param {String} skin_name - The name of the skin to create.
 * @param {Array[String]} base_skins - Array of skin names defined in the sprite to combine.
 */
declare function skeleton_skin_create(skin_name: String,base_skins: Array[String]): SkeletonSkin;

/**
 * With skeletal animation sprites, you can assign separate textures (called "skins") to the animation, thereby using one animation for multiple different things. This function will return the name of the skin (as a string) that is currently assigned to the skeletal animation sprite your instance is using. The name returned is that which you set when you created the sprite in your animation program.
 * @returns {String}
 */
declare function skeleton_skin_get(): String;

/**
 * With this function you can populate a (pre-created) DS list with all the names of the skins included as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation skin functions for these types of sprite.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The sprite index of the Spine skeletal animation to get the list from.
 * @param {Id.DsList} list - The ID of the DS list to populate with the animation names.
 */
declare function skeleton_skin_list(sprite: GMSprite,list: DsList): Undefined;

/**
 * A skeletal animation sprite can be drawn with a variety of textures (called "skins"), permitting you to use one single animation for multiple different purposes. For example, you may have a generic walk animation and this can be used by your NPC characters, enemies, etc... in a game simply by changing the skin it is drawn with. These skins need to have been previously created and named in your animation program, and this name is passed into the function (as a string) to set the sprite to use that skin when being drawn.
 * @returns {Undefined}
 * @param {Any} skinname - The name (a string) of the skin to use (or a reference returned by the skeleton_skin_create() function).
 */
declare function skeleton_skin_set(skinname: Any): Undefined;

/**
 * With this function you can find which slots are at a specified room-space position in the Spine sprite associated with the current instance. You create a DS list and supply its ID along with an x/y position to check and the list will be populated with name string for each of the available attachment slots for the sprite (including any attachment modifications). Note that the list is always sorted in descending order starting from the top-most slot.
 * @returns {Undefined}
 * @param {Real} x - The x position in the room to check.
 * @param {Real} y - The y position in the room to check.
 * @param {Id.DsList} list - The ID of the DS list to populate with the DS maps.
 */
declare function skeleton_find_slot(x: Real,y: Real,list: DsList): Undefined;

/**
 * With this function you can get an attachment slot alpha value. You supply the slot name (a string) and the function will return an real value for the alpha between 0 and 1.
 * @returns {Real}
 * @param {String} slot - The slot name to check, a string
 */
declare function skeleton_slot_alpha_get(slot: String): Real;

/**
 * With this function you can get an attachment slot colour. You supply the slot name (a string) and the function will return an integer value for the colour.
 * @returns {Real}
 * @param {String} slot - The slot name to check, a string
 */
declare function skeleton_slot_colour_get(slot: String): Real;

/**
 * With this function you can set an attachment slot colour and alpha so all sprites attached to it will be drawn with these blend values. Keep in mind that the instance sprite can have a blend colour and alpha setting (image_blend and image_alpha), as can the attachment (see the function skeleton_attachment_create_colour()), and so the final colour and alpha that the assigned attachment sprite for the slot will have will be a composite of all these values.
 * @returns {Undefined}
 * @param {String} slot - The slot name to set, a string
 * @param {Constant.Color} colour - The colour to set, either an integer, a constant, or a hex value.
 * @param {Real} alpha - The alpha to set from 0 to 1.
 */
declare function skeleton_slot_colour_set(slot: String,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can populate a (pre-created) DS list with data for each of the available attachment slots that an animation contains. This data is returned in the forum of a DS map which contains the following key/value pairs:
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The sprite index of the Spine skeletal animation to get the data from.
 * @param {Id.DsList} list - The ID of the DS list to populate with the DS maps.
 */
declare function skeleton_slot_data(sprite: GMSprite,list: DsList): Undefined;

/**
 * With this function you can populate a (pre-created) DS list with data for each of the available attachment slots for the Spine sprite associated with the current instance (including any attachment modifications). This data is returned in the forum of a DS map which contains the following key/value pairs:
 * @returns {Undefined}
 * @param {Id.DsList} list - The ID of the DS list to populate with the DS maps.
 */
declare function skeleton_slot_data_instance(list: DsList): Undefined;

/**
 * With this function you can populate a (pre-created) DS list with all the names of the slots created as part of the skeletal animation sprite. The names will be strings and can then be used in the other skeleton animation slot functions for these types of sprite.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The sprite index of the Spine skeletal animation to get the list from.
 * @param {Id.DsList} list - The ID of the DS list to populate with the bone names.
 */
declare function skeleton_slot_list(sprite: GMSprite,list: DsList): Undefined;

/**
 * This function returns the relative position of the bottom of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:
 * @returns {Real}
 * @param {Asset.GMSprite} ind - The index of the sprite to check.
 */
declare function sprite_get_bbox_bottom(ind: GMSprite): Real;

/**
 * This function returns the relative position of the left of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:
 * @returns {Real}
 * @param {Asset.GMSprite} ind - The index of the sprite to check.
 */
declare function sprite_get_bbox_left(ind: GMSprite): Real;

/**
 * This function will return the current "mode" for the bounding box calculations. You supply the sprite index of the sprite to check, and the function will return one of the constants shown below.
 * @returns {Constant.BBoxMode}
 * @param {Asset.GMSprite} ind - The index of the sprite to check.
 */
declare function sprite_get_bbox_mode(ind: GMSprite): BBoxMode;

/**
 * This function returns the relative position of the right of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:
 * @returns {Real}
 * @param {Asset.GMSprite} ind - The index of the sprite to check.
 */
declare function sprite_get_bbox_right(ind: GMSprite): Real;

/**
 * This function returns the relative position of the top of the sprite bounding box. This value is given as a relative value based on the upper left corner of the base sprite asset being (0,0). it is the same value as can be found in the sprite editor for the collision mask properties. The image below shows how it is calculated:
 * @returns {Real}
 * @param {Asset.GMSprite} ind - The index of the sprite to check.
 */
declare function sprite_get_bbox_top(ind: GMSprite): Real;

/**
 * With this function you can find the height of the base sprite asset, with no transforms, in pixels.
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite to find the height of.
 */
declare function sprite_get_height(index: GMSprite): Real;

/**
 * This function is used to retrieve information for the given sprite. You supply a sprite index (which can be an asset added through the Asset Browser or a sprite added at runtime) and the function returns a struct with the following variables:
 * @returns {Struct.SpriteInfo}
 * @param {Asset.GMSprite} index - The index of the sprite to get the information for.
 */
declare function sprite_get_info(index: GMSprite): SpriteInfo;

/**
 * This function is used to generate the points of a convex hull for the given sprite. You supply a sprite index (which can be an asset added through the Asset Browser or a sprite added at runtime) and the function returns an array of reals defining the points of the convex hull.
 * @returns {Array[Real]}
 * @param {Asset.GMSprite} index - The index of the sprite to generate the convex hull of.
 * @param {Real} max_pts - Use this parameter to specify the maximum number of points that can be returned. (If you are intending to generate a physics polygon shape from the points the maximum is 32)
 * @param {Real} subimg - Use this parameter to specify a specific sprite sub-index to use (defaults to 0)
 */
declare function sprite_get_convex_hull(index: GMSprite,max_pts: Real,subimg: Real): Array[Real];

/**
 * This function will return the name as a string of the specified sprite. This name is the one that has been specified for the sprite in the resource tree of the main GameMaker window. Please note that this is only a string and cannot be used to reference the sprite directly - for that you would need the sprite index. You can, however, use this string to get the sprite index using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMSprite} index - The index of the sprite to get the name of.
 */
declare function sprite_get_name(index: GMSprite): String;

/**
 * This function returns the Nine Slice struct for a sprite, containing all its Nine Slice properties as set in the Sprite Editor or using sprite_set_nineslice(). The contents of this struct are detailed on this page.
 * @returns {Struct}
 * @param {Asset.GMSprite} ind - The index of the sprite from which the Nine Slice struct will be retrieved
 */
declare function sprite_get_nineslice(ind: GMSprite): Struct;

/**
 * A sprite has to have at least one sub-image and this function will return just how many it has. Remember, a sprite sub-image starts being numbered from 0, so if this function returns 3 (the sprite being checked has 3 sub-images) they will be numbered 0, 1 and 2.
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite.
 */
declare function sprite_get_number(index: GMSprite): Real;

/**
 * This function can be used to retrieve the sprite speed as defined for the sprite resource in the Sprite Editor. The value returned can then be used, for example, to calculate how many frames may be drawn for different image_speed. Note that the return value will be very different depending on the type of speed that was applied in the Sprite Editor, either Frames Per Second, or Frames Per Game Frame. The following two examples illustrate this:
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite to get the speed of
 */
declare function sprite_get_speed(index: GMSprite): Real;

/**
 * This function can be used to retrieve the sprite animation type as defined for the sprite resource in the Sprite Editor. The value returned will be one of the following constants:
 * @returns {Constant.SpriteSpeed}
 * @param {Asset.GMSprite} index - The index of the sprite to get the animation type of
 */
declare function sprite_get_speed_type(index: GMSprite): SpriteSpeed;

/**
 * This function returns a special pointer for the sprite texture page. This value can then be used in other draw functions, particularly in the 2D primitive functions, as well as the Shader functions. You can get more information about the returned texture page using the different texture_ functions found here.
 * @returns {Pointer.Texture}
 * @param {Asset.GMSprite} spr - The index of the sprite to use.
 * @param {Real} subimg - The sub-image of the sprite to use.
 */
declare function sprite_get_texture(spr: GMSprite,subimg: Real): Pointer.Texture;

/**
 * This function will return a special value that relates to the position of the given sprite and sub-image on the texture page used by your game. In this way you can pass the value to extensions for use outside of the compiled game, effectively bypassing the GameMaker drawing functions and permitting the sprite to be used in DOM content which can then be drawn anywhere within the window that contains the game canvas. This function is of particular interest to those that wish to create buttons and other interactive media outside of the GameMaker canvas element on their host page using the function clickable_add().
 * @returns {Real}
 * @param {Asset.GMSprite} sprite - The index of the sprite to find the texture page entry of.
 * @param {Real} index - The image index of the sprite.
 */
declare function sprite_get_tpe(sprite: GMSprite,index: Real): Real;

/**
 * This function returns an array with the UV coordinates and other data for the texture of the sprite sub-image on the texture page. The function returns an array with the following 8 elements:
 * @returns {Array[Real]}
 * @param {Asset.GMSprite} sprite - The index of the sprite to use.
 * @param {Real} subimage - The sub-image of the sprite to use.
 */
declare function sprite_get_uvs(sprite: GMSprite,subimage: Real): Array[Real];

/**
 * With this function you can find the width of the base resource sprite, with no transforms, in pixels.
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite to find the width of.
 */
declare function sprite_get_width(index: GMSprite): Real;

/**
 * When you define a sprite in the sprite editor, you need to set the origin for that sprite. This is the point at which the sprite will be "attached" or "drawn" when used with an instance. This function returns the relative offset for the x-axis of the origin based on the upper left corner being the 0,0 position, with a +x being right and a -x being left of this. The following image illustrates this:
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite to find the xoffset of.
 */
declare function sprite_get_xoffset(index: GMSprite): Real;

/**
 * When you define a sprite in the sprite editor, you need to set the origin for that sprite. This is the point at which the sprite will be "attached" or "drawn" when used with an instance. This function returns the relative offset for the y-axis of the origin based on the upper left corner being the 0,0 position, with a +y being down and a -y being up from this. The following image illustrates this:
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite to find the yoffset of.
 */
declare function sprite_get_yoffset(index: GMSprite): Real;

/**
 * With this function you can add an image as a sprite, loading it from an external source where the image file to be loaded should always be in either *.png, *.gif, *.jpg/jpeg or *.json format (*json files are used for loading skeleton animation sprites made with Spine). The function returns the new sprite index which must then be used in all further code that relates to the sprite. If you use this function with HTML5 or are getting an image from a URL, this function will also generate an Image Loaded asynchronous event. See this page for more information.
 * @returns {Asset.GMSprite}
 * @param {String} fname - The name (a string file path) of the file to add.
 * @param {Real} imgnum - Use to indicate the number of sub-images (1 for a single image or for a *.gif).
 * @param {Bool} removeback - Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent.
 * @param {Bool} smooth - Indicates whether to smooth the edges if transparent.
 * @param {Real} xorig - Indicate the x position of the origin in the sprite.
 * @param {Real} yorig - Indicate the y position of the origin in the sprite.
 */
declare function sprite_add(fname: String,imgnum: Real,removeback: Bool,smooth: Bool,xorig: Real,yorig: Real): GMSprite;

/**
 * With this function you can asynchronously add an image as a sprite, loading it from an external source where the image file to be loaded should always be in either *.png, *.gif, *.jpg/jpeg or *.json format (*json files are used for loading skeleton animation sprites made with Spine). The function returns the new sprite index which must then be used in all further code that relates to the sprite. This function will generate an Image Loaded asynchronous event when the sprite has been loaded. See this page for more information.
 * @returns {Asset.GMSprite}
 * @param {String} fname - The name (a string file path) of the file to add.
 * @param {Real} imgnum - Use to indicate the number of sub-images (1 for a single image or for a *.gif).
 * @param {Real} xorig - Indicate the x position of the origin in the sprite.
 * @param {Real} yorig - Indicate the y position of the origin in the sprite.
 * @param {Bool} prefetch - Indicates whether the sprite should be loaded to GPU memory.
 */
declare function sprite_add_ext(fname: String,imgnum: Real,xorig: Real,yorig: Real,prefetch: Bool): GMSprite;

/**
 * This function works in exactly the same way as sprite_create_from_surface() only instead of creating a new sprite from the area of the indexed surface that you select, it adds the defined area of the surface as a new sub-image to a previously created sprite (this means that you cannot add it directly to a sprite from the resource tree, but rather only to one previously created from a surface, or one that has been duplicated from a resource sprite using sprite_duplicate()).
 * @returns {Undefined}
 * @param {Asset.GMSprite} index - The index of the sprite to add the new image to.
 * @param {Id.Surface} surface - The index of the surface from which the get the image.
 * @param {Real} x - The x position to copy from.
 * @param {Real} y - The y position to copy from.
 * @param {Real} w - The width of the area to be copied (from the x position).
 * @param {Real} h - The height of the area to be copied (from the y position).
 * @param {Bool} removeback - Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent.
 * @param {Bool} smooth - Indicates whether to smooth the edges.
 */
declare function sprite_add_from_surface(index: GMSprite,surface: Surface,x: Real,y: Real,w: Real,h: Real,removeback: Bool,smooth: Bool): Undefined;

/**
 * This function takes two previously created (or included) sprite indexes, and copies the image from one to the other. In this way you can copy (or "clone") one sprite into another index. Note that you cannot copy to a game resource. You have to have created the sprite to be copied to previously using the sprite_add() or sprite_duplicate() functions.
 * @returns {Undefined}
 * @param {Asset.GMSprite} index - The index of the sprite to be copied to (ie: overwritten).
 * @param {Asset.GMSprite} sprite - The sprite to be copied from.
 */
declare function sprite_assign(index: GMSprite,sprite: GMSprite): Undefined;

/**
 * With this function you can set the properties of the collision mask that a sprite should have. If you select either automatic (0) or full image (1) as the bounding box mode then the individual bounding box values can be set to 0. However for a user defined mask (2) you will have to set these values. The different bounding box values are always relative to the top left corner of the sprite (irrespective of the x and y origin) which is considered position (0, 0).
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to set the bounding box of.
 * @param {Bool} sepmasks - Whether to create collision masks for each sub-image of the sprite (true), or one mask for all (false).
 * @param {Real} bboxmode - What kind of bounding box to use. 0 = automatic, 1 = full image, 2 = user defined.
 * @param {Real} bbleft - The maximum left position of the bounding box.
 * @param {Real} bbtop - The maximum top position of the bounding box.
 * @param {Real} bbright - The maximum right position of the bounding box.
 * @param {Real} bbbottom - The maximum bottom position of the bounding box.
 * @param {Constant.CollisionMask} kind - The kind of mask, a constant (see the table in the description).
 * @param {Real} tolerance - Indicates the tolerance in the transparency value (0=no tolerance, 255=full tolerance).
 */
declare function sprite_collision_mask(ind: GMSprite,sepmasks: Bool,bboxmode: Real,bbleft: Real,bbtop: Real,bbright: Real,bbbottom: Real,kind: CollisionMask,tolerance: Real): Undefined;

/**
 * With this function you can create a sprite from a previously initialised surface (the surface index ID value is returned when you create the surface using surface_create()). The x and y coordinates that you then input in the function should be relative to the (0,0) position of the surface (the top left corner) and not the game window (nor the view if you have one active). The width and height arguments are in pixels and define the width and height of the part of the surface to use.
 * @returns {Asset.GMSprite}
 * @param {Id.Surface} index - The index of the surface to create from.
 * @param {Real} x - The x position to copy from.
 * @param {Real} y - The y position to copy from.
 * @param {Real} w - The width of the area to be copied (from the x position).
 * @param {Real} h - The height of the area to be copied (from the y position).
 * @param {Bool} removeback - Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent.
 * @param {Bool} smooth - Indicates whether to smooth the edges.
 * @param {Real} xorig - Indicates the x position of the origin in the sprite.
 * @param {Real} yorig - Indicates the y position of the origin in the sprite.
 */
declare function sprite_create_from_surface(index: Surface,x: Real,y: Real,w: Real,h: Real,removeback: Bool,smooth: Bool,xorig: Real,yorig: Real): GMSprite;

/**
 * This function will delete a sprite from the game, freeing any memory that was reserved for it. This is a very important function for those moments when you need to create and change sprites from external sources (like loading a sprite from a file with sprite_add(), or duplicating a sprite using sprite_duplicate()) and should always be used to remove those assets that are no longer needed by a game, or to clear an indexed asset from a variable before re-assigning another asset to that variable. This cannot be used to delete sprites that are included in the game as part of the assets in the Asset Browser.
 * @returns {Bool}
 * @param {Asset.GMSprite} index - The index of the sprite to be deleted.
 */
declare function sprite_delete(index: GMSprite): Bool;

/**
 * This function will return the index of a newly created sprite that is a duplicate (copy) of the one input as the "index" argument. If the function fails, -1 is returned. This function must be used to copy any sprites from the original assets before any transformations can be done on them. For example, if you wish to change the bounding box for a sprite, or set its alpha from another sprite, you must first duplicate it, then perform the operation on the duplicated sprite and use that. A duplicated sprite will be places on its own unique texture page when created, meaning that duplicating multiple sprites will create multiple texture pages and have an impact on performance, so use this function only when necessary.
 * @returns {Asset.GMSprite}
 * @param {Asset.GMSprite} index - The index of the sprite to duplicate.
 */
declare function sprite_duplicate(index: GMSprite): GMSprite;

/**
 * This function returns whether a sprite with the specified index exists or not in the project being run.
 * @returns {Bool}
 * @param {Asset.GMSprite} index - The index of the sprite to check.
 */
declare function sprite_exists(index: GMSprite): Bool;

/**
 * With this function you can remove the given texture page for the given sprite from texture memory. You supply the sprite index (as defined when creating the sprite resource) and the texture page it is assigned to will be removed from texture memory. Note that if the texture page is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded, so care should be taken when using this function. Note that the function will return -1 if flush is not supported for the chosen resource, or it will return 0 if all worked correctly.
 * @returns {Real}
 * @param {Asset.GMSprite} ind - The index (resource name) of the sprite asset to flush
 */
declare function sprite_flush(ind: GMSprite): Real;

/**
 * With this function you can remove the any number of texture pages for the given sprites from texture memory. You supply the sprite indices as an array and the texture pages they are assigned to will be removed from texture memory. Note that if one of the texture pages is used elsewhere in the room (by another instance sprite or a background, etc...) you may get a minor performance hit as the page is immediately reloaded back into memory again, so care should be taken when using this function. Note that the function will return -1 if flush is not supported for the chosen resources, or it will return 0 if all worked correctly.
 * @returns {Real}
 * @param {Array[Asset.GMSprite]} array - Array with the sprite indices to flush
 */
declare function sprite_flush_multi(array: Array[GMSprite]): Real;

/**
 * This function will merge the sprite indexed in argument 1 ("ind2") with that which is indexed in argument 0 ("ind1"). The images themselves are NOT merged together, but rather the image indices are merged, with the sub images from sprite "ind2" appended onto those of sprite "ind1", ie: they are added on at the end. Note that if the sprites are different sizes, then the appended sprites are stretched to fit the image size for "ind1".
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind1 - The index of the sprite to merge.
 * @param {Asset.GMSprite} ind2 - The index of the sprite that ind1 is to be merged with.
 */
declare function sprite_merge(ind1: GMSprite,ind2: GMSprite): Undefined;

/**
 * Nine Slicing is a technique used to scale rectangular images for preserving details, making them retain their original form after scaling. See this page for information on Nine Slice.
 * @returns {Struct}
 */
declare function sprite_nineslice_create(): Struct;

/**
 * This function can be used to prefetch (place into texture memory) a texture page with the given sprite. You supply the sprite index as defined when you created the sprite asset, and the texture page it is on will be loaded into memory. Note that the function will return -1 if prefetch is not supported for the chosen resource or the target platform is HTML5, or it will return 0 if all worked correctly.
 * @returns {Real}
 * @param {Asset.GMSprite} ind - The sprite index to fetch
 */
declare function sprite_prefetch(ind: GMSprite): Real;

/**
 * This function can be used to prefetch (place into texture memory) a number of texture pages that contain the sprites given. You supply an array populated with the sprite indices (as defined when you created the sprite asset) and the texture pages that they are on will be loaded into memory. Note that the function will return -1 if prefetch is not supported for the chosen resource or the target platform is HTML5, or it will return 0 if all worked correctly.
 * @returns {Real}
 * @param {Array[Asset.GMSprite]} array - Array with the sprite indices to fetch
 */
declare function sprite_prefetch_multi(array: Array[GMSprite]): Real;

/**
 * This function works in almost the exact same manner as sprite_add(), only instead of returning the index of the sprite you are importing, it overwrites a previously created sprite index. When using this function you should use a sprite index that has been created and stored in a variable using other functions like sprite_add() or sprite_create_from_surface(), or even sprite_duplicate(), rather than a resource tree sprite asset. You can replace a sprite from the game assets using this function, but doing so means that you will lose the reference ID for the sprite that you are replacing, regardless of whether you call game_restart() or not, and so is not recommended. Regardless of the sprite being replaced, this function will create a new texture page for the sprite and so care should be taken when using it as it may adversely affect performance by increasing the number of required texture swaps for rendering.
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to permanently replace.
 * @param {String} fname - The filename of the image to make the new sprite.
 * @param {Real} imgnumb - The number of frames the sprite will be cut up into horizontally. 1 = one single image / *.gif.
 * @param {Bool} removeback - Indicates whether to make all pixels with the background colour (left-bottom pixel) transparent.
 * @param {Bool} smooth - Indicates whether to smooth the edges.
 * @param {Real} xorig - The x coordinate of the origin, relative to the sprite's top left corner.
 * @param {Real} yorig - The y coordinate of the origin, relative to the sprite's top left corner.
 */
declare function sprite_replace(ind: GMSprite,fname: String,imgnumb: Real,removeback: Bool,smooth: Bool,xorig: Real,yorig: Real): Undefined;

/**
 * This function can be used to save any sub-image of a sprite to disc, giving it the specified filename. The sprite must have been added at runtime (you cannot save sprites added through the IDE) and the file must be saved with a *.png extension.
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to save.
 * @param {Real} subimg - The sub-image of the sprite to save.
 * @param {String} fname - The filename for the saved sprite.
 */
declare function sprite_save(ind: GMSprite,subimg: Real,fname: String): Undefined;

/**
 * This function will create a strip image from all the sub-images in a sprite, saving it to disc with the specified filename. The sprite must have been added at runtime (you cannot save sprites added through the IDE) and the file must be saved with a *.png extension.
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to change the transparency map of.
 * @param {String} filename - The filename for the saved sprite strip.
 */
declare function sprite_save_strip(ind: GMSprite,filename: String): Undefined;

/**
 * This function uses the value/saturation of one sprite and multiplies it with the alpha of the target sprite. Ideally the sprite being used to generate the new alpha map should be grey-scale, with the white areas having an equivalent alpha value of 1 (opaque), the black areas being equivalent to alpha 0 (transparent), and the grey areas being an alpha in between 0 and 1. The sprite that you are setting the alpha of cannot be a permanent resource, nor can the sprite you use to set the alpha, as this will give an error. This means that you must create two completely new sprites "on the fly" in some way for the function to work correctly. This can be achieved by using surfaces, or by creating a sprite from the screen (the code example below shows how the effect can be achieved with surfaces).
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to change the transparency map of.
 * @param {Asset.GMSprite} spr - The index of the sprite to take the transparency map data from.
 */
declare function sprite_set_alpha_from_sprite(ind: GMSprite,spr: GMSprite): Undefined;

/**
 * This function can be used to set the bounding box values for a sprite. You supply the sprite index to use and then the left, top, right and bottom values for the bounding box positions. The positions are absolute values, where the (0, 0) position corresponds to the top left corner of the sprite, regardless of the offset for the sprite, any "empty" pixels the sprite may have, or where it is being drawn in the room.
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to set the bounding box on.
 * @param {Real} left - The left side of the bounding box
 * @param {Real} top - The top of the bounding box.
 * @param {Real} right - The right side of the bounding box
 * @param {Real} bottom - The bottom of the bounding box.
 */
declare function sprite_set_bbox(ind: GMSprite,left: Real,top: Real,right: Real,bottom: Real): Undefined;

/**
 * This function can be used to set the bounding box mode for a sprite. You supply the sprite index and the mode to use, which should be one of the following constants:
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to change the mode of.
 * @param {Constant.BBoxMode} mode - The mode to set (a constant).
 */
declare function sprite_set_bbox_mode(ind: GMSprite,mode: BBoxMode): Undefined;

/**
 * When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to all sub-images of the sprite.
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to change the cache size of.
 * @param {Real} max - The maximum number of cached copies of the sprite that can be stored.
 */
declare function sprite_set_cache_size(ind: GMSprite,max: Real): Undefined;

/**
 * When performing image blending, HTML5 cannot do it dynamically in the same way an executable could be performed. Therefore GameMaker has to temporarily save a blended copy of the image and load it in. This function sets how many blended copies of the given sprite can be cached before old ones are overwritten. Default is 4. This is applied to one single given sub-image of the sprite.
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to change the cache size of.
 * @param {Real} index - The sub-image of ind to change the cache size of.
 * @param {Real} max - The maximum number of cached copies of the sprite that can be stored.
 */
declare function sprite_set_cache_size_ext(ind: GMSprite,index: Real,max: Real): Undefined;

/**
 * This function is used to apply a Nine Slice struct to a sprite. You supply the sprite index and the Nine Slice struct to apply, which can be retrieved using sprite_nineslice_create() or sprite_get_nineslice().
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to modify
 * @param {Struct.NineSlice} nineslice - The Nine Slice struct to apply
 */
declare function sprite_set_nineslice(ind: GMSprite,nineslice: NineSlice): Undefined;

/**
 * This function can be used to set the x and y origin of a sprite, and takes relative values based on the (0,0) position being the upper left corner of the sprite. The following image illustrates this:
 * @returns {Undefined}
 * @param {Asset.GMSprite} ind - The index of the sprite to change the offset of.
 * @param {Real} xoff - The x position of the origin.
 * @param {Real} yoff - The y position of the origin.
 */
declare function sprite_set_offset(ind: GMSprite,xoff: Real,yoff: Real): Undefined;

/**
 * This function can be used to set the base animation speed and type as for the sprite resource. This is normally set in the Sprite Editor, but there may be moments when you are required to set this manually for a given sprite resource. You need to supply the sprite index to set, the animation speed and the type of animation speed to apply. The animation speed type can be any one of the following constants:
 * @returns {Real}
 * @param {Asset.GMSprite} index - The index of the sprite to get the animation type of
 * @param {Real} speed - None
 * @param {Constant.SpriteSpeed} type - None
 */
declare function sprite_set_speed(index: GMSprite,speed: Real,type: SpriteSpeed): Real;

/**
 * This function will return the name as a string of the specified tile set. This name is the one that has been specified for the tile set in the Asset Browser of the main GameMaker window. Please note that this is only a string and cannot be used to reference the tile set directly - for that you would need the tile set index. You can, however, use this string to get the tile set index using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMTileSet} index - The index of the tile set to get the name of.
 */
declare function tileset_get_name(index: GMTileSet): String;

/**
 * This function returns a special pointer for the tile set texture page. This value can then be used in other draw functions, particularly in the 2D primitive functions, as well as the Shader functions. You can get more information about the returned texture page using the different texture_ functions found here.
 * @returns {Pointer.Texture}
 * @param {Asset.GMTileSet} tileset - The index of the tile set to use.
 */
declare function tileset_get_texture(tileset: GMTileSet): Pointer.Texture;

/**
 * This function returns an array with the UV coordinates and other data for the texture of the given tile set on the texture page. The function returns an array with the following 8 elements:
 * @returns {Array[Real]}
 * @param {Asset.GMTileSet} tileset - The index of the tile set to use.
 */
declare function tileset_get_uvs(tileset: GMTileSet): Array[Real];

/**
 * This function is used to retrieve information for the given tileset. You supply a tileset index and the function returns a struct.
 * @returns {Struct.TileSetInfo}
 * @param {Asset.GMTileSet} index - The index of the tile set to get the name of.
 */
declare function tileset_get_info(index: GMTileSet): TileSetInfo;

/**
 * With this function you can add a new (empty) time line into your game. the function returns the index of this new time line which should be stored in a variable for use in all further function calls that involve this new time line. You should also be sure to use the function timeline_delete() whenever you no longer wish to use the time line (like at the end of the room) so as to prevent any possible memory leaks that could slow down or crash your game. To add moments to a timeline created in this way, see the function timeline_moment_add_script().
 * @returns {Asset.GMTimeline}
 */
declare function timeline_add(): GMTimeline;

/**
 * With this function you can clear a specific time line of "moments", removing all codes and actions for that time line and leaving it empty.
 * @returns {Undefined}
 * @param {Asset.GMTimeline} ind - The index of the time line to clear.
 */
declare function timeline_clear(ind: GMTimeline): Undefined;

/**
 * With this function you can delete any time line from your game. if this time line was created in the GameMaker Asset Browser, please note that it is removed completely from the game and trying to call the indexed time line again after using this function will cause an error. If the time line was created dynamically using the timeline_add() function, then this function should be used the moment that the time line is no longer needed to prevent any memory leaks that could slow down (and eventually crash) your game.
 * @returns {Undefined}
 * @param {Asset.GMTimeline} ind - The index of the time line to delete.
 */
declare function timeline_delete(ind: GMTimeline): Undefined;

/**
 * With this function you can check and see whether a time line exists (returns true) or not (returns false). This is particularly useful when creating Timelines dynamically using the timeline_add() function, but you should note that if you search for an uninitialised variable (that would otherwise be assigned to a time line's index) an error will be thrown.
 * @returns {Bool}
 * @param {Asset.GMTimeline} ind - The index of the time line to check for.
 */
declare function timeline_exists(ind: GMTimeline): Bool;

/**
 * This function can be used to get the name of a time line as a string. if the time line has been created dynamically using the timeline_add() function, the name returned will have the format "__newtimelineN" where "N" is the number of the time line (starting from 0). Please note that this is only a string and cannot be used to reference the timeline directly - for that you would need the timeline index. You can, however, use this string to get the timeline index using the returned string along with the function asset_get_index().
 * @returns {String}
 * @param {Asset.GMTimeline} ind - The index of the time line to check the name of.
 */
declare function timeline_get_name(ind: GMTimeline): String;

/**
 * This function will return the value of the moment in which the timeline performs its final action. So, if you have a timeline with 8 different actions placed 20 moments apart, this function would return the moment value of the last action in that timeline, which would be 160. This function is a good way to test whether a timeline has passed the last active moment when running, since the timeline position will continue incrementing every step of the game whether there are further actions or not.
 * @returns {Real}
 * @param {Asset.GMTimeline} ind - The index of the timeline to get the last moment of.
 */
declare function timeline_max_moment(ind: GMTimeline): Real;

/**
 * With this function you can dynamically add a script function to Timelines at any given "moment" within that time line, where a "moment" is the equivalent of one game tick (or step). In this way you can create a new time line using the timeline_add() function and add different behaviours at any point, or simply modify a previously created time line resource with new behaviours. Note that the function cannot require any additional arguments when using this function, and if you use it to modify a Timeline asset present in the Asset Browser, then all instances that use this timeline will be affected, and the change will last until the end of the game (calling game_restart() will not reset the change either).
 * @returns {Undefined}
 * @param {Asset.GMTimeline} ind - The index of the time line to add a moment to.
 * @param {Real} step - The moment (step) to add to.
 * @param {Any} script - The index of the script function to add into the moment.
 */
declare function timeline_moment_add_script(ind: GMTimeline,step: Real,script: Any): Undefined;

/**
 * With this function you can clear a specific moment of any previously defined time line of all codes and actions.
 * @returns {Undefined}
 * @param {Asset.GMTimeline} ind - The index of the time line to clear.
 * @param {Real} step - The moment to clear.
 */
declare function timeline_moment_clear(ind: GMTimeline,step: Real): Undefined;

/**
 * With this function you can get the total number of active moments for a timeline (an "active" moment is one which has GML Code or GML Visual added to it). This can be handy when creating dynamic timelines using the timeline_moment_add_script() and timeline_moment_clear() functions, as you can check to see if a given timeline has the correct number of active moments or none at all.
 * @returns {Real}
 * @param {Asset.GMTimeline} ind - The index of the timeline get the information from.
 */
declare function timeline_size(ind: GMTimeline): Real;

/**
 * This function opens a window and displays message as well as a space for the user to input a value (which will contain the supplied default value to start with). This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the "Okay" button, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.
 * @returns {Real}
 * @param {String} string - The message to show in the dialog.
 * @param {Real} default - The default value.
 */
declare function get_integer_async(string: String,default: Real): Real;

/**
 * This function opens a window that asks the user to input a username and password. These arguments can be set as an empty string or you can store previously entered values to use if you wish. This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has input the details and pressed the "Okay" button, an asynchronous User Interaction event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.
 * @returns {Real}
 * @param {String} username - The default user name
 * @param {String} password - The default password
 */
declare function get_login_async(username: String,password: String): Real;

/**
 * This function opens a window and displays message as well as a space for the user to input a string (which will contain the supplied default string to start with). This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has typed out their string and pressed the "Okay" button, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.
 * @returns {Real}
 * @param {String} string - The message to show in the dialog.
 * @param {String} default - The default string.
 */
declare function get_string_async(string: String,default: String): Real;

/**
 * This function opens up an OS dependent dialog where you can ask the user to post a rating or comment to a particular page. You can define the text that is to appear in the dialogue, as well as the text you wish to appear on the two buttons and the URL where the comment has to be posted.
 * @returns {Undefined}
 * @param {String} text - Text that appears on the dialog.
 * @param {String} yes_string - Text that appears on the "yes" button.
 * @param {String} no_string - Text that appears on the "no" button.
 * @param {String} url - The full URL where the comment has to be sent.
 */
declare function shop_leave_rating(text: String,yes_string: String,no_string: String,url: String): Undefined;

/**
 * This function opens a window and displays the message you define in the function to the user. This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. Once the user has pressed the "Okay" button, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a ds_map stored in the variable async_load.
 * @returns {Real}
 * @param {Any} string - The message to show to the user.
 */
declare function show_message_async(string: Any): Real;

/**
 * This function opens a window and displays the question you define in the function to the user. This is an asynchronous function, and as such GameMaker does not block the device it is being run on while waiting for an answer, but rather keeps on running events as normal. The function has two buttons that show "Yes" and "No", and once the user has pressed one, an asynchronous Dialog event is triggered which, for the duration of that event only, will have a DS map stored in the variable async_load.
 * @returns {Real}
 * @param {String} string - The question to ask to the user.
 */
declare function show_question_async(string: String): Real;

/**
 * With this function, you connect to the specified URL in order to retrieve information. As this is an asynchronous function, GameMaker will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an Async Event in any instance that has one defined in their object properties. You should also note that HTTP request parameters (the bits sometimes "tacked on" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function, for example:
 * @returns {Real}
 * @param {String} url - The web address of the server that you wish to get information from
 */
declare function http_get(url: String): Real;

/**
 * This function can be used to get the connect timeout used for HTTP requests. See http_set_connect_timeout() for details.
 * @returns {String}
 */
declare function http_get_connect_timeout(): String;

/**
 * With this function, you can connect to the specified URL in order to retrieve information in the form of a file. As this is an asynchronous function, GameMaker will not block while waiting for a reply, but will keep on running unless it gets callback information. This information will be in the form of a string and will trigger an Async Event in any instance that has one defined in their object properties.
 * @returns {Real}
 * @param {String} url - The web address of the server that you wish to get file from
 * @param {String} local_target - The local storage path to save the file to
 */
declare function http_get_file(url: String,local_target: String): Real;

/**
 * This function can be used to get the cross-origin type set for HTML5 games and will return a string (on all other platforms an empty string "" will be returned).
 * @returns {String}
 */
declare function http_get_request_crossorigin(): String;

/**
 * In computing, a post request is used when the client needs to send data to the server as part of the retrieval request, such as when uploading a file or submitting a completed form, and the same is true of this function in GameMaker. In contrast to the http_get() request method where only a URL is sent to the server, http_post_string() also includes a string that is sent to the server and may result in the creation of a new resource or the update of an existing resource or both. It should be noted that HTTP request parameters (the bits sometimes "tacked on" to the end of a URL when you submit a form on a web page) are perfectly acceptable when using this function too.
 * @returns {Real}
 * @param {String} url - The web address of the server that you wish to get information from
 * @param {String} string - The string you wish to send to the specified URL
 */
declare function http_post_string(url: String,string: String): Real;

/**
 * With this function, you can create an HTTP header request to define the operating parameters of an HTTP transaction, which can be used for many things like (for example) authentication via HTTP headers if you use RESTful APIs. The function requires the full IP address of the server to request from as well as the type of request to make (as a string, see the note below): "GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "OPTIONS", or "CONNECT". You will also need to supply a DS map of key/value pairs (as strings, where the key is the header field and the value is the required data for the header), and the final argument is an optional data string that you can add to the request, and if it's not needed then it can be either 0 or an empty string "". Note that you can also send a buffer (see the section on Buffers for more details), in which case the last argument would be the "handle" of the buffer to send.
 * @returns {Real}
 * @param {String} url - The web address of the server that you wish to get information from
 * @param {String} method - The request method (normally "POST" or "GET", but all methods are supported)
 * @param {Id.DsMap} header_map - A ds_map with the required header fields
 * @param {Any} body - The data to be transmitted following the headers (can be a binary buffer handle)
 */
declare function http_request(url: String,method: String,header_map: DsMap,body: Any): Real;

/**
 * With this function, you can set the timeout used when connecting to a server to make HTTP requests. This is only a guideline and requests may time out earlier or later depending on the network conditions and the operating system. Once set, this value applies to any future requests initiated until the function is called again.
 * @returns {Undefined}
 * @param {Real} connect_timeout_ms - The connect timeout (in milliseconds)
 */
declare function http_set_connect_timeout(connect_timeout_ms: Real): Undefined;

/**
 * With this function you can set the cross origin type to use when loading images from a file. The function is exclusively for the HTML5 platform and is only useful when loading sprites from a file using the sprite_add() function. Note that when set to "use-credentials" you no longer need to give an absolute path to the sprite being loaded, but instead would give a relative path (as shown in the example below). By default the cross origin type is set to "anonymous".
 * @returns {Undefined}
 * @param {String} origin_type - The cross origin type to use (a string)
 */
declare function http_set_request_crossorigin(origin_type: String): Undefined;

/**
 * This function is called when you want to begin the saving out of multiple buffers to multiple files. The "groupname" is a string and will be used as the directory name for where the files will be saved, and should be used as part of the file path when loading the files back into the IDE later (using any of the buffer_load() functions). This function is only for use with the buffer_save_async() function and you must also finish the save definition by calling buffer_async_group_end() function otherwise the files will not be saved out.
 * @returns {Undefined}
 * @param {String} groupname - The name of the group (as a string).
 */
declare function buffer_async_group_begin(groupname: String): Undefined;

/**
 * This function finishes the definition of a buffer save group. You must have previously called the function buffer_async_group_begin() to initiate the group, then call the function buffer_save_async() for each file that you wish to save out. Finally you call this function, which will start the saving of the files. The function will return a unique ID value for the save, which can then be used in the Asynchronous Save / Load event to parse the results from the async_load DS map.
 * @returns {Real}
 */
declare function buffer_async_group_end(): Real;

/**
 * With this function you can set some platform specific options for the buffer group being saved. The options available are as follows:
 * @returns {Undefined}
 * @param {String} option - The option to set.
 * @param {Any} value - The value to set (can be string or real, depending on the option).
 */
declare function buffer_async_group_option(option: String,value: Any): Undefined;

/**
 * With this function you can decode a base64 encoded string (created using the buffer_base64_encode() function) into a buffer. This function will create the buffer (as a 1 byte aligned "grow" buffer") and return the unique index for the buffer which should be used in all further function calls.
 * @returns {Id.Buffer}
 * @param {String} string - The base64 encoded string to decode
 */
declare function buffer_base64_decode(string: String): Buffer;

/**
 * With this function you can decode a base64 encoded string (created using the buffer_base64_encode() function) into a buffer. Unlike the function buffer_base64_decode(), this will not create a buffer for you, but rather you should already have created the buffer (see buffer_create()), the id of which you would then use with this function. The "offset" is the position within the buffer to decode the given string (in bytes).
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to decode the string into.
 * @param {String} string - The base64 encoded string to decode.
 * @param {Real} offset - The data offset value.
 */
declare function buffer_base64_decode_ext(buffer: Buffer,string: String,offset: Real): Undefined;

/**
 * This function will convert the data from the given buffer into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye. To use this you need to specify an already created buffer, the offset value (which is the point within the buffer at which you wish to start encoding) as well as the size, in bytes, of the buffer memory to encode.
 * @returns {String}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The data offset value.
 * @param {Real} size - The size of the buffer.
 */
declare function buffer_base64_encode(buffer: Buffer,offset: Real,size: Real): String;

/**
 * With this function you can compress part (or all) of a buffer using zlib compression. You supply the ID of the buffer to compress (as returned by buffer_create()), the offset within the buffer to use in bytes, and the size of the buffer data to compress (also in bytes). The function will return a new buffer ID value for the compressed buffer, or a value less than 0 if it has failed for any reason. This function will not alter the original buffer.
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to compress.
 * @param {Real} offset - The offset within the buffer to compress (in bytes).
 * @param {Real} size - The size of the buffer area to compress (in bytes).
 */
declare function buffer_compress(buffer: Buffer,offset: Real,size: Real): Real;

/**
 * This function can be used to copy a segment (or all) of the data stored in one buffer to another. When using two buffers and copying from one to the other, both buffers must have previously been created using the buffer_create() function (for example), and you can specify a data offset (in bytes) for the start point of the data to be copied from the source buffer relative to the start of the buffer, as well as another data offset to define the position to copy the data to in the destination buffer.
 * @returns {Undefined}
 * @param {Id.Buffer} src_buffer - The index of the buffer to copy from.
 * @param {Real} src_offset - The data offset to start copying from (in bytes).
 * @param {Real} size - The size of the data to copy (in bytes).
 * @param {Id.Buffer} dest_buffer - The index of the buffer to copy to.
 * @param {Real} dest_offset - The offset position to copy the data to (in bytes).
 */
declare function buffer_copy(src_buffer: Buffer,src_offset: Real,size: Real,dest_buffer: Buffer,dest_offset: Real): Undefined;

/**
 * This function can be used to copy multiple data entries from one buffer to another, with the ability to specify different strides between individual entries in both the source and the destination buffers. The function takes into account the types of both buffers. If a buffer has a fixed size or is not a wrap buffer, the copying process will stop when the read or write position exceeds the buffer's range. Initial read and write positions can be negative, in which case they are computed from the end of given buffer.
 * @returns {Undefined}
 * @param {Id.Buffer} src_buffer - The index of the buffer to copy from.
 * @param {Real} src_offset - The data offset to start copying from (in bytes). If negative, then the offset is computed from the end of the buffer.
 * @param {Real} src_size - The size of a single data entry (in bytes). Must be a non-negative value.
 * @param {Real} src_stride - The number of bytes from the beginning of one entry to the beginning of the following entry in the source buffer. If negative, then the source buffer is traversed backwards.
 * @param {Real} src_count - The number of data entries to copy. Must be a non-negative value.
 * @param {Id.Buffer} dest_buffer - The index of the buffer to copy to.
 * @param {Real} dest_offset - The offset position to copy the data to (in bytes). If negative, then the offset is computed from the end of the buffer.
 * @param {Real} dest_stride - The desired stride between entries when copied to the destination buffer (in bytes). If negative, then the destination buffer is traversed backwards.
 */
declare function buffer_copy_stride(src_buffer: Buffer,src_offset: Real,src_size: Real,src_stride: Real,src_count: Real,dest_buffer: Buffer,dest_offset: Real,dest_stride: Real): Undefined;

/**
 * This function can be used to copy some (or all) of the vertex data stored in one vertex buffer into a previously created regular buffer. When copying from a vertex buffer into a regular buffer with this function, both buffers must have previously been created (using the vertex_create_buffer() and buffer_create() functions, for example). You can specify the range of vertex data that you wish to copy into the buffer, where the start vertex can be anywhere between 0 and the number of vertices -1, and you can give the number of vertices from that point on to copy. You can use the function vertex_get_number() on the vertex buffer to get the total number of vertices stored. Finally you give the buffer index to copy the vertex data into, as well as a data offset to define the position to copy the vertex data to in the destination buffer.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} vertex_buffer - The index of the vertex buffer to copy from.
 * @param {Real} start_vertex - The starting vertex.
 * @param {Real} num_vertices - The total number of vertices to use.
 * @param {Id.Buffer} dest_buffer - The index of the buffer to copy to.
 * @param {Real} dest_offset - The offset position to copy the data to (in bytes).
 */
declare function buffer_copy_from_vertex_buffer(vertex_buffer: VertexBuffer,start_vertex: Real,num_vertices: Real,dest_buffer: Buffer,dest_offset: Real): Undefined;

/**
 * This function will take input data from a buffer and returns a crc32 checksum hash. You specify the buffer ID of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed, and the function will return a 32 bit integer value for that region.
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The data offset value.
 * @param {Real} size - The size of the buffer.
 */
declare function buffer_crc32(buffer: Buffer,offset: Real,size: Real): Real;

/**
 * You use this function to allocate a portion of memory as a buffer in your game, with the function returning the unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The buffer can then be used to store different types of data (specified when you write to the buffer using the buffer_write() function, with the following constants being used to define the buffer type:
 * @returns {Id.Buffer}
 * @param {Real} size - The size (in bytes) of the buffer.
 * @param {Constant.BufferType} type - The type of buffer to create (see the constants list above).
 * @param {Real} alignment - The byte alignment for the buffer
 */
declare function buffer_create(size: Real,type: BufferType,alignment: Real): Buffer;

/**
 * You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created vertex buffer. The function returns a unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function vertex_create_buffer(), for example) with the following constants being used to define the buffer type:
 * @returns {Id.Buffer}
 * @param {Id.VertexBuffer} vertex_buffer - The vertex buffer index to use.
 * @param {Constant.BufferType} type - The type of buffer to create (see the constants list above).
 * @param {Real} alignment - The byte alignment for the buffer
 */
declare function buffer_create_from_vertex_buffer(vertex_buffer: VertexBuffer,type: BufferType,alignment: Real): Buffer;

/**
 * You use this function to allocate a portion of memory as a buffer in your game filled with the data from a previously created vertex buffer. The function returns a unique buffer id that should be stored in a variable and used for all further function calls to the buffer. The function takes the id for the vertex buffer to use (as returned by the function vertex_create_buffer(), for example) with the following constants being used to define the buffer type:
 * @returns {Id.Buffer}
 * @param {Id.VertexBuffer} vertex_buffer - The vertex buffer index to use.
 * @param {Constant.BufferType} type - The type of buffer to create (see the constants list below).
 * @param {Real} alignment - The byte alignment for the buffer
 * @param {Real} start_vertex - The starting vertex.
 * @param {Real} num_vertices - The total number of vertices to copy.
 */
declare function buffer_create_from_vertex_buffer_ext(vertex_buffer: VertexBuffer,type: BufferType,alignment: Real,start_vertex: Real,num_vertices: Real): Buffer;

/**
 * With this function you can decompress a previously compressed buffer using zlib compression. You supply the buffer ID to decompress, and the function will return a new buffer ID that contains the uncompressed data. If the decompression has failed (for example, you are supplying a buffer that hasn't been compressed) then the function will instead return a value less than 0.
 * @returns {Id.Buffer}
 * @param {Id.Buffer} buffer - The index of the buffer to decompress.
 */
declare function buffer_decompress(buffer: Buffer): Buffer;

/**
 * With this function you can delete a buffer previously have created using the function buffer_create() from memory, releasing the resources used to create it and removing any data that it may currently contain.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to delete.
 */
declare function buffer_delete(buffer: Buffer): Undefined;

/**
 * This function can be used to check a variable to see if it holds a valid buffer ID value or not. If it does the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.Buffer} buffer - The index of the buffer to check.
 */
declare function buffer_exists(buffer: Buffer): Bool;

/**
 * This function can be used to fill a previously created buffer with a given data type and value. The data you fill the buffer with must be in agreement with the "type" argument of this function, meaning that you can't try to fill with a string and use the unsigned 16bit integer type, for example. The type constants are the same as those used by the buffer_read() and buffer_write() functions. The "size" is the size of the buffer (in bytes) that you wish to fill, while the offset is the offset value (also in bytes) from the start of the buffer to start the fill from.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to fill.
 * @param {Real} offset - The data offset value (in bytes).
 * @param {Constant.BufferDataType} type - The type of data that is to be written to the buffer (see the list of constants here).
 * @param {Any} value - The data to write.
 * @param {Any} size - The size of the buffer (in bytes) that you wish to fill.
 */
declare function buffer_fill(buffer: Buffer,offset: Real,type: BufferDataType,value: Any,size: Any): Undefined;

/**
 * With this function you can get a pointer to the raw, aligned buffer address. This is primarily for use with extensions as you can pass this value through to them, allowing them to access the buffer data. Note that there are a few things you cannot do with the buffer when accessing from an extension:
 * @returns {Pointer}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 */
declare function buffer_get_address(buffer: Buffer): Pointer;

/**
 * With this function you can get the a byte alignment for the given buffer ID.
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to check.
 */
declare function buffer_get_alignment(buffer: Buffer): Real;

/**
 * With this function you can get the size of the given buffer in bytes.
 * @returns {Real}
 * @param {Id.Buffer} index - The index of the buffer to get the size of.
 */
declare function buffer_get_size(index: Buffer): Real;

/**
 * With this function you can write information from a surface to a given buffer. The buffer must have been created previously and should be a 1-byte aligned buffer large enough to store data for the surface you are going to write (if unsure, use a grow buffer or see the example at the bottom of this page).
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Id.Surface} surface - The index of the surface to use.
 * @param {Real} offset - The data offset value (in bytes).
 */
declare function buffer_get_surface(buffer: Buffer,surface: Surface,offset: Real): Undefined;

/**
 * With this function you can write information from a surface's depth buffer to a given buffer. The buffer must have been created previously and should be a 1-byte aligned buffer large enough to store data for the surface you are going to write (if unsure, use a grow buffer or see the example at the bottom of this page).
 * @returns {Bool}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Id.Surface} surface - The index of the surface whose depth buffer to use.
 * @param {Real} offset - The data offset value (in bytes).
 */
declare function buffer_get_surface_depth(buffer: Buffer,surface: Surface,offset: Real): Bool;

/**
 * With this function you retrieve the type of buffer that is being referenced by a buffer ID value. The return value will be one of the following constants:
 * @returns {Constant.BufferType}
 * @param {Id.Buffer} buffer - The index of the buffer to check.
 */
declare function buffer_get_type(buffer: Buffer): BufferType;

/**
 * This function is used to load a buffer that was previously saved using the buffer_save() functions, as well as any Included Files or files loaded externally. It will return a new buffer's ID which is created by the function as a "grow" buffer (see here) with a byte alignment of 1. This ID should be stored in a variable and used in all further function calls to this buffer. If the load fails for whatever reason, the function will return -1 and a message will be shown in the compiler output window saying that the load has failed.
 * @returns {Id.Buffer}
 * @param {String} filename - The name of the file to load from.
 */
declare function buffer_load(filename: String): Buffer;

/**
 * With this function you can load a file that you have created previously using the buffer_save() function (or any of the other functions for saving buffers) into a buffer. The "offset" defines the start position within the buffer for loading (in bytes), and the "size" is the size of the buffer area to be loaded from that offset onwards (also in bytes). You can supply a value of -1 for the size argument and the entire buffer will be loaded. Note that the function will load from a "default" folder, which does not need to be included as part of the file path you provide. This folder will be created if it doesn't exist or when you save a file using buffer_save_async().
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to load.
 * @param {String} filename - The name of the file to load.
 * @param {Real} offset - The offset within the buffer to load to (in bytes).
 * @param {Real} size - The size of the buffer area to load (in bytes).
 */
declare function buffer_load_async(buffer: Buffer,filename: String,offset: Real,size: Real): Real;

/**
 * This function will load the buffer data that was previously saved using the buffer_save() functions into an already created buffer. You give the id of the previously created buffer to load into, then the saved buffer file to load, and finally the offset from the start of the buffer (in bytes) that you wish to load the data to.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to load into.
 * @param {String} filename - The name of the file to load from.
 * @param {Real} offset - The offset within the buffer to load to (in bytes).
 */
declare function buffer_load_ext(buffer: Buffer,filename: String,offset: Real): Undefined;

/**
 * This function will load some of the buffer data that was previously saved using the buffer_save() functions into an already created buffer. You give the id of the previously created buffer to load into, then the saved buffer file to load, and then the offset from the start of the buffer (in bytes) that you wish to load the data from. The following arguments are for setting the length of the buffer data (in bytes) from the initial offset point that you wish to load and the offset point to load the data to in the buffer (again, in bytes).
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to load.
 * @param {String} filename - The name of the file to load.
 * @param {Real} offset - The offset within the buffer to load to (in bytes).
 * @param {Real} src_len - The length of the part of the buffer to load (in bytes).
 * @param {Real} dest_offset - The offset where to start putting the partial data in the new buffer (in bytes).
 */
declare function buffer_load_partial(buffer: Buffer,filename: String,offset: Real,src_len: Real,dest_offset: Real): Real;

/**
 * In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hashing function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of data. This function will take the input data from a given buffer (or part of the buffer) and return the 32-character hexadecimal MD5 hash that is unique to that data. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed.
 * @returns {String}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The data offset value.
 * @param {Real} size - The size of the buffer.
 */
declare function buffer_md5(buffer: Buffer,offset: Real,size: Real): String;

/**
 * The buffer_peek function reads a piece of data of a certain type from the given buffer at an arbitrary offset position (in bytes). Opposite to buffer_read() this function however, doesn't use or change the buffer's current "seek" position.
 * @returns {ArgumentIdentity}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The offset position (in bytes) within the buffer to read the given data from.
 * @param {Constant.BufferDataType} type - The type of data that is to be read from the buffer (see the list of constants here).
 */
declare function buffer_peek(buffer: Buffer,offset: Real,type: BufferDataType): ArgumentIdentity;

/**
 * With this function you can write data into a buffer at the specified offset, without changing the seek position. This is different from buffer_write(), which uses the current seek position as the offset and advances that with the amount of bytes written.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The offset position (in bytes) within the buffer to write the given data to.
 * @param {Constant.BufferDataType} type - The type of data that is to be written to the buffer (see the list of constants here).
 * @param {Any} value - The data to add to the buffer, in accordance with the type specified.
 */
declare function buffer_poke(buffer: Buffer,offset: Real,type: BufferDataType,value: Any): Undefined;

/**
 * This function can be used to read data from a previously created buffer. The return value will depend on the type of data that you are reading, which in itself is defined by one of the BufferDataType constants.
 * @returns {ArgumentIdentity}
 * @param {Id.Buffer} buffer - The index of the buffer to read from.
 * @param {Constant.BufferDataType} type - The type of data that is to be read from the buffer (see the list of constants above).
 */
declare function buffer_read(buffer: Buffer,type: BufferDataType): ArgumentIdentity;

/**
 * With this function you can resize a given buffer to be the size (in bytes) that you specify.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to change the size of.
 * @param {Real} newsize - The new size of the buffer (in bytes).
 */
declare function buffer_resize(buffer: Buffer,newsize: Real): Undefined;

/**
 * With this function you can save the contents of a buffer to a file, ready to be read back into memory using the buffer_load() function.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to save.
 * @param {String} filename - The name of the file to save as.
 */
declare function buffer_save(buffer: Buffer,filename: String): Undefined;

/**
 * With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the buffer_load() function (or any of the other functions for loading buffers). The "offset" defines the start position within the buffer for saving (in bytes), and the "size" is the size of the buffer area to be saved from that offset onwards (also in bytes). This function works asynchronously, and so the game will continue running while being saved, and all files saved using this function will be placed in a "default" folder. This folder does not need to be included in the filename as it is added automatically by GameMaker. For example the filename path "Data\Player_Save.sav" would actually be saved to "default\Data\Player_Save.sav". However, if you then load the file using the function buffer_load_async(), you do not need to supply the "default" part of the path either (but any other file function will require it, except on consoles Xbox One, PS4 and Nintendo Switch).
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to save.
 * @param {String} filename - The name of the file to save as.
 * @param {Real} offset - The offset within the buffer to save from (in bytes).
 * @param {Real} size - The size of the buffer area to save (in bytes).
 */
declare function buffer_save_async(buffer: Buffer,filename: String,offset: Real,size: Real): Real;

/**
 * With this function you can save part of the contents of a buffer to a file, ready to be read back into memory using the buffer_load() function. The "offset" defines the start position within the buffer for saving (in bytes), and the "size" is the size of the buffer area to be saved from that offset onwards (also in bytes).
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to save.
 * @param {String} filename - The name of the file to save as.
 * @param {Real} offset - The offset within the buffer to save from (in bytes).
 * @param {Real} size - The size of the buffer area to save (in bytes).
 */
declare function buffer_save_ext(buffer: Buffer,filename: String,offset: Real,size: Real): Undefined;

/**
 * This function can be used to move through a buffer, finding the start, the end, or a position relative to that which was last used when reading or writing data. The "offset" value is the offset (in bytes) to add to the given seek position, for example, if the base is relative and the offset is 4, then the buffer position will move along 4 bytes from its current position. Please note the following:
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Constant.SeekOffset} base - The base position to seek.
 * @param {Real} offset - The data offset value.
 */
declare function buffer_seek(buffer: Buffer,base: SeekOffset,offset: Real): Undefined;

/**
 * With this function you can write information from a buffer to a given surface. Both the buffer being read from and the surface being written to must have been created previously, and you can provide an offset into the buffer to start reading from. Note that reading will always start at the beginning of the buffer plus the offset value and not at the current seek position plus the offset value.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Id.Surface} surface - The index of the surface to use.
 * @param {Real} offset - The data offset value.
 */
declare function buffer_set_surface(buffer: Buffer,surface: Surface,offset: Real): Undefined;

/**
 * With this function you can write information from a buffer to a depth buffer of a given surface. Both the buffer being read from and the surface being written to must have been created previously, and you can provide an offset into the buffer to start reading from. Note that reading will always start at the beginning of the buffer plus the offset value and not at the current seek position plus the offset value.
 * @returns {Bool}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Id.Surface} surface - The index of the surface whose depth buffer to use.
 * @param {Real} offset - The data offset value.
 */
declare function buffer_set_surface_depth(buffer: Buffer,surface: Surface,offset: Real): Bool;

/**
 * This function is primarily for use within extensions, and allows you to get the "used" size of the given buffer, which is the number of bytes that have been written to it.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 */
declare function buffer_get_used_size(buffer: Buffer): Undefined;

/**
 * This function is primarily for use within extensions, and allows you to set the "used" size of the given buffer, which is the number of bytes that have been written to it.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} size - The number of bytes to set as the "used" size.
 */
declare function buffer_set_used_size(buffer: Buffer,size: Real): Undefined;

/**
 * In cryptography, SHA-1 is a cryptographic hashing function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular Git where it is used to check for file changes. This function will take input data from a buffer and returns a 160 bit message digest in ASCII format. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example). When applying this to buffers using this function you must specify the buffer id of the buffer to use, then an offset value (in bytes) for where to begin, and then a size (again in bytes) for the region to be hashed.
 * @returns {String}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 * @param {Real} offset - The data offset value.
 * @param {Real} size - The size of the buffer.
 */
declare function buffer_sha1(buffer: Buffer,offset: Real,size: Real): String;

/**
 * This function will return the size (in bytes) of any of the given data constants (listed here).
 * @returns {Real}
 * @param {Constant.BufferDataType} type - The type of data that is to be checked (see the list of constants here).
 */
declare function buffer_sizeof(type: BufferDataType): Real;

/**
 * When you read or write data to a buffer using the buffer_read() or buffer_write() the current "seek" position is advanced by the bytes written or read, and with this function you can get the current "seek" position for use in other buffer functions. For example, if your buffer alignment is set to 4 bytes and you write a single piece of data which is 1 byte in size then do a buffer_tell(), you'll get an return value of 1. However, if you write another piece of data, also 1 byte in size, then do a buffer_tell(), you'll get a return value of 5 as the alignment has "padded" the data to that position.
 * @returns {Real}
 * @param {Id.Buffer} buffer - The index of the buffer to use.
 */
declare function buffer_tell(buffer: Buffer): Real;

/**
 * This function can be used to write data to a previously created buffer. The data you write must be in agreement with the "type" argument of this function, meaning that you can't try to write a string as an unsigned 16bit integer, for example. The following constants can be used to define the data type:
 * @returns {Any}
 * @param {Id.Buffer} buffer - The index of the buffer to write to.
 * @param {Constant.BufferDataType} type - The type of data that is to be written to the buffer (see the list of constants above).
 * @param {Any} value - The data to write.
 */
declare function buffer_write(buffer: Buffer,type: BufferDataType,value: Any): Any;

/**
 * Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60 and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.
 * @returns {Real}
 */
declare function display_get_dpi_x(): Real;

/**
 * Dots per inch (DPI) is a measure of spatial printing or video dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm). When working on mobile devices (in particular Android devices) this is an important factor to take into consideration as what may be appropriate for one display resolution, may not be appropriate for another. For example, you may have two displays with the same resolution of 400 x 800, but display 1 has a dpi of 60 and display 2 has a dpi of 30. In this case, any text or image displayed on display 2 will appear much larger, even though the actual resolution is the same.
 * @returns {Real}
 */
declare function display_get_dpi_y(): Real;

/**
 * With this function you can get the width (in pixels) of the GUI as used in the Draw GUI Event.
 * @returns {Real}
 */
declare function display_get_gui_width(): Real;

/**
 * This function will return the height of the display (in pixels). Note that on the HTML5 target, this value is the height of the browser window, rather than the physical display size.
 * @returns {Real}
 */
declare function display_get_height(): Real;

/**
 * This function will return one of two constants GameMaker has to tell you whether the device running the game is being held in landscape or portrait mode (see the table below). Note that this function may not correctly detect the orientation of the device when used in the HTML5 target module. However this is easily mimicked by the use of the following script:
 * @returns {Real}
 */
declare function display_get_orientation(): Real;

/**
 * This function can be used to get the current sleep margin value used for the render timing of your game, and will return a millisecond value. For more information on display timing, please see display_set_timing_method().
 * @returns {Real}
 */
declare function display_get_sleep_margin(): Real;

/**
 * This function can be used to retrieve the timing method to be used for rendering your game. The method can be one of the constants listed below.
 * @returns {Real}
 */
declare function display_get_timing_method(): Real;

/**
 * This function will return the width of the display (in pixels). Note that on the HTML5 target, this value is the width of the browser window, rather than the physical display size.
 * @returns {Real}
 */
declare function display_get_width(): Real;

/**
 * This function will return the mouse x position within the screen. It should be noted that this function only works properly when used on the Windows target. It can be used for HTML5 too, but will only return a value relative to the 0,0 of the canvas itself, and will not return any value while the mouse is outside of the canvas. For other devices it will return 0, and you should use the device_mouse_raw_x()and device_mouse_raw_y() functions instead.
 * @returns {Real}
 */
declare function display_mouse_get_x(): Real;

/**
 * This function will return the mouse y position within the screen. It should be noted that this function only works properly when used on the Windows target. It can be used for HTML5 too, but will only return a value relative to the 0,0 of the canvas itself, and will not return any value while the mouse is outside of the canvas. For other devices it will return 0, and you should use the device_mouse_raw_x() and device_mouse_raw_y() functions instead.
 * @returns {Real}
 */
declare function display_mouse_get_y(): Real;

/**
 * With this function you can change or set the position of the mouse within the game display which can be useful for FPS games, for example. The function will only work while the game is in focus and using ALT + Tab will unlock the mouse.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate in the display.
 * @param {Real} y - The y coordinate in the display.
 */
declare function display_mouse_set(x: Real,y: Real): Undefined;

/**
 * This function Resets the display settings to the ones that were set when the game was started, but also allows you to change the current level of full screen anti-aliasing being used and whether to use vertical synchronisation. The available anti-aliasing levels are 0,2,4 and 8, with the default startup value being set to 0, and the default v-sync setting is false (off). Switching v-sync on may give a smoother gaming experience but it will also need more processing power and so its impact must be considered careful before use, and the same goes for the anti-aliasing where the higher the number the more processing that is required.
 * @returns {Real}
 * @param {Real} aa - The level of anti-aliasing filtering (0, 2, 4 or 8).
 * @param {Bool} vsync - Toggle vertical synchronisation to on (true) or off (false).
 */
declare function display_reset(aa: Real,vsync: Bool): Real;

/**
 * This function will only affect things drawn in the Draw GUI Event and can be used to set a specific width and height for all GUI components in that event, and no matter what size of display or window is used to display the GUI, it will be scaled to fit correctly. Where the GUI is positioned (ie: the (0,0) position) will depend on whether you have used the function display_set_gui_maximise() or not. If you do not use this function (the default setting) then the GUI layer will be positioned with its (0,0) point at the same position as that for the application surface (the area where your game is being drawn) and the width and height will be stretched to fit the this surface, such that setting a GUI width of 256px with this function when the application surface is 512px would stretch those 256 pixels to fit, effectively making the pixels twice as large. This is ideal for those games that have aspect ratio correction set in the global Game Settings.
 * @returns {Undefined}
 * @param {Real} width - The width of the GUI
 * @param {Real} height - The height of the GUI
 */
declare function display_set_gui_size(width: Real,height: Real): Undefined;

/**
 * This function can be used to set the sleep margin value used for the render timing of your game, and requires a millisecond value. The default values are as follows:
 * @returns {Undefined}
 * @param {Real} milliseconds - The number of milliseconds for the sleep margin
 */
declare function display_set_sleep_margin(milliseconds: Real): Undefined;

/**
 * This function can be used to set the timing method to be used for rendering your game. The method can be one of the following constants:
 * @returns {Undefined}
 * @param {String} method - The timing method to use (see the list of constants, above)
 */
declare function display_set_timing_method(method: String): Undefined;

/**
 * This function can be used to show or hide the system UI on Android only. The function requires you to supply one or more system flags as an integer value. When using more than a single flag, these need to be merged using the bitwise "or", as shown in the example below. You can find a list of Android system flags here.
 * @returns {Undefined}
 * @param {Real} flags - The Android SYSTEM flags to use (as an integer value).
 */
declare function display_set_ui_visibility(flags: Real): Undefined;

/**
 * With this function you can save a frame to a GIF file from a surface. You supply the GIF file ID (as returned by the function gif_open()) and a surface ID (as returned by the function surface_create()), as well as a delay time between frames. The delay time is calculated in 1/100ths of a second, but note that once the GIF has been created, if you use it for promotional purposes for example, different browsers may interpret the frame delay slightly differently - see here for more details. You may (optionally) supply X and Y offset values for the surface being used to add to the GIF, in which case the part drawn to the GIF will begin from the offset and not the default (0,0) position, permitting you to select only a section of the surface to add. You can also supply a quantization value, which is an integer between 0 and 3, where 0 is full quantization and 3 is zero quantization (lower values will have a subsequent degradation in quality, but create a smaller GIF). Note that there isn't much difference between the default quality of 2, and the highest of 3, and using 3 will significantly slow down the creation of the GIF so care should be taken when using the maximum value.
 * @returns {Real}
 * @param {Id.Gif} gif_index - The ID of gif to add the surface data to
 * @param {Id.Surface} surface - The ID of the surface to use as the added frame
 * @param {Real} delay_time - The delay time for the frame (in 100ths of a second)
 * @param {Real} xoffset - [Optional] The offset along the X axis of the surface to add from
 * @param {Real} yoffset - [Optional] The offset along the Y axis of the surface to add from
 * @param {Real} quantization - [Optional] The quantization amount from 0 to 3 (0 lowest quality, 3 highest quality, default is 2)
 */
declare function gif_add_surface(gif_index: Gif,surface: Surface,delay_time: Real,xoffset: Real,yoffset: Real,quantization: Real): Real;

/**
 * With this function you can create an empty GIF format image, ready to have data added to it. When you call the function, you need to specify the width and height of the GIF (in pixels, and there is no upper limit on size except for available memory), and the function will return the unique ID value used to identify the gift in subsequent functions, or it will return -1 if the gif could not be initialized (for example, if the width/height are too big for the memory available). You may also specify an optional argument to set the "clear colour" for the GIF. This is an RGB value (no alpha component), and will clear the gif to this colour before anything is added to it. If you do not supply a clear colour argument, the default colour of black will be used.
 * @returns {Id.Gif}
 * @param {Real} width - The width of the gif to create
 * @param {Real} height - The height of the gif to create
 * @param {Constant.Color} clear_colour - [Optional] The colour (RGB) to clear the gif to
 */
declare function gif_open(width: Real,height: Real,clear_colour: Color): Gif;

/**
 * With this function you can save out a GIF animation. You supply the GIF index (as returned by the function gif_open()) as well as a filename to save it with. Note that GameMaker does not automatically append the .gif file extension, so you should include this as part of the filename string if you wish the saved file to be identified as a GIF. The created GIF will be palletized using the Universal 884 Palette (see here for more information).
 * @returns {Real}
 * @param {Id.Gif} gif_index - The ID of gif to save
 * @param {String} fname - The filename to use for the gif
 */
declare function gif_save(gif_index: Gif,fname: String): Real;

/**
 * With this function you can save out a GIF animation. You supply the GIF index (as returned by the function gif_open()) and the function will return a 1 byte-aligned grow buffer with the GIF data. Note that the final GIF data will have been palletized using the Universal 884 Palette (see here for more information).
 * @returns {Real}
 * @param {Id.Gif} gif_index - The ID of gif to save
 */
declare function gif_save_buffer(gif_index: Gif): Real;

/**
 * With this function you can save a screenshot of the game as it currently appears in the game window. The file will be saved to the working directory of the game, which in windows is located at <drive>:/Users/YOURUSERNAME/AppData/Local/[Game Name]/ and on Mac it would be ~/Library/Application Support/[Game Name]/. The image captured will be the final render of the application surface of the game, or (if the app surface has been disabled) it will be an image of the whole display or window. It is important to note that the function is designed to be called in the Draw GUI End Event, which should give consistent results across all platforms. Using it in any other event may not work as expected, and may give different results across different targets and even devices. Should you need more control over what is being saved, you should use the function screen_save_part().
 * @returns {Undefined}
 * @param {String} fname - The filename for the screenshot to save
 */
declare function screen_save(fname: String): Undefined;

/**
 * With this function you can save a screenshot of a part of the game as it currently appears in the game display. The selection coordinates are based on the absolute size of the display (or window if not fullscreen), so (0,0) is always the top left hand corner of the screen (or window). Below is an image that shows how this function works:
 * @returns {Undefined}
 * @param {String} fname - The filename for the screenshot to save
 * @param {Real} x - The x coordinate of the top left corner of the area of the screen to capture
 * @param {Real} y - The y coordinate of the top left corner of the area of the screen to capture
 * @param {Real} w - The width of the area of the screen to capture
 * @param {Real} h - The height of the area of the screen to capture
 */
declare function screen_save_part(fname: String,x: Real,y: Real,w: Real,h: Real): Undefined;

/**
 * This function will apply the given camera settings to the current camera view being rendered immediately. While you can set any view camera using the specific camera_set_* functions, the new settings will not be used for rendering until the next game frame, but with this function you can make those changes immediately. If you are using multiple views then the function should be used in the Draw Event and you can use the variable view_current to selectively apply the given camera only to the camera view currently being rendered. Note that this does NOT change the camera ID value, only the settings for that camera, and that if you use this function on the default camera (ie: the internal camera GameMaker uses when no view cameras are active) the changes will be overwritten the very next game frame by the internal settings for drawing the room.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 */
declare function camera_apply(camera_id: Camera): Undefined;

/**
 * This function will copy the transforms from one camera to another.
 * @returns {Undefined}
 * @param {Id.Camera} dest_camera_id - The unique camera ID value for the camera the values will be copied to.
 * @param {Id.Camera} src_camera_id - The unique camera ID value for the camera the values will be copied from.
 */
declare function camera_copy_transforms(dest_camera_id: Camera,src_camera_id: Camera): Undefined;

/**
 * This function will create an "empty" camera, ie: a camera with no view or projection settings defined. Once you have created the camera you can then use the different matrix functions to set the view and projection matrices. You can also use this function to create the camera and then use the different camera_set_* functions to set up the view, however note that you must provide at least a position and view size, otherwise the resulting camera will not be valid and give odd results if applied to a view port (if you do not set the object following, borders or move speed these will be set to the default values for a view camera in the Room Editor).
 * @returns {Id.Camera}
 */
declare function camera_create(): Camera;

/**
 * This function will create a new camera and then set its view into the room, before return the unique ID value to identify the camera in future function calls. The camera will be created using the values that you set in this function for position, size and other details which correlate to the values you set in the Room Editor (see here). Note that this function can take a variable number of arguments with only the x/y position and width/height arguments being obligatory. Any arguments not supplied will use their default arguments.
 * @returns {Id.Camera}
 * @param {Real} room_x - The x position (within the room) of the left side of the area the camera view captures.
 * @param {Real} room_y - The y position (within the room) of the top of the area the camera view captures.
 * @param {Real} width - The width of the area the view captures.
 * @param {Real} height - The height of the area the view captures.
 * @param {Real} angle - The angle to set the for the camera view(from 0░ - 360░, default is 0).
 * @param {Any} object - The object ID (or instance ID) for the camera view to follow (default is -1, no object).
 * @param {Real} x_speed - The maximum horizontal speed the view can move at (set to -1 for "instant" following, default is -1).
 * @param {Real} y_speed - The maximum vertical speed the view can move at (set to -1 for "instant" following, default is -1).
 * @param {Real} x_border - The minimum horizontal space between the edge of the view area and the instance it is set to follow (before the view begins moving and if it is set to follow an instance, default is 0).
 * @param {Real} y_border - The minimum vertical space between the edge of the view area and the instance it is set to follow (before the view begins moving and if it is set to follow an instance, default is 0).
 */
declare function camera_create_view(room_x: Real,room_y: Real,width: Real,height: Real,angle: Real,object: Any,x_speed: Real,y_speed: Real,x_border: Real,y_border: Real): Camera;

/**
 * With this function you can destroy any camera. When calling the function you supply the unique camera ID value, which you get from the camera_create_* functions or from the view_camera array if using the Room Editor to set up the view port and view. You should never destroy a camera that is currently assigned to a visible view, unless you are assigning a new camera to that view in the same step, and you should always destroy any cameras that you have created through code when no longer required by your game to prevent memory leaks, and you can also destroy the default cameras if you have any assigned in the Room Editor, but you should assign a new camera to the view port (or disable it) otherwise you will get odd results.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 */
declare function camera_destroy(camera_id: Camera): Undefined;

/**
 * This function can be used to retrieve the unique camera ID value of the currently active camera.
 * @returns {Id.Camera}
 */
declare function camera_get_active(): Camera;

/**
 * This function can be used to retrieve the ID of the script function assigned as the begin script for the given camera. If no script function is assigned then the function will return -1.
 * @returns {Function}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_begin_script(camera_id: Camera): Function;

/**
 * This function can be used to retrieve the unique camera ID value of the default camera (the camera that GameMaker uses when no camera views or ports are active in a game room).
 * @returns {Id.Camera}
 */
declare function camera_get_default(): Camera;

/**
 * This function can be used to retrieve the ID of the script function assigned as the end function for the given camera. If no script function is assigned then the function will return -1.
 * @returns {Function}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_end_script(camera_id: Camera): Function;

/**
 * This function can be used to retrieve the projection matrix. The function returns the matrix ID value which can then be used in other matrix functions or to set the projection matrix of another camera (using camera_set_proj_mat()).
 * @returns {Array[Real]}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_proj_mat(camera_id: Camera): Array[Real];

/**
 * This function can be used to retrieve the ID of the script function assigned as the update script for the given camera. If no script is assigned then the function will return -1.
 * @returns {Function}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_update_script(camera_id: Camera): Function;

/**
 * This function can be used to retrieve the angle of the given camera. The return value will be between 0 and 360. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_angle(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the border value for object/instance following of the given camera along the x axis (horizontal border). The return value will be in pixels.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_border_x(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the border value for object/instance following of the given camera along the y axis (vertical border). The return value will be in pixels.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_border_y(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the height (in pixels) of the given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_height(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the view matrix. The function returns the matrix ID value which can then be used in other matrix functions or to set the view matrix of another camera (using camera_set_view_mat()). Note that this function is generally for use with cameras created using camera_create(), but it can also be used on those created in the room editor (or with camera_create_view()) - in which case the returned matrix will only be valid after the given camera is used in a view port for the first time.
 * @returns {Array[Real]}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_mat(camera_id: Camera): Array[Real];

/**
 * This function can be used to retrieve the movement speed of the given camera along the x axis (horizontal movement). The return value will be in pixels per game frame.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_speed_x(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the movement speed of the given camera along the y axis (vertical movement). The return value will be in pixels per game frame.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_speed_y(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the follow target of the given camera. The return value can be an object index, an instance ID or -1 if no follow target has been set.
 * @returns {Id.Instance}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_target(camera_id: Camera): Instance;

/**
 * This function can be used to retrieve the width (in pixels) of the given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_width(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the x position of the view for a given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_x(camera_id: Camera): Real;

/**
 * This function can be used to retrieve the y position of the view for a given camera. Note that this function is only valid for cameras created using camera_create_view() or for those added in the room editor.
 * @returns {Real}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_get_view_y(camera_id: Camera): Real;

/**
 * This function can be used to set a script function that will be called at the beginning of every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned by the different camera_create() functions) and the ID of the function to be called. The order in which scripts attached to cameras and the actual rendering of the camera view is as follows:
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Any} script - The script function to run each game frame
 */
declare function camera_set_begin_script(camera_id: Camera,script: Any): Undefined;

/**
 * This function can be used to set the default camera to use a custom camera that you have previously created using one of the camera_create() functions. When you create a room with no active view ports or view cameras, GameMaker still uses a camera to show the action in the game. This camera is called the default camera and can be set and manipulated (and even destroyed) just like any other camera.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function camera_set_default(camera_id: Camera): Undefined;

/**
 * This function can be used to set a script function that will be called at the end of every game frame that the camera is assigned to a visible and active view port, after everything for that view camera has been rendered. You give the unique camera ID value (as returned by the different camera_create() functions) and the ID of the function to be called. The order in which functions attached to cameras and the actual rendering of the camera view is as follows:
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Any} script - The script to run each game frame
 */
declare function camera_set_end_script(camera_id: Camera,script: Any): Undefined;

/**
 * This function will set the projection matrix for a given camera. You give the unique camera ID value (as returned by the different camera_create() functions) and a projection matrix to be applied. You can find out more about creating projection matrices from the section Matrix Functions, specifically matrix_build_projection_perspective() and matrix_build_projection_ortho().
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Array} matrix - The unique matrix ID returned when you created the matrix.
 */
declare function camera_set_proj_mat(camera_id: Camera,matrix: Array): Undefined;

/**
 * This function can be used to set a script function that will be called every game frame that the camera is assigned to a visible and active view port. You give the unique camera ID value (as returned by the different camera_create functions) and the ID of the function to be called. The order in which functions attached to cameras and the actual rendering of the camera view is as follows:
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Any} script - The script function to run each game frame
 */
declare function camera_set_update_script(camera_id: Camera,script: Any): Undefined;

/**
 * You can use this function to update the angle of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the angle that you wish to set the camera view to. The default value is 0░ with positive values rotating the camera counter-clockwise, ie: setting the value to 90 will rotate the camera 90░ to the left.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 * @param {Real} angle - The new angle to set the camera view to
 */
declare function camera_set_view_angle(camera_id: Camera,angle: Real): Undefined;

/**
 * You can use this function to set the follow border of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create functions) and then give the x border size and the y border size (horizontal and vertical). These values will only be used when the view camera has been assigned an instance target to follow (either in the Room Editor or using the function camera_set_view_target()) and relate to how far from the border of the view the instance needs to be before the view will update its position to follow.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Real} x_border - The border (in pixels) for the view camera along the horizontal axis
 * @param {Real} y_border - The border (in pixels) for the view camera along the vertical axis
 */
declare function camera_set_view_border(camera_id: Camera,x_border: Real,y_border: Real): Undefined;

/**
 * This function will set the view matrix for a given camera. You give the unique camera ID value (as returned by the different camera_create() functions) and a view matrix to be applied. You can find out more about creating view matrices from the section Matrix Functions, specifically matrix_build_lookat().
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Array} matrix - The unique matrix ID returned when you created the matrix.
 */
declare function camera_set_view_mat(camera_id: Camera,matrix: Array): Undefined;

/**
 * You can use this function to update the position of the camera view within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the x and y positions to set the camera to.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Real} x - The x position to place the view at (in the room)
 * @param {Real} y - The y position to place the view at (in the room)
 */
declare function camera_set_view_pos(camera_id: Camera,x: Real,y: Real): Undefined;

/**
 * You can use this function to update the size of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the width and height (in pixels) to set the camera to.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Real} width - The width of the camera view in pixels
 * @param {Real} height - The height of the camera view in pixels
 */
declare function camera_set_view_size(camera_id: Camera,width: Real,height: Real): Undefined;

/**
 * You can use this function to update the speed of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the x and y (horizontal and vertical) speed that it should move when set to follow a given instance. The speed is calculated as pixels per step and can be set to "-1" to make the camera move instantly, but if the camera is not set to follow any instance then the values set here will have no visible effect.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera.
 * @param {Real} xspeed - The speed (number of pixels per game frame) that the view should move on the horizontal (x) axis
 * @param {Real} yspeed - The speed (number of pixels per game frame) that the view should move on the vertical (y) axis
 */
declare function camera_set_view_speed(camera_id: Camera,xspeed: Real,yspeed: Real): Undefined;

/**
 * You can use this function to set the follow target of the view camera within the room. You give the unique camera ID value (as returned by the different camera_create() functions) and then give the target instance or object ID that you wish to set the camera view to. Note that if you choose an object ID and there is more than one instance of that object in the room, there is no way for GameMaker to know which instance you wish to follow and so it could be any of them.
 * @returns {Undefined}
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 * @param {Any} instance_id/object_id - Instance or object to have the camera target for following
 */
declare function camera_set_view_target(camera_id: Camera,instance_id/object_id: Any): Undefined;

/**
 * This function can be used to retrieve the unique camera ID value for the camera assigned to the given view port (from 0 - 7). If no camera is assigned, the function will return -1.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_camera(view_port: Real): Real;

/**
 * This function can be used to retrieve the height of the given view port.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_hport(view_port: Real): Real;

/**
 * This function can be used to retrieve the unique ID value for the surface assigned to the given view port (will return -1 if no surface has been assigned).
 * @returns {Id.Surface}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_surface_id(view_port: Real): Surface;

/**
 * This function can be used to check the visibility of the given view port. The function will return true if it is visible and false if it is not.
 * @returns {Bool}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_visible(view_port: Real): Bool;

/**
 * This function can be used to retrieve the width of the given view port.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_wport(view_port: Real): Real;

/**
 * This function can be used to retrieve the x position of the given view port.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_xport(view_port: Real): Real;

/**
 * This function can be used to retrieve the y position of the given view port.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 */
declare function view_get_yport(view_port: Real): Real;

/**
 * This function will set a camera to a specific view port. You give the view port to set (from 0 to 7), and supply the unique camera ID value (as returned by the camera_create() functions or when you use view_get_camera()). If you give a value of -1 as the camera ID then you are removing a camera from the view port and note that if that view port is enabled and visible you may get some unpredictable results.
 * @returns {Undefined}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Id.Camera} camera_id - The unique camera ID value returned when you created the camera
 */
declare function view_set_camera(view_port: Real,camera_id: Camera): Undefined;

/**
 * This function can be used to set the height of the given view port. You give the view port index (from 0 to 7) and the new height to use.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Real} h - The new height (in pixels)
 */
declare function view_set_hport(view_port: Real,h: Real): Real;

/**
 * With this variable you can set the contents of a view port to draw to a surface. When working with surfaces, it is often required to capture the whole visible region of the screen to the surface, and so you would assign it to a view port using this function. This means that everything that is shown in the chosen view port will now be drawn to the assigned surface and the contents of that view port will no longer be displayed, meaning that you will need to either:
 * @returns {Undefined}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Id.Surface} surface_id - None
 */
declare function view_set_surface_id(view_port: Real,surface_id: Surface): Undefined;

/**
 * This function can be used to set the visibility of the given view port. The function takes the view port index (from 0 to 7) and a boolean true if it is visible and false if it is not.
 * @returns {Undefined}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Bool} visible - Visibility toggle (true is visible and false is invisible)
 */
declare function view_set_visible(view_port: Real,visible: Bool): Undefined;

/**
 * This function can be used to set the width of the given view port. You give the view port index (from 0 to 7) and the new width to use.
 * @returns {Real}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Real} w - The new width (in pixels)
 */
declare function view_set_wport(view_port: Real,w: Real): Real;

/**
 * This function can be used to set the x position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.
 * @returns {Undefined}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Real} x - The new x position
 */
declare function view_set_xport(view_port: Real,x: Real): Undefined;

/**
 * This function can be used to set the y position of the given view port. You give the view port index (from 0 to 7) and the new position to place it at.
 * @returns {Undefined}
 * @param {Real} view_port - The view port to target (0 - 7)
 * @param {Real} y - The new y position
 */
declare function view_set_yport(view_port: Real,y: Real): Undefined;

/**
 * With this function you can center the game window in the display when the target module is Windows, Ubuntu (Linux) or macOS, or you can center it in the browser if the target module is HTML5. This function has no effect on any other device.
 * @returns {Undefined}
 */
declare function window_center(): Undefined;

/**
 * This function will return the current d3d device pointer, which you can then (for example) pass through to a DLL or Dylib on Windows and macOS.
 * @returns {Pointer}
 */
declare function window_device(): Pointer;

/**
 * This function will call the javascript function postMessage and pass a message back to the host window.(GX and HTML5 only)
 * @returns {Undefined}
 * @param {String} message - The message to be passed to the host window
 */
declare function window_post_message(message: String): Undefined;

/**
 * Returns whether the border around the window is shown in windowed mode.
 * @returns {Bool}
 */
declare function window_get_showborder(): Bool;

/**
 * This function returns the caption of the window (this is the text that appears on the top of the window, beside its icon) and by default this shows the caption of the room you're currently in.
 * @returns {String}
 */
declare function window_get_caption(): String;

/**
 * This function returns the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:
 * @returns {Constant.Color}
 */
declare function window_get_colour(): Color;

/**
 * With this function you can get the current cursor being used in the game window, with the return value being any one of the constants listed below (to set the current cursor being used you can use the function window_set_cursor() which also takes these constants):
 * @returns {Constant.Cursor}
 */
declare function window_get_cursor(): Cursor;

/**
 * This function returns whether the game window is in fullscreen mode (true) or not (false).
 * @returns {Bool}
 */
declare function window_get_fullscreen(): Bool;

/**
 * With this function you can get the current height (in pixels) of the game window.
 * @returns {Real}
 */
declare function window_get_height(): Real;

/**
 * With this function you can find the overlapping region of the rectangle defined by (x1,y1) to (x2,y2) on each of the attached displays. The function will return an array with 8 values per display (ie: if you have two displays, the array will have a length of 16 indices), where the values [0 ... 3] correspond to the overlapx1, overlapy1, overlapx2, overlapy2 - defining the region of overlap on this display and will be set to 0,0,0,0 if no overlap - and the values [4 ... 7] corresponds to the monitorx1, monitory1, monitorx2, monitory2 - the coordinates of the display in the virtual display space. This can be used to test whether a saved window position is going to be visible or not (the user may have disconnected an external monitor or moved the window off screen which left the window position that was saved as not being valid), for example.
 * @returns {Array[Real]}
 * @param {Real} x1 - The left edge of the rectangle to check
 * @param {Real} y1 - The top edge of the rectangle to check.
 * @param {Real} x2 - The right edge of the rectangle to check
 * @param {Real} y2 - The bottom edge of the rectangle to check.
 */
declare function window_get_visible_rects(x1: Real,y1: Real,x2: Real,y2: Real): Array[Real];

/**
 * With this function you can get the current width (in pixels) of the game window.
 * @returns {Real}
 */
declare function window_get_width(): Real;

/**
 * With this function you can get the x position (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.
 * @returns {Real}
 */
declare function window_get_x(): Real;

/**
 * With this function you can get the y position (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.
 * @returns {Real}
 */
declare function window_get_y(): Real;

/**
 * With this function you can get the internal Windows id value (the HWND, a pointer). This function is really only useful for extension writers who need the window handle to call Windows API's in DLL code (the returned pointer should be cast into a string and then in the C++ just cast it to an HWND). The table below shows the platforms supported along with what they return:
 * @returns {Pointer}
 */
declare function window_handle(): Pointer;

/**
 * With this function you can poll the window (or tab) state and if it loses focus the function will return false otherwise it will return true. In most cases you can simply use the os_is_paused() function to test this, but in some very specific cases (for example games on Chrome Apps) that function will not trigger, in which case you should use this function instead.
 * @returns {Bool}
 */
declare function window_has_focus(): Bool;

/**
 * Minimises the game window (if supported on the target platform).
 * @returns {Undefined}
 */
declare function window_minimise(): Undefined;

/**
 * Minimizes the game window (if supported on the target platform).
 * @returns {Undefined}
 */
declare function window_minimize(): Undefined;

/**
 * With this function you can get the x position of the mouse cursor (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.
 * @returns {Real}
 */
declare function window_mouse_get_x(): Real;

/**
 * With this function you can get the y position of the mouse cursor (in pixels) within the browser if it is an HTML5 game or within the display if it is a Windows, Ubuntu (Linux) or macOS game.
 * @returns {Real}
 */
declare function window_mouse_get_y(): Real;

/**
 * With this function you can change or set the position of the mouse within the game window which can be useful for FPS games, for example. The function will only work while the game is in focus and using alt + tab will unlock the mouse.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate in the window.
 * @param {Real} y - The y coordinate in the window.
 */
declare function window_mouse_set(x: Real,y: Real): Undefined;

/**
 * With this function you can enable or disable mouse lock. When enabled, the mouse cursor is hidden and locked at the center of the window. When disabled, the mouse cursor is shown and unlocked. While the cursor is locked, you can still use functions window_mouse_get_delta_x() and window_mouse_get_delta_y() to retrieve how much has it moved since the last frame.
 * @returns {Undefined}
 * @param {Bool} enable - Enable (true) or disable (false) mouse lock.
 */
declare function window_mouse_set_locked(enable: Bool): Undefined;

/**
 * Returns whether the mouse cursor was locked using function window_mouse_set_locked.
 * @returns {Bool}
 */
declare function window_mouse_get_locked(): Bool;

/**
 * Returns how many pixels has the mouse cursor moved on the x axis since the last frame.
 * @returns {Real}
 */
declare function window_mouse_get_delta_x(): Real;

/**
 * Returns how many pixels has the mouse cursor moved on the y axis since the last frame.
 * @returns {Real}
 */
declare function window_mouse_get_delta_y(): Real;

/**
 * Un-minimises the game window (if supported on the target platform).
 * @returns {Undefined}
 */
declare function window_restore(): Undefined;

/**
 * Sets whether the border around the window is shown in windowed mode.
 * @returns {Undefined}
 * @param {Bool} show - Whether to show the window border (true) or not (false).
 */
declare function window_set_showborder(show: Bool): Undefined;

/**
 * With this function you can change or set the windows caption for the room that you are currently in. This caption appears at the top of the window, beside the game icon, when the game is not in full screen mode.
 * @returns {Undefined}
 * @param {String} caption - The new caption.
 */
declare function window_set_caption(caption: String): Undefined;

/**
 * This function can set the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:
 * @returns {Undefined}
 * @param {Constant.Color} colour - The colour to set the region.
 */
declare function window_set_colour(colour: Color): Undefined;

/**
 * With this function you can set the cursor for the game window to any one of the constants listed below (to find the current cursor being used you can use the function window_get_cursor() which will also return one of these constants):
 * @returns {Undefined}
 * @param {Constant.Cursor} cursor - The cursor to set for the game window.
 */
declare function window_set_cursor(cursor: Cursor): Undefined;

/**
 * With this function you can set the game window to be full screen (true) or not (false). Please note that for the macOS target, you must have unchecked the "Start In Fullscreen" option and checked the "Allow the player to resize the game window" option in the Game Options, otherwise this function will fail. Also note that this function will not work on HTML5 unless it's added in as a "clickable" callback (see here for more details).
 * @returns {Undefined}
 * @param {Bool} full - Whether to set the screen to fullscreen (true) or not (false).
 */
declare function window_set_fullscreen(full: Bool): Undefined;

/**
 * This function can be used to set a maximum window height for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function you can limit the maximum height to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.
 * @returns {Undefined}
 * @param {Real} height - The maximum height in pixels for the game window.
 */
declare function window_set_max_height(height: Real): Undefined;

/**
 * This function can be used to set a maximum window width for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function you can limit the maximum width to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.
 * @returns {Undefined}
 * @param {Real} width - The maximum width in pixels for the game window.
 */
declare function window_set_max_width(width: Real): Undefined;

/**
 * This function can be used to set a minimum window height for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function you can limit the minimum height to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.
 * @returns {Undefined}
 * @param {Real} height - The minimum height in pixels for the game window.
 */
declare function window_set_min_height(height: Real): Undefined;

/**
 * This function can be used to set a minimum window width for your game. If you enable the window resize option in the Game Options for the target platform, then the player can resize the game window to any size they wish, however by using this function you can limit the minimum width to the size you specify. If you wish to go back to the default behaviour (ie: no minimum), then use a value of -1.
 * @returns {Undefined}
 * @param {Real} width - The minimum width in pixels for the game window.
 */
declare function window_set_min_width(width: Real): Undefined;

/**
 * With this function you can set the game window to a specific position within the display (on macOS, Linux(Ubuntu) and Windows) or within the browser (HTML5).
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of where to position the window.
 * @param {Real} y - The y coordinate of where to position the window.
 */
declare function window_set_position(x: Real,y: Real): Undefined;

/**
 * With this function you can set the position of the game window within the browser (HTML5) or display (Windows, Ubuntu (Linux) or macOS) and set the scale of the window too. For more information on window position and window size, see window_set_position() and window_set_size().
 * @returns {Undefined}
 * @param {Real} x - The new x coordinate of the window.
 * @param {Real} y - The new y coordinate of the window.
 * @param {Real} w - The new width of the window.
 * @param {Real} h - The new height of the window.
 */
declare function window_set_rectangle(x: Real,y: Real,w: Real,h: Real): Undefined;

/**
 * With this function you can change the size of the game window. If you use this function to change the size of the game window, the contents of the window will be scaled to fit with a 1:1 ratio to the background canvas which will keep the image crisp and clear (although scaled if the window is other than the room or view size). For example, if you have a 200 x 150 pixel window, and the player stretches the window by dragging the borders, the final window size may be 400 x 300 pixels, but the drawing canvas is STILL 200 x 150, which gives a blurred image as the pixel ratio is now 1:2. However, if you use this function to set the window size, the 1:1 ratio is maintained, even though the image is scaled to fit the new window size.
 * @returns {Undefined}
 * @param {Real} w - The new width of the window.
 * @param {Real} h - The new height of the window.
 */
declare function window_set_size(w: Real,h: Real): Undefined;

/**
 * With this function you can enable borderless fullscreen mode which uses a borderless window when switching to fullscreen rather than making the game take over exclusive use of the display. Note that this will only take effect on the next switch to fullscreen (so if the game is currently running in fullscreen then nothing will immediately change).
 * @returns {Undefined}
 * @param {Bool} enable - Whether to enable borderless fullscreen mode (true) or not (false).
 */
declare function window_enable_borderless_fullscreen(enable: Bool): Undefined;

/**
 * This function returns whether fullscreen mode uses a borderless window or whether the game takes exclusive control of the display.
 * @returns {Undefined}
 */
declare function window_get_borderless_fullscreen(): Undefined;

/**
 * This function returns the x-coordinate of the mouse with respect to all the active views and returns the same value mouse_x.
 * @returns {Real}
 */
declare function window_views_mouse_get_x(): Real;

/**
 * This function returns the y-coordinate of the mouse with respect to all the active views and returns the same value mouse_y.
 * @returns {Real}
 */
declare function window_views_mouse_get_y(): Real;

/**
 * This function will return the mouse x position relative to the view selected.
 * @returns {Real}
 * @param {Any} id - The id of the view to compare the mouse position to.
 */
declare function window_view_mouse_get_x(id: Any): Real;

/**
 * This function will return the mouse y position relative to the view selected.
 * @returns {Real}
 * @param {Any} id - The id of the view to compare the mouse position to.
 */
declare function window_view_mouse_get_y(id: Any): Real;

/**
 * With this function you can check to see if a data structure of the given type exists. You supply the "index" value (as held in a variable) and the DS "type", which can be any of the constants listed below, and the function will return true if the data structure exists and false otherwise.
 * @returns {Bool}
 * @param {Any} ind - The variable index to check for the data structure
 * @param {Constant.DsType} type - The type of data structure to check for (see the list of constants below)
 */
declare function ds_exists(ind: Any,type: DsType): Bool;

/**
 * When comparing values, for example when searching in a map or sorting a list, GameMaker must decide when two values are equal. For strings and integer values this is clear but for real numbers, due to floating point round-off errors, seemingly equal numbers can easily become unequal. For example, it's possible that (5 / 3) * 3 will not be equal to 5! To help avoid this, a precision value is used on all real number functions, and when the difference between two numbers is smaller than this precision they are considered equal. The default a precision of 0.0000001 is used for all data structure functions unless changed by this function.
 * @returns {Undefined}
 * @param {Real} prec - The precision value (default 0.0000001)
 */
declare function ds_set_precision(prec: Real): Undefined;

/**
 * This function can be used to add a given value (real or string) to the value of the given cell within the grid. The value to be added must be the same type as that held within the grid cell, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x - The x position of the cell in the grid.
 * @param {Real} y - The y position of the cell in the grid.
 * @param {ArgumentIdentity} val - The value to add to the cell.
 */
declare function ds_grid_add(index: DsGrid,x: Real,y: Real,val: ArgumentIdentity): Undefined;

/**
 * This function can be used to add a given value (real or string) to all the values of the cells found within the defined disk area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 * @param {ArgumentIdentity} val - The value to add to the cells within the disk.
 */
declare function ds_grid_add_disk(index: DsGrid,xm: Real,ym: Real,r: Real,val: ArgumentIdentity): Undefined;

/**
 * This function can be used to add all the values of all the cells found within the source area of a grid to the values within the destination grid, as illustrated below:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the destination grid.
 * @param {Id.DsGrid} source - The index of the source grid.
 * @param {Real} x1 - The left position of the region of cells to copy from the source grid.
 * @param {Real} y1 - The top position of the region of cells to copy from the source grid.
 * @param {Real} x2 - The right position of the region of cells to copy from the source grid.
 * @param {Real} y2 - The bottom position of the region of cells to copy from the source grid.
 * @param {Real} xpos - The x position on the destination grid to add the source region to.
 * @param {Real} ypos - The y position on the destination grid to add the source region to.
 */
declare function ds_grid_add_grid_region(index: DsGrid,source: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,xpos: Real,ypos: Real): Undefined;

/**
 * This function can be used to add a given value (real or string) to all the values of the cells found within the defined area of a grid. The value to be added must be of the same type as that held within the grid cells, ie: you cannot add a string to a real or vice-versa, and for strings this corresponds to concatenation.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The x position of the left of the region in the grid.
 * @param {Real} y1 - The y position of the top of the region in the grid.
 * @param {Real} x2 - The x position of the right of the region in the grid.
 * @param {Real} y2 - The y position of the bottom of the region in the grid.
 * @param {ArgumentIdentity} val - The value to add to the region cells.
 */
declare function ds_grid_add_region(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,val: ArgumentIdentity): Undefined;

/**
 * This function can be used to clear a given DS grid to a specific value. All cells within the grid will then contain this value, which can be a real number or a string. The image below illustrates how this works:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - This index of the grid to clear.
 * @param {ArgumentIdentity} val - The new value for all grid cells.
 */
declare function ds_grid_clear(index: DsGrid,val: ArgumentIdentity): Undefined;

/**
 * With this function you can copy the contents of one grid into another one. Both grids must have been created previously using the ds_grid_create() function.
 * @returns {Undefined}
 * @param {Id.DsGrid} destination - This index of the grid to copy to.
 * @param {Id.DsGrid} source - This index of the grid to copy from.
 */
declare function ds_grid_copy(destination: DsGrid,source: DsGrid): Undefined;

/**
 * With this function you can create a new DS grid data structure of the specified cell width and height. This function returns an id which must be used in all further functions that deal with this DS grid.
 * @returns {Id.DsGrid}
 * @param {Real} w - The width of the grid to be created.
 * @param {Real} h - The height of the grid to be created.
 */
declare function ds_grid_create(w: Real,h: Real): DsGrid;

/**
 * This function will remove the given grid data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS grid to prevent memory leaks that can slow down and crash your game.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - This index of the grid to destroy.
 */
declare function ds_grid_destroy(index: DsGrid): Undefined;

/**
 * This function can be used to get the value (either a real number or a string) from any cell within the given DS grid. If you pass invalid grid coordinates to the function, then the value returned will be undefined and an error will be shown in the output window.
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x - The x position of the cell you want to find the value of.
 * @param {Real} y - The y position of the cell you want to find the value of.
 */
declare function ds_grid_get(index: DsGrid,x: Real,y: Real): ArgumentIdentity;

/**
 * This function can be used to find the maximum value for all the cells found within the defined disk area of a grid, as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk center in the grid.
 * @param {Real} ym - The y position of the disk center in the grid.
 * @param {Real} r - The radius of the disk in the grid.
 */
declare function ds_grid_get_disk_max(index: DsGrid,xm: Real,ym: Real,r: Real): ArgumentIdentity;

/**
 * This function can be used to find the mean value for all the cells found within the defined disk area of a grid (all cell values are added together and then divided by the total number of cells that make up the disk), as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 */
declare function ds_grid_get_disk_mean(index: DsGrid,xm: Real,ym: Real,r: Real): ArgumentIdentity;

/**
 * This function can be used to find the minimum value for all the cells found within the defined disk area of a grid, as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 */
declare function ds_grid_get_disk_min(index: DsGrid,xm: Real,ym: Real,r: Real): ArgumentIdentity;

/**
 * This function can be used to add all the values all the cells found within the defined disk area of a grid together, as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 */
declare function ds_grid_get_disk_sum(index: DsGrid,xm: Real,ym: Real,r: Real): ArgumentIdentity;

/**
 * This function can be used to find the maximum value for all the cells found within the defined region of a grid, as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The left cell column of the region.
 * @param {Real} y1 - The top cell row of the region.
 * @param {Real} x2 - The right cell column of the region.
 * @param {Real} y2 - The bottom cell row of the region.
 */
declare function ds_grid_get_max(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real): ArgumentIdentity;

/**
 * This function can be used to find the mean value for all the cells found within the defined region of a grid (all cell values are added together and then divided by the total number of cells that make the region), as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The left cell column of the region.
 * @param {Real} y1 - The top cell row of the region.
 * @param {Real} x2 - The right cell column of the region.
 * @param {Real} y2 - The bottom cell row of the region.
 */
declare function ds_grid_get_mean(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real): ArgumentIdentity;

/**
 * This function can be used to find the minimum value for all the cells found within the defined region of a grid, as shown in the image below:
 * @returns {ArgumentIdentity}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The left cell column of the region.
 * @param {Real} y1 - The top cell row of the region.
 * @param {Real} x2 - The right cell column of the region.
 * @param {Real} y2 - The bottom cell row of the region.
 */
declare function ds_grid_get_min(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real): ArgumentIdentity;

/**
 * This function can be used to add all the values all the cells found within the defined region of a grid together, as shown in the image below:
 * @returns {Real}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The left cell column of the region.
 * @param {Real} y1 - The top cell row of the region.
 * @param {Real} x2 - The right cell column of the region.
 * @param {Real} y2 - The bottom cell row of the region.
 */
declare function ds_grid_get_sum(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real): Real;

/**
 * This function will return the height of the given grid. This value is the number of cells the grid has along the y-axis and is always an integer, as shown in the image below:
 * @returns {Real}
 * @param {Id.DsGrid} index - This index of the grid to find the height of.
 */
declare function ds_grid_height(index: DsGrid): Real;

/**
 * This function will multiply the value of a the given grid cell by the specified amount.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x - The x position of the cell in the grid.
 * @param {Real} y - The y position of the cell in the grid.
 * @param {Any} val - The value to multiply with the cell.
 */
declare function ds_grid_multiply(index: DsGrid,x: Real,y: Real,val: Any): Undefined;

/**
 * This function will take all the values in a given disc-shaped region of the DS grid, and multiply each one by the given amount.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 * @param {Any} val - The value to multiply the cells within the disk with.
 */
declare function ds_grid_multiply_disk(index: DsGrid,xm: Real,ym: Real,r: Real,val: Any): Undefined;

/**
 * With this function you can define an area within a given DS grid, then take those values and multiply them with those found in a separate region of either the same DS grid, or another one (which has been previously created). The original region will remain unchanged, while the region that they have been multiplied with will now store the new values for each cell.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the destination grid.
 * @param {Id.DsGrid} source - The index of the source grid.
 * @param {Real} x1 - The left position of the region of cells to copy from the source grid.
 * @param {Real} y1 - The top position of the region of cells to copy from the source grid.
 * @param {Real} x2 - The right position of the region of cells to copy from the source grid.
 * @param {Real} y2 - The bottom position of the region of cells to copy from the source grid.
 * @param {Real} xpos - The x position on the destination grid to multiply the source region with.
 * @param {Real} ypos - The y position on the destination grid to multiply the source region with.
 */
declare function ds_grid_multiply_grid_region(index: DsGrid,source: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,xpos: Real,ypos: Real): Undefined;

/**
 * With this function you can specify a region of the grid in which to multiply each cell value by a given amount.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The x position of the left of the region in the grid.
 * @param {Real} y1 - The y position of the top of the region in the grid.
 * @param {Real} x2 - The x position of the right of the region in the grid.
 * @param {Real} y2 - The y position of the bottom of the region in the grid.
 * @param {Any} val - The value to multiply with the region cells.
 */
declare function ds_grid_multiply_region(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,val: Any): Undefined;

/**
 * This function can be used to convert a string which has been created previously by the function ds_grid_write() back into a DS grid. The DS grid must have been created previously (see the example below).
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid to read.
 * @param {String} string - The string to read into the DS grid.
 * @param {Bool} legacy (optional) - Can be either true or false or omitted completely.
 */
declare function ds_grid_read(index: DsGrid,string: String,legacy (optional): Bool): Undefined;

/**
 * With this function you can resize the given DS grid to have a different width and/or height. If the grid size is larger than the current grid, the new cells will have a base value of 0, and if the size is smaller then the values held in the cells that are no longer within the new size will be lost. All other cells will be left untouched.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - This index of the grid to resize.
 * @param {Real} w - The new width of the grid.
 * @param {Real} h - The new height of the grid.
 */
declare function ds_grid_resize(index: DsGrid,w: Real,h: Real): Undefined;

/**
 * This function can be used to set a given cell within the given DS grid to any value, which can be a real number or a string. The image below illustrates this:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - This index of the grid.
 * @param {Real} x - The x position of the cell to set.
 * @param {Real} y - The y position of the cell to set.
 * @param {ArgumentIdentity} value - The value with which to set the cell.
 */
declare function ds_grid_set(index: DsGrid,x: Real,y: Real,value: ArgumentIdentity): Undefined;

/**
 * With this function you can set a circular region of a grid to a certain value. You need to supply a starting grid cell (as an x and y axis coordinate) as well as the radius of the disk to set and the value that you wish to set the disk too, as shown by the illustration below:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 * @param {ArgumentIdentity} val - The value to set with the cells within the disk.
 */
declare function ds_grid_set_disk(index: DsGrid,xm: Real,ym: Real,r: Real,val: ArgumentIdentity): Undefined;

/**
 * This function can be used to copy the contents of a rectangular area of grid cells from one (previously defined) DS grid to another, or it can be used to copy a region from within the same grid. The following images illustrate both ways that this function can be used:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the destination grid.
 * @param {Id.DsGrid} source - The index of the source grid.
 * @param {Real} x1 - The left position of the region of cells to copy from the source grid.
 * @param {Real} y1 - The top position of the region of cells to copy from the source grid.
 * @param {Real} x2 - The right position of the region of cells to copy from the source grid.
 * @param {Real} y2 - The bottom position of the region of cells to copy from the source grid.
 * @param {Real} xpos - The x position on the destination grid to copy the source region to.
 * @param {Real} ypos - The y position on the destination grid to copy the source region to.
 */
declare function ds_grid_set_grid_region(index: DsGrid,source: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,xpos: Real,ypos: Real): Undefined;

/**
 * This function can be used to set a rectangular region of a given grid to a specified value (which can be either a real or a string) as illustrated by the image shown below:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The x position of the left of the region in the grid.
 * @param {Real} y1 - The y position of the top of the region in the grid.
 * @param {Real} x2 - The x position of the right of the region in the grid.
 * @param {Real} y2 - The y position of the bottom of the region in the grid.
 * @param {ArgumentIdentity} val - The value to set the region cells to.
 */
declare function ds_grid_set_region(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,val: ArgumentIdentity): Undefined;

/**
 * This function can be used to randomise the positions of all values in all cells within a grid.
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid to shuffle.
 */
declare function ds_grid_shuffle(index: DsGrid): Undefined;

/**
 * This function can be used to sort a DS grid based on the values from a given column (much as you would sort files by date, size etc... in the OS file explorer). The following image shows an example:
 * @returns {Undefined}
 * @param {Id.DsGrid} index - The index of the grid to sort.
 * @param {Real} column - The column to use for sorting the rows
 * @param {Bool} ascending - Whether to sort lowest to highest (true), or highest to lowest (false).
 */
declare function ds_grid_sort(index: DsGrid,column: Real,ascending: Bool): Undefined;

/**
 * This function can be used to convert a DS grid into an MP grid. You can also provide an optional predicate function argument to map the DS grid value to the corresponding MP grid value. If you don't provide a predicate function, the function will treat zero values as empty and non-zero values as occupied.
 * @returns {Undefined}
 * @param {Id.DsGrid} src - The source DS grid.
 * @param {Id.MpGrid} dest - The destination MP grid.
 * @param {Function} func - A predicate function (that is passed the: grid value, cell x and cell y) and should return true (cell is ocupied) or false (cell is empty)
 */
declare function ds_grid_to_mp_grid(src: DsGrid,dest: MpGrid,func: Function): Undefined;

/**
 * With this function you can check to see if a specific value (real or string) is present within a circular area of a given DS grid. If it is present the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 * @param {Any} val - The value to find.
 */
declare function ds_grid_value_disk_exists(index: DsGrid,xm: Real,ym: Real,r: Real,val: Any): Bool;

/**
 * With this function you can get the x coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.
 * @returns {Real}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 * @param {Any} val - The value to find.
 */
declare function ds_grid_value_disk_x(index: DsGrid,xm: Real,ym: Real,r: Real,val: Any): Real;

/**
 * With this function you can get the y coordinate (within the given grid disc-shaped region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the center cell of the disk. Then you give the radius (as an integer value) around the center cell to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.
 * @returns {Real}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} xm - The x position of the disk on the grid.
 * @param {Real} ym - The y position of the disk on the grid.
 * @param {Real} r - The radius of the disk on the grid.
 * @param {Any} val - The value to find.
 */
declare function ds_grid_value_disk_y(index: DsGrid,xm: Real,ym: Real,r: Real,val: Any): Real;

/**
 * With this function you can check to see if a specific value (real or string) is present within a rectangular area of a given DS grid. If it is present the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The x position of the left of the region in the grid.
 * @param {Real} y1 - The y position of the top of the region in the grid.
 * @param {Real} x2 - The x position of the right of the region in the grid.
 * @param {Real} y2 - The y position of the bottom of the region in the grid.
 * @param {Any} val - The value to find.
 */
declare function ds_grid_value_exists(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,val: Any): Bool;

/**
 * With this function you can get the x coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.
 * @returns {Real}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The x position of the left of the region in the grid, from 0 to (grid width - 1).
 * @param {Real} y1 - The y position of the top of the region in the grid, from 0 to (grid height - 1).
 * @param {Real} x2 - The x position of the right of the region in the grid, from 0 to (grid width - 1).
 * @param {Real} y2 - The y position of the bottom of the region in the grid, from 0 to (grid height - 1).
 * @param {Any} val - The value to find.
 */
declare function ds_grid_value_x(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,val: Any): Real;

/**
 * With this function you can get the y coordinate (within the given rectangular grid region) of the value being searched for. You give the DS grid index (as returned by ds_grid_create()) along with the x/y positions for the top left and bottom right corners of the grid region to search, before supplying the value to search for. If the value being searched for does not exist, then the function will return -1.
 * @returns {Real}
 * @param {Id.DsGrid} index - The index of the grid.
 * @param {Real} x1 - The x position of the left of the region in the grid, from 0 to (grid width - 1).
 * @param {Real} y1 - The y position of the top of the region in the grid, from 0 to (grid height - 1).
 * @param {Real} x2 - The x position of the right of the region in the grid, from 0 to (grid width - 1).
 * @param {Real} y2 - The y position of the bottom of the region in the grid, from 0 to (grid height - 1)
 * @param {Any} val - The value to find.
 */
declare function ds_grid_value_y(index: DsGrid,x1: Real,y1: Real,x2: Real,y2: Real,val: Any): Real;

/**
 * This function will return the width of the given grid. This value is the number of cells the grid has along the x-axis and is always an integer, as shown in the image below:
 * @returns {Real}
 * @param {Id.DsGrid} index - This index of the grid to find the width of.
 */
declare function ds_grid_width(index: DsGrid): Real;

/**
 * This function can be used to convert the given ds_grid into a string, which can then be stored in an external file (for example). You can read the returned string from this function back into a ds_grid using the function ds_grid_read().
 * @returns {String}
 * @param {Id.DsGrid} index - The index of the grid to write.
 */
declare function ds_grid_write(index: DsGrid): String;

/**
 * This function can be used to add a new value (real or string) to the list, which will be added on at the end. The function can take further optional arguments (as many as you require), permitting you to add multiple values consecutively to the list in a single call.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to add to.
 * @param {ArgumentIdentity} ... - The value to add to the list.
 */
declare function ds_list_add(id: DsList,...: ArgumentIdentity): Undefined;

/**
 * With this function you can clear all data from the given list data-structure. This does NOT destroy the data-structure (for that you should use ds_list_destroy()) it only wipes all data from it and makes the list empty (zero in size). Note that clearing a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before clearing it to prevent this. The only time this is not required is when you have flagged any items in the list as another DS list or as a DS map, in which case these items will be destroyed (not cleared!) and their memory cleaned up automatically when the parent is cleared.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the data structure to clear.
 */
declare function ds_list_clear(id: DsList): Undefined;

/**
 * With this function you can copy the contents of one list into another. Both lists must have been created previously and if the list being copied to already has information within it, this list will be cleared first. The end result is two independent lists which contain the same information.
 * @returns {Undefined}
 * @param {Id.DsList} destination - The id of the list being copied to.
 * @param {Id.DsList} source - The id of the list to be copied from.
 */
declare function ds_list_copy(destination: DsList,source: DsList): Undefined;

/**
 * This function will create a new list data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the list. Note that if you try and access a value in the list before it has been populated - i.e. the list is "empty" - then the return value may be 0 since internally the first few entries in the list are set when created to minimize performance issues when initially adding items to the list (although the ds_list_size() function will still return 0 on a newly created list). If you wish to ensure that the list is "truly" empty on create, then you should call ds_list_clear() after creating the list, which will then mean that any values returned for unpopulated list slots will be undefined.
 * @returns {Id.DsList}
 */
declare function ds_list_create(): DsList;

/**
 * With this function you can remove the value stored at a specific position within the list.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to change.
 * @param {Real} pos - Where in the list to delete the value.
 */
declare function ds_list_delete(id: DsList,pos: Real): Undefined;

/**
 * This function will remove the given list data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the ds_list to prevent memory leaks that can slow down and crash your game. Note that destroying a list will de-reference any data structures stored in it giving a memory leak, so you would need to go through the list and destroy all data structure items manually before destroying it to prevent this. The only time this is not required is when you have flagged any items in the list as another DS list or as a DS map, in which case these items will be destroyed and their memory cleaned up automatically as well.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the data structure to remove.
 */
declare function ds_list_destroy(id: DsList): Undefined;

/**
 * With this function you can check the given DS list to see if it is empty (returns true) or not (returns false).
 * @returns {Bool}
 * @param {Id.DsList} id - The id of the data structure to check.
 */
declare function ds_list_empty(id: DsList): Bool;

/**
 * With this function you can check the given list for a value and the position within the list for that value will be returned. Note that if there are more than one entries in the list with the same value, the position of any one of them may be returned, and that if the value does not exist, then -1 will be returned. Note that the value can be an array, which you can check with the function is_array().
 * @returns {Real}
 * @param {Id.DsList} id - The id of the list to use.
 * @param {Any} val - The value to find.
 */
declare function ds_list_find_index(id: DsList,val: Any): Real;

/**
 * With this function you can check the given list position and the value held within the list for that position will be returned. Note that if you give a position that is outside of the given list size (ie: position 11 in a 10 value list) then the function may return undefined or 0. This is because when you create the list, internally the first few entries in the list are set to 0 to minimize performance issues when initially adding items to the list (although the ds_list_size() function will still return 0 on a newly created list). If you wish to ensure that the list is "truly" empty on create, then you should call ds_list_clear() after creating the list, which will then mean that any values returned for unpopulated list slots will be undefined, which you can then check consistently using the is_undefined() function.
 * @returns {ArgumentIdentity}
 * @param {Id.DsList} id - The id of the list to use.
 * @param {Real} pos - The position to look at, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1.
 */
declare function ds_list_find_value(id: DsList,pos: Real): ArgumentIdentity;

/**
 * This function will add the given value into the list at the given position. if the list contains more values after the given position, their position will be shifted up one to make room making the list larger by one.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to add to.
 * @param {Real} pos - The position to add the value, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1.
 * @param {ArgumentIdentity} val - The value to add to the list.
 */
declare function ds_list_insert(id: DsList,pos: Real,val: ArgumentIdentity): Undefined;

/**
 * With this function you can check to see if another DS list is stored at the given position within a DS list. If the given position contains a DS list ID, then the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.DsList} id - The id of the list to check.
 * @param {Real} pos - The position within the list to check.
 */
declare function ds_list_is_list(id: DsList,pos: Real): Bool;

/**
 * With this function you can check to see if a DS map is stored at the given position within a DS list. If the given position contains a DS map ID, then the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.DsList} id - The id of the list to check.
 * @param {Real} pos - The position within the list to check.
 */
declare function ds_list_is_map(id: DsList,pos: Real): Bool;

/**
 * This function will "mark" (or "flag") a given position within a previously created DS list as holding another DS list. This functionality is required when encoding JSON strings (which you can create using json_encode()), but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the "parent" list. However, if you delete the list position individually, the DS list it contained will not be garbage collected and you should call the appropriate DS list destroy function before deleting the item from the parent list position. Also note that if you call the function ds_list_clear() on a list, any items flagged as lists will be destroyed as well when the list is cleared.
 * @returns {Real}
 * @param {Id.DsList} id - The id of the list to mark.
 * @param {Real} pos - The position within the list to mark.
 */
declare function ds_list_mark_as_list(id: DsList,pos: Real): Real;

/**
 * This function will "mark" (or "flag") a given position within a previously created DS list as holding a DS map. This functionality is required when encoding JSON strings (which you can create using json_encode()), but can also be useful when nesting data-structures, as items marked in this way will automatically be garbage collected (destroyed) when the parent DS list is destroyed. This means that you do not have to manually go through the list contents and destroy the marked data structures individually before destroying the "parent" list. However, if you delete the list position individually, the data structure it contained will not be garbage collected and you should call the appropriate DS map destroy function before deleting the parent list position. Also note that if you call the function ds_list_clear() on a list, any items flagged as maps will be destroyed as well when the list is cleared.
 * @returns {Real}
 * @param {Id.DsList} id - The id of the list to mark.
 * @param {Real} pos - The position within the list to mark.
 */
declare function ds_list_mark_as_map(id: DsList,pos: Real): Real;

/**
 * With this function you can recreate a saved DS list (one that has previously been written as a string using ds_list_write()). You must first create a new DS list to read the string into, and if the DS list already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the data structure to read into.
 * @param {String} str - The string to read from.
 * @param {Bool} legacy (optional) - Can be either true or false or omitted completely.
 */
declare function ds_list_read(id: DsList,str: String,legacy (optional): Bool): Undefined;

/**
 * This function will replace the value at the given position for another one.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to change.
 * @param {Real} pos - The position to replace the value, where 0 corresponds to the very beginning of the list and the final position is ds_list_size(id)-1.
 * @param {ArgumentIdentity} val - The new value to replace the given value with.
 */
declare function ds_list_replace(id: DsList,pos: Real,val: ArgumentIdentity): Undefined;

/**
 * This function can be used to set a previously added list entry. You give the list ID (as returned when you created the list) and the position within the list to set as well as the value to set it to. Note that if the entry being set is outside the bounds of the list (ie, you set list entry 20 but the current list only contains 10 entries) then the list will be filled to the given position and each entry will be set to 0. This function is the same as using the DS list accessor.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to add to.
 * @param {Real} pos - The position within the list to set.
 * @param {ArgumentIdentity} ... - The value to set in the list.
 */
declare function ds_list_set(id: DsList,pos: Real,...: ArgumentIdentity): Undefined;

/**
 * With this function you can shuffle a list, which will re-order all the component values into random positions from those in which they were originally added to the list.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to shuffle.
 */
declare function ds_list_shuffle(id: DsList): Undefined;

/**
 * This function will return the "size" of the list, ie: the number of items that have been added into it.
 * @returns {Real}
 * @param {Id.DsList} id - The id of the data structure to check.
 */
declare function ds_list_size(id: DsList): Real;

/**
 * With this function you can sort all the values within a list, either in ascending or descending order. If the list contains strings, these will be sorted alphabetically, based on the English 26 letter alphabet.
 * @returns {Undefined}
 * @param {Id.DsList} id - The id of the list to sort.
 * @param {Bool} ascend - Whether the values should be ascending (true) or descending (false) order.
 */
declare function ds_list_sort(id: DsList,ascend: Bool): Undefined;

/**
 * This function returns a string which can then be stored or transferred to another data structure using the ds_list_read() function.
 * @returns {String}
 * @param {Id.DsList} id - The id of the data structure to write.
 */
declare function ds_list_write(id: DsList): String;

/**
 * This function should be used to add sets of key/value pairs into the specified DS map. You can check this function to see if it was successful or not (it will return true on success or false otherwise), as it may fail if there already exists the same key in the DS map or you specify a non-existent DS map as the ID of the map to add to. The keys and and values you supply can be made up of any combination of data types, so all of the following - and more - are acceptable (although, in practice, you would most commonly use a string for the key):
 * @returns {Bool}
 * @param {Id.DsMap} id - The id of the map to add to.
 * @param {Any} key - The key of the value to add.
 * @param {ArgumentIdentity} val - The value to add to the map.
 */
declare function ds_map_add(id: DsMap,key: Any,val: ArgumentIdentity): Bool;

/**
 * With this function you can assign a (previously created) DS list to a key within the given DS map. This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality. If a DS map has a list added in this way, destroying the parent map will also destroy the contained lists and free their memory, and calling ds_map_clear() on the parent map will also destroy and clean up any flagged lists.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key for the added list.
 * @param {Id.DsList} value - The id of the list to add.
 */
declare function ds_map_add_list(id: DsMap,key: Any,value: DsList): Undefined;

/**
 * With this function you can assign a (previously created) DS map to a key within the given DS map . This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality. If a DS map has another map added in this way, then destroying the parent map will also destroy the contained maps and free their memory, and calling ds_map_clear() on the parent map will also destroy and clean up any flagged maps.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key for the added map.
 * @param {Id.DsMap} value - The id of the map to add.
 */
declare function ds_map_add_map(id: DsMap,key: Any,value: DsMap): Undefined;

/**
 * This function will clear the (previously created) DS map of all key/value pairs, but it will not delete the DS map itself from memory. For that you should use the function ds_map_destroy(). Note that clearing a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through it and destroy all data structure items manually before clearing the map to prevent this. The only time this is not required is when you have flagged any items in the map as a DS list or as another DS map, in which case these items will be destroyed (not cleared!) and their memory cleaned up automatically when the parent map is cleared.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the data structure to clear.
 */
declare function ds_map_clear(id: DsMap): Undefined;

/**
 * You can use this function to copy the contents of one map into another one that you have previously created using ds_map_create(). If the DS map that is being copied to is not empty, then this function will clear it first before copying. The original DS map remains unchanged by this process.
 * @returns {Undefined}
 * @param {Id.DsMap} destination - The id of the map you are copying to
 * @param {Id.DsMap} source - The id of the map you are copying from
 */
declare function ds_map_copy(destination: DsMap,source: DsMap): Undefined;

/**
 * This function is used to create a new, empty, DS map and will return its id which is then used to access the data structure in all other DS map functions.
 * @returns {Id.DsMap}
 */
declare function ds_map_create(): DsMap;

/**
 * With this function you can remove any given key (and its corresponding value) from the given, previously created, DS map .
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the map to change.
 * @param {Any} key - The key (along with its associated value) to delete.
 */
declare function ds_map_delete(id: DsMap,key: Any): Undefined;

/**
 * DS maps take up space in memory, which is allocated to them when they are created. This means that you also need to free this memory when the DS map is not needed to prevent errors, memory leaks and loss of performance when running your game. This function does just that. Note that destroying a map will de-reference any data structures stored in the map giving a memory leak, so you would need to go through the map and destroy all data structure items manually before destroying it to prevent this. The only time this is not required is when you have flagged any items in the map as a DS list or as another DS map, in which case these items will be destroyed and their memory cleaned up automatically as well.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the map to destroy.
 */
declare function ds_map_destroy(id: DsMap): Undefined;

/**
 * This function will simply return false if the specified (previously created) DS map contains any key/value pairs, or true if it does not.
 * @returns {Bool}
 * @param {Id.DsMap} id - The id of the data structure to check.
 */
declare function ds_map_empty(id: DsMap): Bool;

/**
 * This function will return true if the specified key exists in the (previously created) DS map , and false if it does not.
 * @returns {Bool}
 * @param {Id.DsMap} id - the id of the data structure to check
 * @param {Any} key - the key to check for
 */
declare function ds_map_exists(id: DsMap,key: Any): Bool;

/**
 * This function returns the first key stored in the DS map. This is not the first key in the order you added them! DS maps are not stored in a linear form, for that use DS list, so all this does is find the first key as stored by the computer. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow.
 * @returns {Any}
 * @param {Id.DsMap} id - The id of the map to use.
 */
declare function ds_map_find_first(id: DsMap): Any;

/**
 * This function returns the last key stored in the DS map. This is not the last key in the order that you have added them! DS maps are not stored in a linear form, for that use DS lists, so all this does is find the last key as stored by the computer. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow.
 * @returns {Any}
 * @param {Id.DsMap} id - The id of the map to use.
 */
declare function ds_map_find_last(id: DsMap): Any;

/**
 * This function returns the next key stored in the DS map after the one specified in the function. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow. If no such key exists then the function will return undefined. You should always check this using the is_undefined() function.
 * @returns {Any}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key to find the next one to.
 */
declare function ds_map_find_next(id: DsMap,key: Any): Any;

/**
 * This function returns the previous key stored in the DS map before the one specified in the function. This can be useful if your have to iterate through the DS map looking for something, but should be avoided if possible as it can be slow. If no such key exists then the function will return undefined. You should always check this using the is_undefined() function.
 * @returns {Any}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key to find the previous one to.
 */
declare function ds_map_find_previous(id: DsMap,key: Any): Any;

/**
 * With this function you can get the value from a specified key. The input values of the function are the (previously created) DS map to use and the key to check for.
 * @returns {ArgumentIdentity}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key to find.
 */
declare function ds_map_find_value(id: DsMap,key: Any): ArgumentIdentity;

/**
 * With this function you can check to see if a DS list is stored in the given map key. If the given key contains a DS list ID, then the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.DsMap} id - The id of the ds_map to use.
 * @param {Any} key - The key to check.
 */
declare function ds_map_is_list(id: DsMap,key: Any): Bool;

/**
 * With this function you can check to see if a DS map is stored in the given map key. If the given key contains a DS map ID, then the function will return true otherwise it will return false.
 * @returns {Bool}
 * @param {Id.DsMap} id - The id of the ds_map to use.
 * @param {Any} key - The key to replace.
 */
declare function ds_map_is_map(id: DsMap,key: Any): Bool;

/**
 * With this function you can retrieve all of the keys that a DS map contains. You supply the DS map ID to get the keys from (as returned by ds_map_create()) and the function will return an array where each entry in the array is a key from the DS map. The function has an optional second argument where you can supply an array that you have created, in which case the map key data will be appended onto any existing data in the array. Note that the function will modify the array supplied directly, but will also return a reference to it (or a reference to a new array if none is supplied).
 * @returns {Array[Any]}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Array} array - The array to append the DS map keys to.
 */
declare function ds_map_keys_to_array(id: DsMap,array: Array): Array[Any];

/**
 * This function will take a string that has previously been created by the function ds_map_write() and then read it into a previously created DS map. If the map that the string is being read into contains any key/value pairs, these will be cleared first before the saved map is re-constructed.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the data structure to read the string into
 * @param {String} str - The string to read
 * @param {Bool} legacy (optional) - Can be either true or false or omitted completely.
 */
declare function ds_map_read(id: DsMap,str: String,legacy (optional): Bool): Undefined;

/**
 * With this function you can change the value for the given key within the a DS map . You supply the index to the map (as returned by the function ds_map_create()) and then the key to replace - either a string or an integer - and the value to replace the key value with. If the given key does not exist then it will be created for you, and if it does then the current value will be replaced with the new value. The function will return true if the key exists and the value is replaced, and false if the key does not exist and a new key was created with the value.
 * @returns {Bool}
 * @param {Id.DsMap} id - The id of the map to change.
 * @param {Any} key - The key with the value that should be replaced by the new one
 * @param {ArgumentIdentity} val - The new value to replace the given value with
 */
declare function ds_map_replace(id: DsMap,key: Any,val: ArgumentIdentity): Bool;

/**
 * With this function you can replace a DS list that has been stored in the given "key" with another list that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key to replace.
 * @param {Id.DsList} value - The id of the ds_list to use to replace the one previously stored in the given key.
 */
declare function ds_map_replace_list(id: DsMap,key: Any,value: DsList): Undefined;

/**
 * With this function you can replace a DS Map that has been stored in the given "key" with another map that has been created previously. This function is designed for creating JSON compatible maps which you would then encode using json_encode() and should only be used in conjunction with that functionality.
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the ds_map to use.
 * @param {Any} key - The key to replace.
 * @param {Id.DsMap} value - The id of the ds_map to use to replace the one previously stored in the given key.
 */
declare function ds_map_replace_map(id: DsMap,key: Any,value: DsMap): Undefined;

/**
 * This function will load a previously saved DS map from the given file. This file must have been previously created using the ds_map_secure_save() function, and, when loaded, the function will return the index of the DS map that has been created from the loaded data. This DS map index should be stored in a variable and used for all further function calls to this map. Note that if the DS map being loaded was saved with an array as one of the key values, this array will have been converted into a DS list on load.
 * @returns {Id.DsMap}
 * @param {String} filename - The name of the file to load the map data from.
 */
declare function ds_map_secure_load(filename: String): DsMap;

/**
 * This function will load a secure saved DS map from a buffer. You must previously have loaded the buffer into memory (using buffer_load()) and then passing that into this function will return a DS map populated with the contents of the buffer. Note that the buffer must have been created using the function ds_map_secure_save_buffer() for this to work correctly, and also note that if the DS map being loaded contained an array, this will be converted into a DS list instead on load.
 * @returns {Id.DsMap}
 * @param {Id.Buffer} buffer - The buffer ID of the buffer to load the map data from.
 */
declare function ds_map_secure_load_buffer(buffer: Buffer): DsMap;

/**
 * This function will save the contents of the given DS map to a file that is linked to the device it was created on (meaning it can't be read if transferred to any other device). The file itself can have almost any extension (for example, *.dat, *.json, *.bin, etc...) and will be obfuscated and stored to local storage on the target platform. You can then re-load the ds_map using the function ds_map_secure_load(). Note that if the DS map being saved contains an array, this array will be converted into a DS list instead when saved.
 * @returns {Bool}
 * @param {Id.DsMap} map - The id of the data structure to use
 * @param {String} filename - The name of the file to save the map to
 */
declare function ds_map_secure_save(map: DsMap,filename: String): Bool;

/**
 * This function will save a previously created DS map to a buffer. You supply the DS map ID value (as returned by the function ds_map_create()) and the ID of the buffer to write to (as returned by the function buffer_create()). Note that if the DS map being saved contains an array, this will be converted into a DS list instead when saved.
 * @returns {Real}
 * @param {Id.DsMap} id - The DS map ID value.
 * @param {Id.Buffer} buffer - The buffer ID value.
 */
declare function ds_map_secure_save_buffer(id: DsMap,buffer: Buffer): Real;

/**
 * With this function you can set the value of a key within a given DS map. You supply the DS map ID value (as returned by the function ds_map_create()), then give the key you want to set and the value to set it to. Keys can be integers or strings, and if the given key does not exist then it will be created for you and set to the value. This function is the same as using the DS map accessor to set/create a map key/value pair. The function does not return anything, so if you need to check if the key value has been replaced or a new key has been created, then you should use the function ds_map_replace().
 * @returns {Undefined}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Any} key - The key to set.
 * @param {ArgumentIdentity} value - The value to set the key to.
 */
declare function ds_map_set(id: DsMap,key: Any,value: ArgumentIdentity): Undefined;

/**
 * With this function you can find how many key/values pairs the (previously created) DS map contains.
 * @returns {Real}
 * @param {Id.DsMap} id - The id of the data structure to check.
 */
declare function ds_map_size(id: DsMap): Real;

/**
 * With this function you can retrieve all of the values that a DS map contains for each key in the map. You supply the DS map ID to get the keys from (as returned by ds_map_create()) and the function will return an array where each entry in the array is a value from the DS map (for example, if the map has 10 keys, then an array of 10 entries will be returned with each entry corresponding to a value for a key). The function has an optional second argument where you can supply an array that you have created, in which case the map key value data will be appended onto any existing data in the array. Note that the function will modify the array supplied directly, but will also return a reference to it (or a reference to a new array if none is supplied).
 * @returns {Array[Any]}
 * @param {Id.DsMap} id - The id of the map to use.
 * @param {Array} array - The array to append the DS map values to.
 */
declare function ds_map_values_to_array(id: DsMap,array: Array): Array[Any];

/**
 * This function will turn the DS map data of the specified map into string format which can then be written to an *.ini or a *.txt file for easy storage. This string can then be later read back into a new ds_map using ds_map_read().
 * @returns {String}
 * @param {Id.DsMap} id - The id of the data structure to use
 */
declare function ds_map_write(id: DsMap): String;

/**
 * With this function you can add a value (either a real number or a string) to a priority queue, at the same time assigning it a priority value.
 * @returns {Undefined}
 * @param {Id.DsPriority} id - The id of the priority queue to add to.
 * @param {ArgumentIdentity} val - The value to add to the priority queue.
 * @param {Real} priority - The priority of the value to add.
 */
declare function ds_priority_add(id: DsPriority,val: ArgumentIdentity,priority: Real): Undefined;

/**
 * This function will take a given value and change its priority within the referenced priority queue.
 * @returns {Undefined}
 * @param {Id.DsPriority} id - The id of the priority queue to change.
 * @param {Any} val - The value to change the priority of.
 * @param {Real} priority - The new priority of the value.
 */
declare function ds_priority_change_priority(id: DsPriority,val: Any,priority: Real): Undefined;

/**
 * With this function you can clear all data from the given priority queue data-structure. This does NOT destroy the data-structure (for that you should use ds_priority_destroy()) it only wipes all data from it and returns an empty priority queue.
 * @returns {Undefined}
 * @param {Id.DsPriority} id - The id of the data structure to clear.
 */
declare function ds_priority_clear(id: DsPriority): Undefined;

/**
 * This function can be used to copy the contents of one priority queue into another. Note that this does NOT remove the contents from the original priority queue, nor does it destroy the original priority queue. When using this function the priority queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).
 * @returns {Undefined}
 * @param {Id.DsPriority} destination - The id of the priority queue to copy to.
 * @param {Id.DsPriority} source - The id of the priority queue to copy from.
 */
declare function ds_priority_copy(destination: DsPriority,source: DsPriority): Undefined;

/**
 * This function will create a new priority queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the priority queue.
 * @returns {Id.DsPriority}
 */
declare function ds_priority_create(): DsPriority;

/**
 * This function will return the value that has the highest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, then any one of them could be returned in any order, but all other values with the same priority will still be in the queue.
 * @returns {ArgumentIdentity}
 * @param {Id.DsPriority} id - The id of the priority queue to use.
 */
declare function ds_priority_delete_max(id: DsPriority): ArgumentIdentity;

/**
 * This function will return the value that has the lowest priority in the queue and then remove the value (and priority) from the data structure. If more than one value has the same priority, then any one of them could be returned in any order, but all other values with the same priority will still be in the queue.
 * @returns {ArgumentIdentity}
 * @param {Id.DsPriority} id - The id of the priority queue to use.
 */
declare function ds_priority_delete_min(id: DsPriority): ArgumentIdentity;

/**
 * This function will simply delete the given value, along with its priority, from the indexed priority queue.
 * @returns {Undefined}
 * @param {Id.DsPriority} id - The id of the priority queue to use.
 * @param {Any} val - The value to delete from the priority queue.
 */
declare function ds_priority_delete_value(id: DsPriority,val: Any): Undefined;

/**
 * This function will remove the given priority queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS priority queue to prevent memory leaks that can slow down and crash your game.
 * @returns {Undefined}
 * @param {Id.DsPriority} id - The id of the data structure to remove.
 */
declare function ds_priority_destroy(id: DsPriority): Undefined;

/**
 * With this function you can check the given DS priority queue to see if it is empty (returns true) or not (returns false).
 * @returns {Bool}
 * @param {Id.DsPriority} id - The id of the data structure to check.
 */
declare function ds_priority_empty(id: DsPriority): Bool;

/**
 * With this function you can find the value stored in the priority queue with the highest priority, and if more than one value has the same priority then any one of them could be returned in any order. However, unlike ds_priority_delete_max(), this function will not remove the value from the queue.
 * @returns {ArgumentIdentity}
 * @param {Id.DsPriority} id - The id of the priority queue to use.
 */
declare function ds_priority_find_max(id: DsPriority): ArgumentIdentity;

/**
 * With this function you can find the value stored in the priority queue with the lowest priority, and if more than one value has the same priority then any one of them could be returned in any order. However, unlike ds_priority_delete_min(), this function will not remove the value from the queue.
 * @returns {ArgumentIdentity}
 * @param {Id.DsPriority} id - The id of the priority queue to use.
 */
declare function ds_priority_find_min(id: DsPriority): ArgumentIdentity;

/**
 * With this function you can retrieve the priority of any given value. If the value does not exist in the priority queue then undefined will be returned.
 * @returns {Real}
 * @param {Id.DsPriority} id - The id of the priority queue to use.
 * @param {Any} val - The value to find the priority of.
 */
declare function ds_priority_find_priority(id: DsPriority,val: Any): Real;

/**
 * With this function you can recreate a saved DS priority (one that has previously been written as a string using ds_priority_write()). You must first create a new DS priority to read the string into, and if the DS priority already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.
 * @returns {Undefined}
 * @param {Id.DsPriority} id - The id of the data structure to write.
 * @param {String} str - The string to write from.
 * @param {Bool} legacy (optional) - Can be either true or false or omitted completely.
 */
declare function ds_priority_read(id: DsPriority,str: String,legacy (optional): Bool): Undefined;

/**
 * This function will return the "size" of the priority queue, ie: the number of items that have been prioritized in it.
 * @returns {Real}
 * @param {Id.DsPriority} id - The id of the data structure to check.
 */
declare function ds_priority_size(id: DsPriority): Real;

/**
 * This function returns a string which can then be stored or transferred to another data structure using the ds_priority_read() function.
 * @returns {String}
 * @param {Id.DsPriority} id - The id of the data structure to check.
 */
declare function ds_priority_write(id: DsPriority): String;

/**
 * With this function you can clear all data from the given queue data-structure. This does NOT destroy the data-structure (for that you should use ds_queue_destroy()) it only wipes all data from it and returns an empty queue.
 * @returns {Undefined}
 * @param {Id.DsQueue} id - The id of the data structure to clear.
 */
declare function ds_queue_clear(id: DsQueue): Undefined;

/**
 * This function can be used to copy the contents of one queue into another. Note that this does NOT remove the contents from the original queue, nor does it destroy the original queue. When using this function the queue being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).
 * @returns {Undefined}
 * @param {Id.DsQueue} destination - The id of the NEW queue.
 * @param {Id.DsQueue} source - The ORIGINAL queue to copy to id.
 */
declare function ds_queue_copy(destination: DsQueue,source: DsQueue): Undefined;

/**
 * This function will create a new queue data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the queue.
 * @returns {Id.DsQueue}
 */
declare function ds_queue_create(): DsQueue;

/**
 * This function will dequeue the head value off of the DS queue, removing it from the queue and returning the value to be stored in a variable. If the queue is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the queue.
 * @returns {ArgumentIdentity}
 * @param {Id.DsQueue} id - The id of the queue to dequeue from.
 */
declare function ds_queue_dequeue(id: DsQueue): ArgumentIdentity;

/**
 * This function will remove the given queue data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS queue to prevent memory leaks that can slow down and crash your game.
 * @returns {Undefined}
 * @param {Id.DsQueue} id - The id of the data structure to remove.
 */
declare function ds_queue_destroy(id: DsQueue): Undefined;

/**
 * With this function you can check the given DS queue to see if it is empty (returns true) or not (returns false).
 * @returns {Bool}
 * @param {Id.DsQueue} id - The id of the data structure to check.
 */
declare function ds_queue_empty(id: DsQueue): Bool;

/**
 * This function will add a value (real or string) onto the tail of the DS queue. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to add multiple values consecutively to the tail of the queue in a single call.
 * @returns {Undefined}
 * @param {Id.DsQueue} id - The id of the queue to add to.
 * @param {ArgumentIdentity} ... - The value to add to the queue.
 */
declare function ds_queue_enqueue(id: DsQueue,...: ArgumentIdentity): Undefined;

/**
 * This function will only read the first value of the queue (that which is "at the head"). It will not dequeue the value, meaning that it can still be read in the future by this function or the ds_queue_dequeue(). If the queue is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the queue.
 * @returns {ArgumentIdentity}
 * @param {Id.DsQueue} id - The id of the data structure to read from.
 */
declare function ds_queue_head(id: DsQueue): ArgumentIdentity;

/**
 * With this function you can recreate a saved DS queue (one that has previously been written as a string using ds_queue_write()). You must first create a new DS queue to read the string into, and if the DS queue already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.
 * @returns {Undefined}
 * @param {Id.DsQueue} id - The id of the data structure to read into.
 * @param {String} str - The string to read from.
 * @param {Bool} legacy (optional) - Can be either true or false or omitted completely.
 */
declare function ds_queue_read(id: DsQueue,str: String,legacy (optional): Bool): Undefined;

/**
 * This function will return the "size" of the queue, ie: the number of items that have been queued onto it.
 * @returns {Real}
 * @param {Id.DsQueue} id - The id of the data structure to check.
 */
declare function ds_queue_size(id: DsQueue): Real;

/**
 * This function will only read the last value of the queue (that which is "at the tail"). It will not dequeue the value, meaning that it can still be read in the future by this function or the ds_queue_dequeue().
 * @returns {ArgumentIdentity}
 * @param {Id.DsQueue} id - The id of the data structure to read from.
 */
declare function ds_queue_tail(id: DsQueue): ArgumentIdentity;

/**
 * This function returns a string which can then be stored or transferred to another data structure using the ds_queue_read() function.
 * @returns {String}
 * @param {Id.DsQueue} id - The id of the data structure to write.
 */
declare function ds_queue_write(id: DsQueue): String;

/**
 * With this function you can clear all data from the given stack data-structure. This does NOT destroy the data-structure (for that you should use ds_stack_destroy()) it only wipes all data from it and returns an empty stack.
 * @returns {Undefined}
 * @param {Id.DsStack} id - The id of the data structure to clear.
 */
declare function ds_stack_clear(id: DsStack): Undefined;

/**
 * This function can be used to copy the contents of one stack into another. Note that this does NOT remove the contents from the original stack, nor does it destroy the original stack. When using this function the stack being copied to must have been previously created and if it contained any items before the copy, then these will be cleared first (meaning this information will be lost).
 * @returns {Undefined}
 * @param {Id.DsStack} destination - The id of the NEW stack.
 * @param {Id.DsStack} source - The ORIGINAL stack to copy to id.
 */
declare function ds_stack_copy(destination: DsStack,source: DsStack): Undefined;

/**
 * This function will create a new stack data-structure and return the index value. This value should be stored in a variable and used in all further function calls relating to the stack.
 * @returns {Id.DsStack}
 */
declare function ds_stack_create(): DsStack;

/**
 * This function will remove the given stack data-structure from memory, freeing up the resources it was using and removing all values that it contained. This function should always be used when you are finished using the DS stack to prevent memory leaks that can slow down and crash your game.
 * @returns {Undefined}
 * @param {Id.DsStack} id - The id of the data structure to remove.
 */
declare function ds_stack_destroy(id: DsStack): Undefined;

/**
 * With this function you can check the given DS stack to see if it is empty (returns true) or not (returns false).
 * @returns {Bool}
 * @param {Id.DsStack} id - The id of the data structure to check.
 */
declare function ds_stack_empty(id: DsStack): Bool;

/**
 * This function will pop the top value off of the DS stack , removing it from the stack and returning the value to be stored in a variable. If the stack is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the stack.
 * @returns {ArgumentIdentity}
 * @param {Id.DsStack} id - The id of the data structure to pop from.
 */
declare function ds_stack_pop(id: DsStack): ArgumentIdentity;

/**
 * This function will push (add) a value, which can be of any data type, onto the top of the stack. The function can take a further 14 optional arguments (making a total of 15 possible additions), permitting you to push multiple values consecutively to the stack in a single call.
 * @returns {Undefined}
 * @param {Id.DsStack} id - The id of the data structure to push onto.
 * @param {ArgumentIdentity} ... - The value to push onto the stack.
 */
declare function ds_stack_push(id: DsStack,...: ArgumentIdentity): Undefined;

/**
 * With this function you can recreate a saved DS stack (one that has previously been written as a string using ds_stack_write()). You must first create a new DS stack to read the string into, and if the DS stack already exists and has information stored in it, then this will be cleared before reading. This function is of vital importance when creating save/load mechanisms for your game.
 * @returns {Undefined}
 * @param {Id.DsStack} id - The id of the data structure to read into.
 * @param {String} str - The string to read from.
 * @param {Bool} legacy (optional) - Can be either true or false or omitted completely.
 */
declare function ds_stack_read(id: DsStack,str: String,legacy (optional): Bool): Undefined;

/**
 * This function will return the "size" of the stack, ie: the number of items that have been pushed onto it.
 * @returns {Real}
 * @param {Id.DsStack} id - The id of the data structure to check.
 */
declare function ds_stack_size(id: DsStack): Real;

/**
 * This function will only read the first value of the stack (that which is "on top"). It will not pop the value, meaning that it can still be read in the future by this function or the ds_stack_pop(). If the stack is empty then the function will return the constant undefined, otherwise it will return the real or string value contained in the stack.
 * @returns {ArgumentIdentity}
 * @param {Id.DsStack} id - The id of the data structure to read from.
 */
declare function ds_stack_top(id: DsStack): ArgumentIdentity;

/**
 * This function returns a string which can then be stored or transferred to another data structure using the ds_stack_read() function.
 * @returns {String}
 * @param {Id.DsStack} id - The id of the data structure to write.
 */
declare function ds_stack_write(id: DsStack): String;

/**
 * This function will return true if the platform compiles outside of the virtual machine, such as for the YYC and JS platforms.
 * @returns {Bool}
 */
declare function code_is_compiled(): Bool;

/**
 * This function generates a custom debug event that will be shown in the Graph View of the debugger when a game is being run in Debug Mode. If you require messages to be displayed when not in debug mode, then you should be using show_debug_message(). It is worth noting that the function will also take two reserved strings to help perform debugging using external applications like Visual Studio. These strings are:
 * @returns {Struct}
 * @param {String} string - The custom debug event string to use.
 * @param {Any} param - Extra configuration parameter.
 */
declare function debug_event(string: String,param: Any): Struct;

/**
 * This function generates an array of strings as the "callstack" where the current script is listed first, and then all the other scripts that were run in order for the current script to be executed. The exact string format will vary depending on the target platform chosen, but it will mostly have the script/event name, then a colon : and the line number, similar to this:
 * @returns {Array[String]}
 * @param {Real} maxdepth - The maximum depth of the callstack
 */
declare function debug_get_callstack(maxdepth: Real): Array[String];

/**
 * This runtime function can be used to "take over" the default GameMaker error message when a runtime exception occurs. You supply a method or function which is called when the exception occurs, and its first argument will be a struct containing information about the exception. This struct has the following format:
 * @returns {Function}
 * @param {Function} user_handler - The method (user-defined function) to use as the exception handler, or undefined to reset it to default.
 */
declare function exception_unhandled_handler(user_handler: Function): Function;

/**
 * This function will create a custom debug message that is shown in the compiler window at runtime. Note that the message can be either a string or a real number, but if you need both then the number will have to be converted to string first using the string() function (see the example below) and that if the number has more than two decimal places then you should use string_format() to show them as by default decimals are rounded to the nearest two decimal places (so "1.2468" would show as "1.25" in the output window). This function also supports template format strings when using "{x}" (i.e. {0},{1},...) as placeholders and passing the correspondent values as separate arguments.
 * @returns {Undefined}
 * @param {Any} string_or_format - The custom debug message to show or a string format.
 * @param {ArgumentIdentity} ... - Values to be replaced on the format string (non-strings will be converted to strings).
 */
declare function show_debug_message(string_or_format: Any,...: ArgumentIdentity): Undefined;

/**
 * This function will create a custom debug message that is shown in the compiler window at runtime. This function requires a format string using "{x}" (i.e. {0},{1},...) as placeholders and passing the correspondent values as and array of values.
 * @returns {Undefined}
 * @param {String} str_format - The custom debug message to show.
 * @param {Array} ... - An array of values to be replaced on the format string (non-string elements will be converted to string).
 */
declare function show_debug_message_ext(str_format: String,...: Array): Undefined;

/**
 * This function can be used to switch on and off the standard debug overlay when testing your game and is disabled by default. The debug overlay shows a graphic CPU/GPU usage bar in the actual game window itself along with the current real fps value, number of texture swaps and the number of vertex batches (note that texture swaps and vertex batches will never be zero and will normally show values of 2 or 3, since even with an empty room an no objects GameMaker still has to draw and batch things).
 * @returns {Undefined}
 * @param {Bool} enable - switch on (true) or off (false) the debug overlay.         
 * @param {Bool} minimised - if true then FPS is opened minimised (default) or false for full size 
 * @param {Real} scale - scale of the debug display. NOTE: clamped to between 0.5 and 4
 * @param {Real} alpha - alpha level of the debug windows. NOTE: clamped to between 0 and 1
 */
declare function show_debug_overlay(enable: Bool,minimised: Bool,scale: Real,alpha: Real): Undefined;

/**
 * Returns true if the debug overlay is open and false otherwise
 * @returns {Bool}
 */
declare function is_debug_overlay_open(): Bool;

/**
 * Returns true if the mouse is over a debug overlay window or gadget, or is being used by the debug sub-systems (i.e. for dragging)
 * @returns {Bool}
 */
declare function is_mouse_over_debug_overlay(): Bool;

/**
 * Returns true if the keyboard is being used by the debug overlay system
 * @returns {Bool}
 */
declare function is_keyboard_used_debug_overlay(): Bool;

/**
 * This function can be used to switch on and off the standard debug log and console when testing your game and is disabled by default.
 * @returns {Undefined}
 * @param {Bool} enable - switch on (true) or off (false) the debug overlay.         
 */
declare function show_debug_log(enable: Bool): Undefined;

/**
 * Declare a new debug view that can be accessed from the debug overlay.
 * @returns {Pointer.View}
 * @param {String} name - name of the debug view
 * @param {Bool} visible - true if view is visible, false otherwise
 * @param {Real} x - x position to place the view window, -1 means position anywhere
 * @param {Real} y - y position to place the view window, -1 means position anywhere
 * @param {Real} width - width of the view window, default is 500
 * @param {Real} height - height of the view window, default is 400
 */
declare function dbg_view(name: String,visible: Bool,x: Real,y: Real,width: Real,height: Real): Pointer.View;

/**
 * Declare a new debug section this will be added to the current debug view that is active. NOTE: if no debug view is active then a "Default" view is created for you.
 * @returns {Pointer.Section}
 * @param {String} name - name of the debug section
 * @param {Bool} open - true if section is open when created, false if closed, defaults to true
 */
declare function dbg_section(name: String,open: Bool): Pointer.Section;

/**
 * Delete a dbg_view that has been previously been created.
 * @returns {Undefined}
 * @param {Pointer.View} view - handle to the view
 */
declare function dbg_view_delete(view: Pointer.View): Undefined;

/**
 * Check to see if a dbg_view still exists.
 * @returns {Bool}
 * @param {Pointer.View} view - handle to the view
 */
declare function dbg_view_exists(view: Pointer.View): Bool;

/**
 * Delete a dbg_section that has previously been created.
 * @returns {Undefined}
 * @param {Pointer.Section} section - handle to the section
 */
declare function dbg_section_delete(section: Pointer.Section): Undefined;

/**
 * Check to see if a dbg_section still exists
 * @returns {Bool}
 * @param {Pointer.Section} section - handle to the section
 */
declare function dbg_section_exists(section: Pointer.Section): Bool;

/**
 * Creates a slider for a real value within the current debug section, minimum and maximum values can be specified. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {Real} minimum - minimum value
 * @param {Real} maximum - maximum value
 * @param {String} label - label to use.
 * @param {Real} step - step value (numbers <=0 indicate no step).
 */
declare function dbg_slider(dbgref: DbgRef|Array[DbgRef],minimum: Real,maximum: Real,label: String,step: Real): Undefined;

/**
 * Creates a slider for an integer value within the current debug section, minimum and maximum values can be specified. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {Real} minimum - minimum value
 * @param {Real} maximum - maximum value
 * @param {String} label - label to use.
 * @param {Real} step - step value (numbers <=0 indicate no step).
 */
declare function dbg_slider_int(dbgref: DbgRef|Array[DbgRef],minimum: Real,maximum: Real,label: String,step: Real): Undefined;

/**
 * Adds TTF font to be used in the debug rendering, font should be added to the included files, size of the font can be specified in pixels, and a font range can be selected (glyphs must be present in the given TTF font) * -1 - Default Latin range, * 0 - Greek, * 1 - Korean, * 2 - Japanese, * 3 - Chinese Full, * 4 - Chinese Simplified Common, * 5 - Cyrillic, * 6 - Thai, * 7 - Vietnamese
 * @returns {Undefined}
 * @param {String} filename - filename of a TTF file to use
 * @param {Real} size - size of the font in pixels(default is 13)
 * @param {Real} fontRange - fontRange type (default is -1 - Latin range)
 */
declare function dbg_add_font_glyphs(filename: String,size: Real,fontRange: Real): Undefined;

/**
 * Creates a drop down for a value within the current debug section, Either use an array of values (with an optional array of labels for those names) OR the values and names are declared as a comma delimited string - where integer values can be specified after a colon symbol so "Zero,One:10,Two:20" will create a 3 entry drop down that will set the variable to the value 0, 10 or 20 depending on which is selected. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {String|Array[String]} specifierOrArrayOfValues - dropdown specifier or array of values
 * @param {String|Array[String]} labelOrArrayOfLabels - label to use or array of Labels (previous argument needs to be an array)
 * @param {String} label - label to use.
 */
declare function dbg_drop_down(dbgref: DbgRef|Array[DbgRef],specifierOrArrayOfValues: String|Array[String],labelOrArrayOfLabels: String|Array[String],label: String): Undefined;

/**
 * Creates a watch for any value within the current debug section, each value is converted to a string and displayed. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {String} label - label to use.
 */
declare function dbg_watch(dbgref: DbgRef|Array[DbgRef],label: String): Undefined;

/**
 * Creates a text entry (from a variable) within the current debug section, this text can be multiline and is not split into 2 columns but shown in a single column. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Any} dbgref - reference to the variable to change or array of references to variables, or a string to show
 */
declare function dbg_text(dbgref: Any): Undefined;

/**
 * Creates a text separator entry (from a variable) within the current debug section, this text can be multiline and is not split into 2 columns but shown in a single column. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Any} dbgref - reference to the variable to change or array of references to variables or a string to show
 * @param {Real} align - alignment of the text separator (0=left, 1=centre, 2=right) defaults to left alignment
 */
declare function dbg_text_separator(dbgref: Any,align: Real): Undefined;

/**
 * Creates a sprite view of the specified sprite with the specified index within the current debug section. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgrefSprite - reference to the variable for the sprite index or array of references to variables
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgrefSpriteIndex - reference to the variable for the image index or array of references to variables
 * @param {String} label - label to use.
 * @param {Real} width - width to draw the sprite at, if no height given then maintains the correct ratio for the sprite, default is width of the sprite
 * @param {Real} height - height draw the sprite at, default is height of the sprite (or uses a given width to maintain correct ratio of width to height)
 */
declare function dbg_sprite(dbgrefSprite: DbgRef|Array[DbgRef],dbgrefSpriteIndex: DbgRef|Array[DbgRef],label: String,width: Real,height: Real): Undefined;

/**
 * Creates a text input entry within the current debug section. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {String} label - label to use.
 * @param {String} type - type to store value as, default is string, use "s" or "t" for string, use "i" or "d" for integer, use "f", "r" or "g" for real
 */
declare function dbg_text_input(dbgref: DbgRef|Array[DbgRef],label: String,type: String): Undefined;

/**
 * Creates a check box entry within the current debug section, variable will be a boolean value true or false. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {String} label - label to use.
 */
declare function dbg_checkbox(dbgref: DbgRef|Array[DbgRef],label: String): Undefined;

/**
 * Creates a colour entry within the current debug section, variable will be a colour RGB value, no alpha. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {String} label - label to use.
 */
declare function dbg_colour(dbgref: DbgRef|Array[DbgRef],label: String): Undefined;

/**
 * Creates a color entry within the current debug section, variable will be a color RGB value, no alpha. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgref - reference to the variable to change or array of references to variables
 * @param {String} label - label to use.
 */
declare function dbg_color(dbgref: DbgRef|Array[DbgRef],label: String): Undefined;

/**
 * Creates a button within the current debug section, the given method will be called when the button is pressed; it is not split into 2 columns but shown in a single column. NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {String} label - label to use.
 * @param {Any} dbgref - reference to the function to call
 * @param {Real} width - width of button in pixels.
 * @param {Real} height - height of button in pixels.
 */
declare function dbg_button(label: String,dbgref: Any,width: Real,height: Real): Undefined;

/**
 * Creates a button within the current debug section, the given method will be called when the button is pressed; it is not split into 2 columns but shown in a single column. The sprite is specified with the given reference, the width and height of the button specified in pixels (width and height of the sprite is used if not specified). Bits of the sprite can be displayed by specifying the x and y offset along with width and height (if none given then the whole sprite is used). NOTE: if no section is declared a "Default" section will be created.
 * @returns {Undefined}
 * @param {Any} dbgref - reference to the function to call
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgrefSprite - reference to the variable for the sprite index or array of references to variables
 * @param {Id.DbgRef|Array[Id.DbgRef]} dbgrefSpriteIndex - reference to the variable for the image index or array of references to variables
 * @param {Real} width - width of button in pixels.
 * @param {Real} height - height of button in pixels.
 * @param {Real} xoffset - xoffset into the sprite in pixels.
 * @param {Real} yoffset - yoffset into the sprite in pixels.
 * @param {Real} widthSprite - width of the sprite in pixels.
 * @param {Real} heightSprite - height of the sprite in pixels.
 */
declare function dbg_sprite_button(dbgref: Any,dbgrefSprite: DbgRef|Array[DbgRef],dbgrefSpriteIndex: DbgRef|Array[DbgRef],width: Real,height: Real,xoffset: Real,yoffset: Real,widthSprite: Real,heightSprite: Real): Undefined;

/**
 * Causes the next debug control to be placed on the same line as the current debug control (if they are single column controls)
 * @returns {Undefined}
 */
declare function dbg_same_line(): Undefined;

/**
 * Create a debug reference to a live variable
 * @returns {Id.DbgRef}
 * @param {Any} dbgrefOrStruct - reference to the thing to derefernce
 * @param {Any} dbgrefOrName - reference to the index variable or the name of the variable to dereference.
 * @param {Real} index - Index value to use for array references.
 */
declare function ref_create(dbgrefOrStruct: Any,dbgrefOrName: Any,index: Real): DbgRef;

/**
 * This function will show a custom string as an error message. You can also specify whether the game should be aborted after the error, however please note that this only exists for compatibility reasons and showing errors will require the game to be aborted regardless of the value specified in this argument.
 * @returns {Undefined}
 * @param {String} str - The string to show in the pop-up message.
 * @param {Bool} abort - Whether to abort (true) or not (false).
 */
declare function show_error(str: String,abort: Bool): Undefined;

/**
 * This function creates a pop-up message box which displays the given string and a button marked "Ok" to close it.
 * @returns {Undefined}
 * @param {Any} str - The string to show in the pop-up message.
 */
declare function show_message(str: Any): Undefined;

/**
 * This function creates a pop-up message box with two buttons for "Yes" and "No". It returns true or false depending on which one of the two buttons the user presses.
 * @returns {Bool}
 * @param {String} str - The string to show in the pop-up question.
 */
declare function show_question(str: String): Bool;

/**
 * With this function you can choose to enable (true) or disable (false) the draw event for all instances in the game, thus giving you control over how and when things are draw, useful if you wish to implement a "frame skip" technique. Note that this doesn't just prevent instances drawing to the screen, it suppresses the draw event completely meaning that care should be taken since any game logic that is present in that event will not be run either. One important thing to understand about this function is that if you call it right at the start of the game, before the initial frame is rendered (ie: the Create Event of the first object in the first room of the game), then the game window will not be rendered. This could be useful for online projects that require a server which doesn't need to render anything.
 * @returns {Undefined}
 * @param {Bool} enable - Set to true or false.
 */
declare function draw_enable_drawevent(enable: Bool): Undefined;

/**
 * With this function you can flush the entire draw pipeline. This is a debug only function and in general it should not be used unless indicated by a member of the YoYo Games Support staff, as indiscriminate use will cause serious performance issues with your game.
 * @returns {Undefined}
 */
declare function draw_flush(): Undefined;

/**
 * This function will draw an arrow from point (x1,y1) to point (x2,y2). The stem of the arrow is drawn along these points with the actual arrow head being drawn at the end, where the size of the arrowhead is defined by the argument "size" and is calculated as being part of the stem so that the end point is always aligned with the position defined by x2,y2. The width of the arrow head is calculated automatically in proportion to the length.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line (where the arrowhead ends).
 * @param {Real} y2 - The y coordinate of the end of the line (where the arrowhead ends).
 * @param {Real} size - The length of the arrow in pixels.
 */
declare function draw_arrow(x1: Real,y1: Real,x2: Real,y2: Real,size: Real): Undefined;

/**
 * This function will draw a very simple, rectangular "button" using the currently selected draw colour and alpha where the up argument defines how the beveled edge effect looks, as shown in the image below:
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the button
 * @param {Real} y1 - The y coordinate of the top of the button
 * @param {Real} x2 - The x coordinate of the right of the button
 * @param {Real} y2 - The y coordinate of the bottom of the button
 * @param {Bool} up - Whether the button is up (true) or down (false)
 */
declare function draw_button(x1: Real,y1: Real,x2: Real,y2: Real,up: Bool): Undefined;

/**
 * With this function you can draw either an outline of a circle or a filled circle. You can define how precise the drawing is with the function draw_set_circle_precision().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the center of the circle.
 * @param {Real} y - The y coordinate of the center of the circle.
 * @param {Real} r - The circle's radius (length from its center to its edge)
 * @param {Bool} outline - Whether the circle is drawn filled (false) or as a one pixel wide outline (true).
 */
declare function draw_circle(x: Real,y: Real,r: Real,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a circle or a filled circle, and if it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other and the colour settings will over-ride the base colour set with the function draw_set_colour(). You can define how precise the drawing is with the function draw_set_circle_precision().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the center of the circle.
 * @param {Real} y - The y coordinate of the center of the circle.
 * @param {Real} r - The radius (distance from center to edge) of the circle in pixels.
 * @param {Constant.Color} col1 - The colour at the center of the circle.
 * @param {Constant.Color} col2 - The colour at the edge of the circle.
 * @param {Bool} outline - Whether the circle is an outline (true) or not (false). If true, col1 is irrelevant.
 */
declare function draw_circle_colour(x: Real,y: Real,r: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. You can define how precise the drawing is with the function draw_set_circle_precision().
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the ellipse.
 * @param {Real} y1 - The y coordinate of the top of the ellipse.
 * @param {Real} x2 - The x coordinate of the right of the ellipse.
 * @param {Real} y2 - The y coordinate of the bottom of the ellipse.
 * @param {Bool} outline - Whether the ellipse is drawn filled (false) or as a one pixel wide outline (true).
 */
declare function draw_ellipse(x1: Real,y1: Real,x2: Real,y2: Real,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. If it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). You can define how precise the drawing is with the function draw_set_circle_precision().
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the ellipse.
 * @param {Real} y1 - The y coordinate of the top of the ellipse.
 * @param {Real} x2 - The x coordinate of the right of the ellipse.
 * @param {Real} y2 - The y coordinate of the bottom of the ellipse.
 * @param {Constant.Color} col1 - The colour of the center.
 * @param {Constant.Color} col2 - The colour of the edge.
 * @param {Bool} outline - Whether the ellipse is an outline (true) or filled in (false).
 */
declare function draw_ellipse_colour(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw a coloured bar to show a constant value. Although the function uses the word "healthbar" you can use this to display anything you wish as long as the amount to be displayed is a percentage value between 0 and 100 (a percentage of any value can be calculated with the formula (CURRENT_Value / MAXIMUM_value) * 100), so, for example, you can use this to display power, health, mana, time or anything else that would benefit from a bar display.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the healthbar
 * @param {Real} y1 - The y coordinate of the top of the healthbar
 * @param {Real} x2 - The x coordinate of the right of the healthbar
 * @param {Real} y2 - The y coordinate of the bottom of the healthbar
 * @param {Real} amount - The variable which defines total health (between 0 and 100)
 * @param {Constant.Color} backcol - The colour of the background for the bar
 * @param {Constant.Color} mincol - The colour of the bar when at no health (0)
 * @param {Constant.Color} maxcol - The colour of the bar when at full health (100)
 * @param {Real} direction - Where the bar is "anchored" (0 = left, 1 = right, 2 = top, 3 = bottom)
 * @param {Bool} showback - Whether the bar's background is drawn (true) or not (false). If false, the backcol argument is disregarded.
 * @param {Bool} showborder - Whether the bar's elements have a 1px wide black border (true) or not (false).
 */
declare function draw_healthbar(x1: Real,y1: Real,x2: Real,y2: Real,amount: Real,backcol: Color,mincol: Color,maxcol: Color,direction: Real,showback: Bool,showborder: Bool): Undefined;

/**
 * With this function you can draw a 1 pixel wide line between any two points in the game room. Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 */
declare function draw_line(x1: Real,y1: Real,x2: Real,y2: Real): Undefined;

/**
 * With this function you can draw a 1 pixel wide line with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Constant.Color} col1 - The colour of the start of the line.
 * @param {Constant.Color} col2 - The colour of the end of the line.
 */
declare function draw_line_colour(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color): Undefined;

/**
 * With this function you can draw a line of a specified width between any two points in the game room. Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Real} w - The width of the line in pixels.
 */
declare function draw_line_width(x1: Real,y1: Real,x2: Real,y2: Real,w: Real): Undefined;

/**
 * With this function you can draw a line of a specific width with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Real} w - The width in pixels of the line.
 * @param {Constant.Color} col1 - The colour of the start of the line.
 * @param {Constant.Color} col2 - The colour of the end of the line.
 */
declare function draw_line_width_colour(x1: Real,y1: Real,x2: Real,y2: Real,w: Real,col1: Color,col2: Color): Undefined;

/**
 * With this function you can get GameMaker to draw a path to the screen. The path will be drawn as a simple line, and can be either relative to the calling instance or at the absolute position it was created at in the path editor or through code. This function is extremely useful when debugging dynamic paths (for example, those created for instances with the mp_grid_path() function).
 * @returns {Undefined}
 * @param {Any} path - The path to draw
 * @param {Any} x - The x coordinate of where the path is drawn
 * @param {Any} y - The y coordinate of where the path is drawn
 * @param {Bool} absolute - Whether the path is drawn at the absolute position (true) or the relative position (false)
 */
declare function draw_path(path: Any,x: Any,y: Any,absolute: Bool): Undefined;

/**
 * With this function you can draw a single pixel anywhere on the screen, using the currently set draw colour and alpha.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the point to be drawn.
 * @param {Real} y - The y coordinate of the point to be drawn.
 */
declare function draw_point(x: Real,y: Real): Undefined;

/**
 * With this function you can draw a single pixel anywhere on the screen with a colour that you define. The colour settings will over-ride the base colour set with the function draw_set_colour().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the point.
 * @param {Real} y - The y coordinate of the point.
 * @param {Constant.Color} col1 - The colour of the point.
 */
declare function draw_point_colour(x: Real,y: Real,col1: Color): Undefined;

/**
 * With this function you can draw either an outline of a rectangle or a filled rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the top left corner of the rectangle.
 * @param {Real} y1 - The y coordinate of the top left corner of the rectangle.
 * @param {Real} x2 - The x coordinate of the bottom right corner of the rectangle.
 * @param {Real} y2 - The y coordinate of the bottom right corner of the rectangle.
 * @param {Bool} outline - Whether the rectangle is drawn filled (false) or as a one pixel wide outline (true).
 */
declare function draw_rectangle(x1: Real,y1: Real,x2: Real,y2: Real,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rectangle or a filled rectangle by defining an area where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the rectangle.
 * @param {Real} y1 - The y coordinate of the top of the rectangle.
 * @param {Real} x2 - The x coordinate of the right of the rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the rectangle.
 * @param {Constant.Color} col1 - The colour of the top left corner.
 * @param {Constant.Color} col2 - The colour of the top right corner.
 * @param {Constant.Color} col3 - The colour of the bottom right corner.
 * @param {Constant.Color} col4 - The colour of the bottom left corner.
 * @param {Bool} outline - Whether the rectangle is an outline (true) or filled in (false).
 */
declare function draw_rectangle_colour(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color,col3: Color,col4: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(), but this function uses a fixed radius for them (should you need to change the corner radius, use the function draw_roundrect_ext()). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} y1 - The y coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} x2 - The x coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} y2 - The y coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Bool} outline - Whether the rounded rectangle is drawn filled (false) or as a one pixel wide outline (true).
 */
declare function draw_roundrect(x1: Real,y1: Real,x2: Real,y2: Real,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for the centre and the edges, and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).You can define how precise the drawing of the corners is with the function draw_set_circle_precision(), but the corners are always drawn with a fixed radius. Should you need to change the corner radius you should use the function draw_roundrect_colour_ext(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the rounded rectangle.
 * @param {Real} y1 - The y coordinate of the top of the rounded rectangle.
 * @param {Real} x2 - The x coordinate of the right of the rounded rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the rounded rectangle.
 * @param {Constant.Color} col1 - The center colour.
 * @param {Constant.Color} col2 - The outside edge colour.
 * @param {Bool} outline - Whether the rectangle is an outline (true) or filled in (false).
 */
declare function draw_roundrect_colour(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If the rectangle is filled, then the colour arguments will be used to generate a colour gradient from the centre to the edges, where colour 1 is the centre colour and colour 2 the edge colour. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the rounded rectangle.
 * @param {Real} y1 - The y coordinate of the top of the rounded rectangle.
 * @param {Real} x2 - The x coordinate of the right of the rounded rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the rounded rectangle.
 * @param {Real} xrad - The radius of the curve along the x axis from the rectangle corners.
 * @param {Real} yrad - The radius of the curve along the y axis from the rectangle corners.
 * @param {Constant.Color} col1 - The center colour.
 * @param {Constant.Color} col2 - The outside edge colour.
 * @param {Bool} outline - Whether the rectangle is an outline (true) or filled in (false).
 */
declare function draw_roundrect_colour_ext(x1: Real,y1: Real,x2: Real,y2: Real,xrad: Real,yrad: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} y1 - The y coordinate of the top left corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} x2 - The x coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} y2 - The y coordinate of the bottom right corner of the rounded rectangle (as if it were a normal rectangle).
 * @param {Real} xrad - The radius of the curve along the x axis from the rectangle corners.
 * @param {Real} yrad - The radius of the curve along the y axis from the rectangle corners.
 * @param {Bool} outline - Whether the rounded rectangle is drawn filled (false) or as a one pixel wide outline (true).
 */
declare function draw_roundrect_ext(x1: Real,y1: Real,x2: Real,y2: Real,xrad: Real,yrad: Real,outline: Bool): Undefined;

/**
 * To optimise performance when drawing circles, GameMaker basically draws a polygon shape with enough sides to make it appear circular. However, depending on how big or small you need your circles to be, you may find that changing this value can help increase the performance of your game, or make the circles look better. The precision value that you can input into this function is the number of sides the circle polygon has, and this number can be anything between 4 and 64, but must be a number divisible by 4, with a default value of 24.
 * @returns {Undefined}
 * @param {Real} precision - The precision of all circles drawn after this function is called.
 */
declare function draw_set_circle_precision(precision: Real): Undefined;

/**
 * With this function you can draw either an outline of a triangle or a filled triangle.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the triangle's first corner.
 * @param {Real} y1 - The y coordinate of the triangle's first corner.
 * @param {Real} x2 - The x coordinate of the triangle's second corner.
 * @param {Real} y2 - The y coordinate of the triangle's second corner.
 * @param {Real} x3 - The x coordinate of the triangle's third corner.
 * @param {Real} y3 - The y coordinate of the triangle's third corner.
 * @param {Bool} outline - Whether the triangle is drawn filled (false) or as a one pixel wide outline (true).
 */
declare function draw_triangle(x1: Real,y1: Real,x2: Real,y2: Real,x3: Real,y3: Real,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a triangle or a filled triangle. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the triangle's first corner.
 * @param {Real} y1 - The y coordinate of the triangle's first corner.
 * @param {Real} x2 - The x coordinate of the triangle's second corner.
 * @param {Real} y2 - The y coordinate of the triangle's second corner.
 * @param {Real} x3 - The x coordinate of the triangle's third corner.
 * @param {Real} y3 - The y coordinate of the triangle's third corner.
 * @param {Constant.Color} col1 - The colour of the first corner.
 * @param {Constant.Color} col2 - The colour of the second corner.
 * @param {Constant.Color} col3 - The colour of the third corner.
 * @param {Bool} outline - Whether the triangle is an outline (true) or filled in (false).
 */
declare function draw_triangle_colour(x1: Real,y1: Real,x2: Real,y2: Real,x3: Real,y3: Real,col1: Color,col2: Color,col3: Color,outline: Bool): Undefined;

/**
 * This function returns the amount of blue used to make the given colour, with the value being between 0 and 255, where 0 is no blue and 255 is all blue. The following image illustrates this:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function colour_get_blue(col: Color): Real;

/**
 * This function returns the amount of green used to make the given colour, with the value being between 0 and 255, where 0 is no green and 255 is all green. The following image illustrates this:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function colour_get_green(col: Color): Real;

/**
 * This function will return the hue of the given colour. This is the "pure" colour tone which is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function colour_get_hue(col: Color): Real;

/**
 * This function returns the amount of red used to make the given colour, with the value being between 0 and 255, where 0 is no red and 255 is all red. The following image illustrates this:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function colour_get_red(col: Color): Real;

/**
 * This function will return the saturation of the given colour. This is the amount of the colour tone that is mixed into the final colour and is part of the hue, saturation and value (luminosity) method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function colour_get_saturation(col: Color): Real;

/**
 * This function will return the value (luminosity) of the given colour. This is the amount of the "light" that is mixed into the final colour and is part of the hue, saturation and value method for defining a colour. The following image illustrates how this value corresponds to the HSV scale of colour:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function colour_get_value(col: Color): Real;

/**
 * This function can be used to clear the entire screen (with no alpha blend) to the given colour, and is only for use in the draw event of an instance (it will not show if used in any other event). It can also be useful for clearing surfaces when they are newly created.
 * @returns {Undefined}
 * @param {Constant.Color} col - The colour with which the screen will be cleared
 */
declare function draw_clear(col: Color): Undefined;

/**
 * This function can be used to clear the entire screen with a given colour and the alpha component of the destination is set to the value you have set - this function does not do any blending as it works but any subsequent blend operations can be set up to use the destination alpha that you have set. This is only for use in the draw event of an instance (it will not show if used in any other event), and it can also be very useful for clearing surfaces when they are newly created.
 * @returns {Undefined}
 * @param {Constant.Color} col - The colour with which the screen will be cleared
 * @param {Constant.Color} alpha - The transparency of the colour with which the screen will be cleared
 */
declare function draw_clear_alpha(col: Color,alpha: Color): Undefined;

/**
 * This function can be used to clear the depth buffer of the current render target.
 * @returns {Undefined}
 * @param {Real} depth - The value to clear the depth buffer with.
 */
declare function draw_clear_depth(depth: Real): Undefined;

/**
 * This function can be used to clear colour, depth and stencil of the current render target.
 * @returns {Undefined}
 * @param {Any} col - The colour to clear the current render target with. If undefined, then colour is not cleared. Must be specified if the argument alpha is not undefined.
 * @param {Any} alpha - The alpha value to clear the current render target with. If undefined, then colour is not cleared. Must be specified if the argument col is not undefined.
 * @param {Any} depth - The value to clear the depth buffer with. If undefined, then depth is not cleared.
 * @param {Any} stencil - The value to clear the stencil buffer with. If undeifned, then stencil is not cleared.
 */
declare function draw_clear_ext(col: Any,alpha: Any,depth: Any,stencil: Any): Undefined;

/**
 * This function can be used to clear the stencil buffer of the current render target.
 * @returns {Undefined}
 * @param {Real} stencil - The value to clear the stencil buffer with.
 */
declare function draw_clear_stencil(stencil: Real): Undefined;

/**
 * With this function you can get the colour value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used. Note that this will not return any alpha values, for that you should use draw_getpixel_ext().
 * @returns {Real}
 * @param {Real} x - The x coordinate of the pixel to check
 * @param {Real} y - The y coordinate of the pixel to check
 */
declare function draw_getpixel(x: Real,y: Real): Real;

/**
 * With this function you can get the full abgr 32bit value of any pixel that is being drawn to the current render target. This means that the results will depend on the event in which the function is called, and also on the target surface being used.
 * @returns {Real}
 * @param {Real} x - The x coordinate of the pixel to check
 * @param {Real} y - The y coordinate of the pixel to check
 */
declare function draw_getpixel_ext(x: Real,y: Real): Real;

/**
 * This function returns the current value of the draw alpha, which will range between 0 (fully transparent) and 1 (fully opaque). The draw alpha affects the transparency of all draw functions, and can be set with the draw_set_alpha() function.
 * @returns {Real}
 */
declare function draw_get_alpha(): Real;

/**
 * This function returns the current draw colour which is used for drawing forms, text, primitives and un-textured 3D models. This can be set with the draw_set_colour() function.
 * @returns {Real}
 */
declare function draw_get_colour(): Real;

/**
 * With this function you can set the base draw alpha for the game. This value can be set from 0 to 1 with 0 being fully transparent and 1 being fully opaque (the default value), and will affect all further drawing, including backgrounds, sprites, fonts, primitives and 3D.
 * @returns {Undefined}
 * @param {Real} alpha - The alpha to set (between 0 and 1)
 */
declare function draw_set_alpha(alpha: Real): Undefined;

/**
 * With this function you can set the base draw colour for the game. This value will affect all further drawing where appropriate, including fonts, forms, primitives and 3D. If any of those assets are drawn with their own colour value changed, this value will be ignored.
 * @returns {Undefined}
 * @param {Constant.Color} col - The colour to set for drawing.
 */
declare function draw_set_colour(col: Color): Undefined;

/**
 * GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the hue, the saturation and the value (also know as "luminosity") to create the colour desired. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:
 * @returns {Real}
 * @param {Real} hue - The hue of the colour
 * @param {Real} sat - How saturated the colour is
 * @param {Real} val - How dark the colour is
 */
declare function make_colour_hsv(hue: Real,sat: Real,val: Real): Real;

/**
 * GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the red, the green and the blue components of the colour that you wish to make. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:
 * @returns {Real}
 * @param {Real} red - The red component of the colour
 * @param {Real} green - The green component of the colour
 * @param {Real} blue - The blue component of the colour
 */
declare function make_colour_rgb(red: Real,green: Real,blue: Real): Real;

/**
 * With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the "amount" argument, where a value of 0 will return the first colour (col1), a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and blue together:
 * @returns {Real}
 * @param {Constant.Color} col1 - The first colour to merge
 * @param {Constant.Color} col2 - The second colour to merge
 * @param {Real} amount - How much of each colour should be merged. For example, 0 will return col1, 1 will return col2, and 0.5 would return a merge of both colours equally
 */
declare function merge_colour(col1: Color,col2: Color,amount: Real): Real;

/**
 * With this function you can check to see whether sprite culling is enabled (returns true) or not (returns false). For more information on sprite culling, see the function gpu_set_sprite_culling().
 * @returns {Bool}
 */
declare function gpu_get_sprite_cull(): Bool;

/**
 * With this function you can check to see whether alpha testing is enabled (returns true) or not (returns false). For more information on alpha testing, see the function gpu_set_alphatestref().
 * @returns {Bool}
 */
declare function gpu_get_alphatestenable(): Bool;

/**
 * You can use this function to find the current value for the alpha test reference (default is 0, but you can use gpu_set_alphatestref() to set this value to something other than this).
 * @returns {Real}
 */
declare function gpu_get_alphatestref(): Real;

/**
 * This function can be used to retrieve the alpha-blending state. If it returns true then alpha-blending is enabled, and if it returns false it is disabled. By default this is on and so the function will return true
 * @returns {Bool}
 */
declare function gpu_get_blendenable(): Bool;

/**
 * This function can be used to retrieve the current blend mode being used for drawing. The returned value will be one of the following constants (the default value is bm_normal):
 * @returns {Constant.BlendMode}
 */
declare function gpu_get_blendmode(): BlendMode;

/**
 * This function can be used to retrieve the current destination extended blend mode factor being used for drawing. The value returned will be one of the following constants ("s" denotes a value taken from the source while a "d" denotes a value from the destination):
 * @returns {Constant.BlendModeFactor}
 */
declare function gpu_get_blendmode_dest(): BlendModeFactor;

/**
 * This function can be used to retrieve the current destination extended blend mode alpha factor. The value returned will be one of the following constants ("s" denotes a value taken from the source while a "d" denotes a value from the destination) with only the "A" component being used when drawing:
 * @returns {Constant.BlendModeFactor}
 */
declare function gpu_get_blendmode_destalpha(): BlendModeFactor;

/**
 * This function can be used to retrieve the current extended blend mode being used for drawing. The function returns a 2 element 1D array with the following elements in it:
 * @returns {Array[Constant.BlendModeFactor]}
 */
declare function gpu_get_blendmode_ext(): Array[BlendModeFactor];

/**
 * This function can be used to retrieve the current extended blend mode being used for drawing, separating out the blend modes into two parts - the RGB component and the Alpha component. The function returns a 4 element 1D array with the following elements in it:
 * @returns {Array[Constant.BlendModeFactor]}
 */
declare function gpu_get_blendmode_ext_sepalpha(): Array[BlendModeFactor];

/**
 * This function can be used to retrieve the current source extended blend mode factor being used for drawing. The value returned will be one of the following constants ("s" denotes a value taken from the source while a "d" denotes a value from the destination):
 * @returns {Constant.BlendModeFactor}
 */
declare function gpu_get_blendmode_src(): BlendModeFactor;

/**
 * This function can be used to retrieve the current source extended blend mode alpha factor. The value returned will be one of the following constants ("s" denotes a value taken from the source while a "d" denotes a value from the destination) with only the "A" component being used when drawing:
 * @returns {Constant.BlendModeFactor}
 */
declare function gpu_get_blendmode_srcalpha(): BlendModeFactor;

/**
 * This function can be used to retrieve the current blend equation being used for drawing. The returned value will be one of the following constants (the default value is bm_eq_add):
 * @returns {Constant.BlendModeEquation}
 */
declare function gpu_get_blendequation(): BlendModeEquation;

/**
 * This function can be used to retrieve the current blend and alpha blend equations being used for drawing. The function returns a 2 element 1D array with the following elements in it:
 * @returns {Array[Constant.BlendModeEquation]}
 */
declare function gpu_get_blendequation_sepalpha(): Array[BlendModeEquation];

/**
 * This function can be used to retrieve the current colour write-enable values. The function returns a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled). By default all colour writing is set to true:
 * @returns {Array[Bool]}
 */
declare function gpu_get_colourwriteenable(): Array[Bool];

/**
 * This function can be used to retrieve the backface culling mode. The returned value will be one of the following constants (the default value is cull_noculling):
 * @returns {Constant.CullMode}
 */
declare function gpu_get_cullmode(): CullMode;

/**
 * This function can be used to retrieve the fog settings. The function returns a 4 element 1D array with the following information:
 * @returns {Array[Real]}
 */
declare function gpu_get_fog(): Array[Real];

/**
 * This function will get the current GPU state, returning it as a DS Map. This can then be manipulated or even saved, and you can return this map to the GPU using the function gpu_set_state().
 * @returns {Id.DsMap}
 */
declare function gpu_get_state(): DsMap;

/**
 * This function can be used to retrieve the stencil operation executed when the stencil test passes but the depth test fails.
 * @returns {Constant.StencilOp}
 */
declare function gpu_get_stencil_depth_fail(): StencilOp;

/**
 * This function can be used to retrieve whether the stencil test is currently enabled (returns true) or not (returns false).
 * @returns {Bool}
 */
declare function gpu_get_stencil_enable(): Bool;

/**
 * This function can be used to retrieve the stencil operation executed when the stencil test fails.
 * @returns {Constant.StencilOp}
 */
declare function gpu_get_stencil_fail(): StencilOp;

/**
 * This function can be used to retrieve the current stencil test function.
 * @returns {Constant.ZFunction}
 */
declare function gpu_get_stencil_func(): ZFunction;

/**
 * This function can be used to retrieve the stencil operation executed when both stencil and depth test pass.
 * @returns {Constant.StencilOp}
 */
declare function gpu_get_stencil_pass(): StencilOp;

/**
 * This function can be used to retrieve the current stencil test read mask value.
 * @returns {Real}
 */
declare function gpu_get_stencil_read_mask(): Real;

/**
 * This function can be used to retrieve the current stencil test reference value.
 * @returns {Real}
 */
declare function gpu_get_stencil_ref(): Real;

/**
 * This function can be used to retrieve the current stencil test write mask value.
 * @returns {Real}
 */
declare function gpu_get_stencil_write_mask(): Real;

/**
 * With this function you can check to see whether texture filtering (linear interpolation) is enabled (returns true) or not (returns false). For more information on texture filtering, see the function gpu_set_texfilter().
 * @returns {Bool}
 */
declare function gpu_get_texfilter(): Bool;

/**
 * With this function you can check to see whether texture interpolation (linear interpolation) is enabled (returns true) or not (returns false) for a given shader sampler texture.
 * @returns {Bool}
 * @param {Id.Sampler} sampler_id - The sampler id from the shader.
 */
declare function gpu_get_texfilter_ext(sampler_id: Sampler): Bool;

/**
 * With this function you can check to see whether texture repeating is enabled (returns true) or not (returns false). For more information on texture repeating, see the function gpu_set_texrepeat().
 * @returns {Bool}
 */
declare function gpu_get_texrepeat(): Bool;

/**
 * With this function you can check to see whether texture repeating is enabled (returns true) or not (returns false) for a given shader sampler texture.
 * @returns {Bool}
 * @param {Id.Sampler} sampler_id - The sampler id from the shader.
 */
declare function gpu_get_texrepeat_ext(sampler_id: Sampler): Bool;

/**
 * This function can be used to retrieve the z comparison mode. The value returned will be one of the following constants (the default value is cmpfunc_lessequal):
 * @returns {Constant.ZFunction}
 */
declare function gpu_get_zfunc(): ZFunction;

/**
 * This function can be used to retrieve whether z-testing is enabled (the function returns true) or not (the function returns false). The default value is that z-testing is disabled, so the function will return false.
 * @returns {Bool}
 */
declare function gpu_get_ztestenable(): Bool;

/**
 * This function returns the current depth (z coordinate) for 2d drawing functions. By default, it will be equal to the current layer's depth, but can be changed using gpu_set_depth.
 * @returns {Real}
 */
declare function gpu_get_depth(): Real;

/**
 * This function can be used to retrieve whether z-writing is enabled (the function returns true) or not (the function returns false). The default value is that z-writing is enabled, so the function will return true.
 * @returns {Bool}
 */
declare function gpu_get_zwriteenable(): Bool;

/**
 * This function pops the previous GPU state from the stack and applies it. See gpu_push_state() for more information.
 * @returns {Undefined}
 */
declare function gpu_pop_state(): Undefined;

/**
 * With this function you can push the current GPU state onto a stack to be used later. You would generally use this if you want to "save" the current GPU state (things like blend mode, alpha writing, culling, etc... will all be pushed to the stack), then draw something with different settings, and then reset the GPU stack to what it was before (by calling gpu_pop_state()).
 * @returns {Undefined}
 */
declare function gpu_push_state(): Undefined;

/**
 * This function will enable or disable sprite culling for your game (by default this is enabled). By switching sprite culling off you can avoid any problems with for example sprites not being drawn when using custom shaders that alter the position the sprite is drawn at
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable sprite culling (true / false)
 */
declare function gpu_set_sprite_cull(enable: Bool): Undefined;

/**
 * This function will enable or disable alpha testing for your game (by default this is disabled). By switching alpha testing on you can then use the companion function gpu_set_alphatestref() to set the "cut-off" value at which all alpha values will be set to 0. The image below shows the difference that can be seen when alpha testing is switched on or off:
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable alpha testing (true / false)
 */
declare function gpu_set_alphatestenable(enable: Bool): Undefined;

/**
 * This function will set the reference value for the alpha testing (when it has been enabled using the gpu_set_alphatestenable()). This is the "cut-off" threshold at which pixels with alpha will not be drawn.
 * @returns {Undefined}
 * @param {Real} val - Sets the reference value for alpha testing from 0 to 255 (default value is 0)
 */
declare function gpu_set_alphatestref(val: Real): Undefined;

/**
 * This function can be used to toggle alpha-blending on and off. Basically, if you have this set to false, all images being drawn will be drawn 100% opaque, meaning that any transparent, or semi transparent, areas of a sprite or background will be visible as a solid colour. It is a good idea to have alpha blending off whenever possible (especially when developing for mobile devices) as this greatly increases the draw speed.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable alpha blending value (true or false).
 */
declare function gpu_set_blendenable(enable: Bool): Undefined;

/**
 * When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.
 * @returns {Undefined}
 * @param {Constant.BlendMode} mode - The blend mode to use (see the table above)
 */
declare function gpu_set_blendmode(mode: BlendMode): Undefined;

/**
 * When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour (the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.
 * @returns {Undefined}
 * @param {Constant.BlendModeFactor} src - Source blend mode factor(see constants above).
 * @param {Constant.BlendModeFactor} dest - Destination blend mode factor (see constants above)
 */
declare function gpu_set_blendmode_ext(src: BlendModeFactor,dest: BlendModeFactor): Undefined;

/**
 * When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then adding the results together component by component.
 * @returns {Undefined}
 * @param {Constant.BlendModeFactor} src - Source blend mode factor for RGB (see constants above).
 * @param {Constant.BlendModeFactor} dest - Destination blend mode factor for RGB(see constants above)
 * @param {Constant.BlendModeFactor} alphasrc - Source blend mode factor Alpha (see constants above).
 * @param {Constant.BlendModeFactor} alphadest - Destination blend mode factor Alpha (see constants above)
 */
declare function gpu_set_blendmode_ext_sepalpha(src: BlendModeFactor,dest: BlendModeFactor,alphasrc: BlendModeFactor,alphadest: BlendModeFactor): Undefined;

/**
 * When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then combining the results together component by component using a configurable equation.
 * @returns {Undefined}
 * @param {Constant.BlendModeEquation} equation - The blend equation to use (see the table above)
 */
declare function gpu_set_blendequation(equation: BlendModeEquation): Undefined;

/**
 * When GameMaker goes to draw a pixel there is a source colour (the colour of the pixel we're going to draw) and a destination colour(the colour that's already in the pixel we're drawing to), so when determining the new colour of the pixel, the source and destination colours are calculated according to the chosen blend mode. Each component of the colours is stored as a floating point value between 0 and 1, and the new colour is calculated by multiplying each component of the source colour by some factor and by multiplying each component of destination colour by some other factor and then combining the results together component by component using a configurable equation.
 * @returns {Undefined}
 * @param {Constant.BlendModeEquation} equation - The blend equation to use (see the table above)
 * @param {Constant.BlendModeEquation} equation_alpha - The alpha blend equation to use (see the table above)
 */
declare function gpu_set_blendequation_sepalpha(equation: BlendModeEquation,equation_alpha: BlendModeEquation): Undefined;

/**
 * With this function you can switch on or off the colour channels and the alpha channel for all further drawing. For example, you can use this function to create alpha-channel only surfaces (switch off the RGB writing before using the surface), or to create special effects while drawing to the screen. The default value for each of the components is true, and can be supplied as either four unique arguments or as a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled):
 * @returns {Undefined}
 * @param {Any} red - Enable/disable the red channel
 * @param {Bool} green - Enable/disable the green channel
 * @param {Bool} blue - Enable/disable the blue channel
 * @param {Bool} alpha - Enable/disable the alpha channel
 */
declare function gpu_set_colourwriteenable(red: Any,green: Bool,blue: Bool,alpha: Bool): Undefined;

/**
 * This function can be used to set the backface culling mode. A polygon (primitive) has a front and a back side. The front side is said to be the side where the vertices are defined in counter-clockwise order. Normally both sides are drawn, but if you make a closed shape (like a pyramid) then this is a waste of processing power because the back side of the triangle can never be seen. It's in these cases that you can switch on backface culling, as this saves about half the amount of drawing time, although it means you have the task of defining your polygons in the correct way to prevent issues.
 * @returns {Undefined}
 * @param {Constant.CullMode} cullmode - The cull mode to use (see list above)
 */
declare function gpu_set_cullmode(cullmode: CullMode): Undefined;

/**
 * This function can be used to enable or disable fog drawing. Fog can be used in 3D games to make instances in the distance look blurred or even disappear, which helps in creating atmosphere as well as masking the fact that you are not drawing instances that are far away. You set whether it is enabled (true) or disabled (false), the colour that the fog should use for blending, as well as the start and end draw distances. Note that the fog start indicates the radius relative to the view camera where the fog starts, and the fog end indicates at which radius (also relative) instances will be completely invisible.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable fog
 * @param {Constant.Color} colour - The fog colour
 * @param {Real} start - The distance to start applying fog from
 * @param {Real} end - The distance to end the fog
 */
declare function gpu_set_fog(enable: Bool,colour: Color,start: Real,end: Real): Undefined;

/**
 * This function can be used to set a scissor region that will clip all rendering to the current render target, all coordinates are in render target coordinate system. NOTE: All values are used as integers. NOTE: Each surface and viewport will reset the current scissor region (they are not stacked).
 * @returns {Undefined}
 * @param {Any} xOrStruct - x coord OR a struct that contains {x, y, w, h}
 * @param {Real} y - y coord
 * @param {Real} w - width in render target pixels
 * @param {Real} h - height in render target pixels
 */
declare function gpu_set_scissor(xOrStruct: Any,y: Real,w: Real,h: Real): Undefined;

/**
 * This function can be used to get the current scissor region, returns a struct that contains {x, y, w, h}.
 * @returns {Struct}
 */
declare function gpu_get_scissor(): Struct;

/**
 * This function will set the current GPU state using the passed-in DS Map. The supplied map can be created using the function gpu_get_state().
 * @returns {Undefined}
 * @param {Id.DsMap} ds_map - The GPU state to set as a DS Map.
 */
declare function gpu_set_state(ds_map: DsMap): Undefined;

/**
 * This function can be used to set the stencil operation taken when the stencil test passes but the depth test fails.
 * @returns {Undefined}
 * @param {Constant.StencilOp} stencil_op - The operation executed when the stencil test passes but the depth test fails.
 */
declare function gpu_set_stencil_depth_fail(stencil_op: StencilOp): Undefined;

/**
 * This function can be used to disable or enable the stencil test.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable the stencil test (true or false).
 */
declare function gpu_set_stencil_enable(enable: Bool): Undefined;

/**
 * This function can be used to set the stencil operation taken when the stencil test fails.
 * @returns {Undefined}
 * @param {Constant.StencilOp} stencil_op - The operation executed when the stencil test fails.
 */
declare function gpu_set_stencil_fail(stencil_op: StencilOp): Undefined;

/**
 * This function can be used to set the stencil test function.
 * @returns {Undefined}
 * @param {Constant.ZFunction} cmp_func - The stencil test function.
 */
declare function gpu_set_stencil_func(cmp_func: ZFunction): Undefined;

/**
 * This function can be used to set the stencil operation taken when both the stencil and the depth test pass.
 * @returns {Undefined}
 * @param {Constant.StencilOp} stencil_op - The operation executed when both stencil and depth test pass.
 */
declare function gpu_set_stencil_pass(stencil_op: StencilOp): Undefined;

/**
 * This function can be used to set the stencil test read mask.
 * @returns {Undefined}
 * @param {Real} read_mask - A mask that enables or disables reading of individual bits during stencil test.
 */
declare function gpu_set_stencil_read_mask(read_mask: Real): Undefined;

/**
 * This function can be used to set the stencil test reference value.
 * @returns {Undefined}
 * @param {Real} ref - The stencil test reference value in range 0 to 255 (inclusive).
 */
declare function gpu_set_stencil_ref(ref: Real): Undefined;

/**
 * This function can be used to set the stencil test write mask.
 * @returns {Undefined}
 * @param {Real} write_mask - A mask that enables or disables writing of individual bits during stencil test
 */
declare function gpu_set_stencil_write_mask(write_mask: Real): Undefined;

/**
 * This function can be used to set the texture filtering (linear interpolation) of all images drawn on the game screen. When this is enabled (true) all textures will be smoothed when drawn (this includes sprites as they too are considered textures), meaning that when scaled or moved if there is not a 1:1 pixel ratio then there will be a "smudging" across various pixels which may make images appear blurry depending on the art style used. If this is disabled (false) then images will be drawn based on the nearest pixel when scaled or moving which may lead to "blocky" images. The default value is false, and this can also be changed in the Global Game Options for individual target platforms.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable texture filtering (true / false)
 */
declare function gpu_set_texfilter(enable: Bool): Undefined;

/**
 * This function can be used to set the linear interpolation for a single sampler "slot" when using Shaders in GameMaker. When this is enabled (true) the sampler texture will be smoothed and if this is disabled (false) then images will be drawn based on the nearest pixel. The default value is that set by the Global Game Options for your game, or that set using the function gpu_set_texfilter().
 * @returns {Undefined}
 * @param {Id.Sampler} sampler_id - The sampler id from the shader.
 * @param {Bool} enable - Enable or disable texture filtering (true / false)
 */
declare function gpu_set_texfilter_ext(sampler_id: Sampler,enable: Bool): Undefined;

/**
 * This function can be used to indicate to GameMaker whether textures should repeat (true) or not (false) when used for models and primitives. Normally texture widths and heights lie in the range 0 - 1, but if you specify a value larger than 1 by default the rest is not drawn (the entire texture will be drawn with an "empty" section corresponding to the percentage over 1 that is used. So a value of 2 for a texture width or height would draw the texture in half the space and leave the other half empty). However, by using this function to set repeat to true the texture is repeated automatically over all models and primitives. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a "Separate Texture Page" in the Sprite Editor.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable texture filtering (true / false)
 */
declare function gpu_set_texrepeat(enable: Bool): Undefined;

/**
 * This function can be used to set whether a single sampler "slot" repeats the given texture when using Shaders in GameMaker . Setting it to true will repeat the texture if the uv coordinates are out with the 0-1 range, while a setting of false will mean no repeating. The likely use case for these functions is for repeating a texture in 3D but in order for it to work and not pull images from the rest of the texture page, the sprite used will need to be marked as being on a "Separate Texture Page" in the Sprite Editor.
 * @returns {Undefined}
 * @param {Id.Sampler} sampler_id - The sampler id from the shader.
 * @param {Bool} enable - Enable or disable texture filtering (true / false)
 */
declare function gpu_set_texrepeat_ext(sampler_id: Sampler,enable: Bool): Undefined;

/**
 * This function can be used to set the z-buffer testing comparison mode (see gpu_set_ztestenable() for more information). The values available for use are any of the following constants (the default value is cmpfunc_lessequal):
 * @returns {Undefined}
 * @param {Constant.ZFunction} cmp_func - The comparison mode to use (see list above)
 */
declare function gpu_set_zfunc(cmp_func: ZFunction): Undefined;

/**
 * This function can be used to toggle z-buffer testing on or off, affecting how things will be drawn (in general only of use when working with 3D projects). Essentially, by default when z-testing is off and you have two objects drawing to the same space, both objects will be rendered regardless of whether one will over-draw the other, resulting in unnecessary draw calls. If you switch this on then the z-buffer is tested to see whether an object will be "visible" and not drawn if it's not. Note that this is the default behaviour, but you can change this by changing the type of comparison used for z-buffer testing (see the function gpu_set_zfunc().
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable z-buffer testing (true or false).
 */
declare function gpu_set_ztestenable(enable: Bool): Undefined;

/**
 * This function can be used to change the depth (z coordinate) for 2d drawing functions. By default, layer's depth will be used. Note that GameMaker will only change the depth when it starts drawing a new layer, so you may want to restore the original value (from gpu_get_depth) after you're done drawing.
 * @returns {Undefined}
 * @param {Real} depth - New drawing depth.
 */
declare function gpu_set_depth(depth: Real): Undefined;

/**
 * This function can be used to toggle on (true) and off (false) depth ordering using the z-buffer. When an instance is rendered in GameMaker , the depth of a generated pixel (its z coordinate) is stored in the z-buffer, then, if another instance of the scene must be rendered at the same pixel, the two depths are compared (z-testing - see gpu_set_ztestenable()) and the one "closer" to the observer is then saved to the z-buffer, replacing the old one. However, this is not always what you wish to happen and there are moments when you may want something to be drawn over everything else, no matter what its z value is. In those cases you can use this function to switch off writing to the z-buffer and so force whatever is being drawn to be drawn over everything else. Note that the description given here is for the default z-testing comparison mode, but that can be changed
 * @returns {Undefined}
 * @param {Bool} enable - The comparison mode to use (see list above)
 */
declare function gpu_set_zwriteenable(enable: Bool): Undefined;

/**
 * This function will return whether lighting is enabled (true) or not (false) for the whole scene.
 * @returns {Bool}
 */
declare function draw_get_lighting(): Bool;

/**
 * This function is used to control the ambient light of a scene, which is the light that you have in a scene even without having defined any point or directional light sources. It is effectively the overall colour and brightness (or darkness) of a scene. The default colour is c_black.
 * @returns {Undefined}
 * @param {Constant.Color} col - The colour to use (either a constant, a real or a hex value).
 */
declare function draw_light_define_ambient(col: Color): Undefined;

/**
 * This function is for defining a directional light, where the direction and intensity are set by the values input for the x, y and z unit vector (meaning that they must be between -1 and 1, where 1 or -1 is full intensity, and 0 is no intensity). The lights can also be given a colour, which will also affect the perceived intensity of the light as certain colours appear "darker" than others. You must also give the light an index number which what will be used in other functions to reference it.
 * @returns {Undefined}
 * @param {Real} ind - The index number of the light (arbitrary)
 * @param {Real} x - The x component of the light vector
 * @param {Real} y - The y component of the light vector
 * @param {Real} z - The z component of the light vector
 * @param {Constant.Color} col - The colour to use for the light (either a constant, a real or a hex value).
 */
declare function draw_light_define_direction(ind: Real,x: Real,y: Real,z: Real,col: Color): Undefined;

/**
 * This function is for defining a positional light, where you can define the x, y and z position of the light, the light range and its colour (which will also affect the perceived intensity of the light as certain colours appear "darker" than others). You must also give the light an index number which what will be used in other functions to reference it.
 * @returns {Undefined}
 * @param {Real} ind - The index number of the light (arbitrary)
 * @param {Real} x - The x position of the light
 * @param {Real} y - The y position of the light
 * @param {Real} z - The z position of the light
 * @param {Real} range - The light range (in pixels)
 * @param {Constant.Color} col - The colour to use for the light (either a constant, a real or a hex value).
 */
declare function draw_light_define_point(ind: Real,x: Real,y: Real,z: Real,range: Real,col: Color): Undefined;

/**
 * This function is used to enable a defined light. When you define a positional or a directional light you must assign it an index number which is then used by this function to switch the light on or off. Default is disabled (false).
 * @returns {Undefined}
 * @param {Real} ind - The index number of the light (from 0 to 7)
 * @param {Bool} enable - Enable or disable all lighting (true or false)
 */
declare function draw_light_enable(ind: Real,enable: Bool): Undefined;

/**
 * This function will get the specified light parameters as an array with the following 6 elements -

                * [0] = enabled / disabled (true / false)
                * [1] = Light Type Constant (see table below)
                * [2] = x position
                * [3] = y position
                * [4] = z position
                * [5] = light radius (only for point lights, will be 0 for directional)
                * [6] = light colour (a real)
 * @returns {Array}
 * @param {Real} ind - The index number of the light (from 0 to 7)
 */
declare function draw_light_get(ind: Real): Array;

/**
 * This function will return the current colour used for ambient lighting.
 * @returns {Real}
 */
declare function draw_light_get_ambient(): Real;

/**
 * This function is used to enable all lighting effects. Default is disabled (false).
 * @returns {Undefined}
 * @param {Bool} enable - enable or disable all lighting (true or false)
 */
declare function draw_set_lighting(enable: Bool): Undefined;

/**
 * With this function you can get the current maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information). The returned value will range between 1 and 16.
 * @returns {Real}
 */
declare function gpu_get_tex_max_aniso(): Real;

/**
 * With this function you can get the current maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return a value within the range of 1 and 16.
 * @returns {Real}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 */
declare function gpu_get_tex_max_aniso_ext(sampler_index: Uniform): Real;

/**
 * With this function you can get the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.
 * @returns {Real}
 */
declare function gpu_get_tex_max_mip(): Real;

/**
 * With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.
 * @returns {Real}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 */
declare function gpu_get_tex_max_mip_ext(sampler_index: Uniform): Real;

/**
 * With this function you can get the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...
 * @returns {Real}
 */
declare function gpu_get_tex_min_mip(): Real;

/**
 * With this function you can get the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return a value of 0 for full resolution, 1 for the first mipmap, 2 for the second etc...
 * @returns {Real}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 */
declare function gpu_get_tex_min_mip_ext(sampler_index: Uniform): Real;

/**
 * With this function you can retrieve the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the "distance" being viewed. Note that this can return negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.
 * @returns {Real}
 */
declare function gpu_get_tex_mip_bias(): Real;

/**
 * With this function you can retrieve the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return a value of 0.0 for no bias, or a greater value where 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the "distance" being viewed. Note that this can return negative values too, in which case shader textures will be sharper over a greater distance the lower the value.
 * @returns {Real}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 */
declare function gpu_get_tex_mip_bias_ext(sampler_index: Uniform): Real;

/**
 * With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager. The function will return one of the constants listed below, with the default setting being mip_markedonly.
 * @returns {Real}
 */
declare function gpu_get_tex_mip_enable(): Real;

/**
 * With this function you can get whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the constants listed below.
 * @returns {Real}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 */
declare function gpu_get_tex_mip_enable_ext(sampler_index: Uniform): Real;

/**
 * With this function you can get the current mip filter mode. The mode value returned by the function will be one of the constants listed below.
 * @returns {Real}
 */
declare function gpu_get_tex_mip_filter(): Real;

/**
 * With this function you can get the current mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return one of the mode value constants listed below.
 * @returns {Real}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 */
declare function gpu_get_tex_mip_filter_ext(sampler_index: Uniform): Real;

/**
 * With this function you can set the current maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information). The input value must range between 1 and 16.
 * @returns {Undefined}
 * @param {Real} maxaniso - The maximum level for anisotropic filtering (default: 16)
 */
declare function gpu_set_tex_max_aniso(maxaniso: Real): Undefined;

/**
 * With this function you can set the maximum level of anisotropy when using the tf_anisotropic filter mode (see gpu_get_tex_mip_filter() for more information) on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then a value within the range of 1 and 16 to set the level.
 * @returns {Undefined}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 * @param {Real} maxaniso - The maximum anisotropic level to use (default: 16).
 */
declare function gpu_set_tex_max_aniso_ext(sampler_index: Uniform,maxaniso: Real): Undefined;

/**
 * With this function you can set the currently set maximum mipmap level which is to be used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.
 * @returns {Undefined}
 * @param {Real} maxmip - The maximum mipmap level (default: 16)
 */
declare function gpu_set_tex_max_mip(maxmip: Real): Undefined;

/**
 * With this function you can get the currently set maximum mipmap level which is to be used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and the function will return the current maximum mipmap level, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc... Note that this can be quite useful for avoiding bleeding artifacts when rendering textures, for example, setting the texture page border to 8px and then setting the max mipmap level to 3 will ensure you don't get any bleeding problems at greater render distances.
 * @returns {Undefined}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 * @param {Real} maxmip - The maximum mipmap level value to use (default: 16)
 */
declare function gpu_set_tex_max_mip_ext(sampler_index: Uniform,maxmip: Real): Undefined;

/**
 * With this function you can set the minimum mipmap level which is currently used, where a value of 0 is the highest resolution, 1 is to use the first mipmap, 2 is the second etc...
 * @returns {Undefined}
 * @param {Real} minmip - The minimum mipmap level to use
 */
declare function gpu_set_tex_min_mip(minmip: Real): Undefined;

/**
 * With this function you can set the minimum mipmap level which is currently used for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then give a value, where 0 is for full resolution, 1 is for the first mipmap, 2 for the second etc...
 * @returns {Undefined}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 * @param {Real} minmip - The minimum mipmap level to use
 */
declare function gpu_set_tex_min_mip_ext(sampler_index: Uniform,minmip: Real): Undefined;

/**
 * With this function you can set the mipmap bias value, where a value of 0 equals no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make rendered textures blurrier the higher the value and the greater the "distance" being viewed. Note that this function can take negative values too, in which case rendered textures will be sharper over a greater distance the lower the value.
 * @returns {Undefined}
 * @param {Real} bias - The mipmap bias value to use (default: 0)
 */
declare function gpu_set_tex_mip_bias(bias: Real): Undefined;

/**
 * With this function you can set the mipmap bias value for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then the bias value, where 0 is for no bias, 1 equals the first mipmap, 2 equals the second mipmap etc... This controls the rate at which the mip map is swapped and will generally make the shader textures blurrier the higher the value and the greater the "distance" being viewed. Note that this function can also take negative values too, in which case shader textures will be sharper over a greater distance the lower the value.
 * @returns {Undefined}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 * @param {Real} bias - The mipmap bias value to use (default: 0)
 */
declare function gpu_set_tex_mip_bias_ext(sampler_index: Uniform,bias: Real): Undefined;

/**
 * With this function you can change whether mipmapping is switched off, switched on for everything, or switched on only for texture groups selected in the Texture Group Manager. The function requires one of the constants listed below.
 * @returns {Undefined}
 * @param {Real} setting - The mipmap setting (a constant, default: mip_markedonly)
 */
declare function gpu_set_tex_mip_enable(setting: Real): Undefined;

/**
 * With this function you can set whether mipmapping is switched off, switched on for everything or switched on only for texture groups selected in the Texture Group Manager on a shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the constants listed below.
 * @returns {Undefined}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get
 * @param {Real} setting - The mipmap setting (a constant, default: mip_markedonly)
 */
declare function gpu_set_tex_mip_enable_ext(sampler_index: Uniform,setting: Real): Undefined;

/**
 * With this function you can set the current mip filter mode to one of the three types supported. You give the constant that refers to the mip filtering mode that you require, where you can choose between point filtering (default setting, meaning no filtering), linear filtering (this is also known as trilinear filtering) or aniostropic filtering (see the constants table below).
 * @returns {Undefined}
 * @param {String} filter - The mip filter mode to use (a constant, default: tf_point).
 */
declare function gpu_set_tex_mip_filter(filter: String): Undefined;

/**
 * With this function you can set the mip filter mode for a given shader sampler. You supply the index value for the shader sampler (as returned by the function shader_get_sampler_index(), and then one of the mode value constants listed below.
 * @returns {Undefined}
 * @param {Id.Uniform} sampler_index - The index of the shader sampler to get.
 * @param {String} filter - The mip filter mode to use (a constant, default: tf_point).
 */
declare function gpu_set_tex_mip_filter_ext(sampler_index: Uniform,filter: String): Undefined;

/**
 * This will clear all particles that are currently visible in the room which have been made using either effect_create_above() or effect_create_below().
 * @returns {Undefined}
 */
declare function effect_clear(): Undefined;

/**
 * With this function you can create a simple effect above all instances of your room (it is actually created at a depth of -15000). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.
 * @returns {Undefined}
 * @param {Constant.EffectType} kind - The kind of effect (use one of the constants listed above).
 * @param {Real} x - The x positioning of the effect if relevant.
 * @param {Real} y - The y positioning of the effect if relevant.
 * @param {Real} size - The size of the effect.
 * @param {Constant.Color} colour - The colour of the effect.
 */
declare function effect_create_above(kind: EffectType,x: Real,y: Real,size: Real,colour: Color): Undefined;

/**
 * With this function you can create a simple effect beneath all instances of your room (it is actually created at a depth of 50). If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.
 * @returns {Undefined}
 * @param {Constant.EffectType} kind - The kind of effect (use one of the constants listed above).
 * @param {Real} x - The x positioning of the effect if relevant.
 * @param {Real} y - The y positioning of the effect if relevant.
 * @param {Real} size - The size of the effect.
 * @param {Constant.Color} colour - The colour of the effect.
 */
declare function effect_create_below(kind: EffectType,x: Real,y: Real,size: Real,colour: Color): Undefined;

/**
 * With this function you can create a simple effect on a specified layer. If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.
 * @returns {Undefined}
 * @param {Any} layer_id - The layer ID (or name) to assign the created effect to.
 * @param {Constant.EffectType} kind - The kind of effect (use one of the constants listed above).
 * @param {Real} x - The x positioning of the effect if relevant.
 * @param {Real} y - The y positioning of the effect if relevant.
 * @param {Real} size - The size of the effect.
 * @param {Constant.Color} colour - The colour of the effect.
 */
declare function effect_create_layer(layer_id: Any,kind: EffectType,x: Real,y: Real,size: Real,colour: Color): Undefined;

/**
 * With this function you can create a simple effect at a specified depth. If the effect is anything other ef_rain or ef_snow then you can define an x/y position to create the effect, and the size can be a value of 0, 1, or 2, where 0 is small, 1 is medium and 2 is large.
 * @returns {Undefined}
 * @param {Real} depth - The depth to assign the created effect to.
 * @param {Constant.EffectType} kind - The kind of effect (use one of the constants listed above).
 * @param {Real} x - The x positioning of the effect if relevant.
 * @param {Real} y - The y positioning of the effect if relevant.
 * @param {Real} size - The size of the effect.
 * @param {Constant.Color} colour - The colour of the effect.
 */
declare function effect_create_depth(depth: Real,kind: EffectType,x: Real,y: Real,size: Real,colour: Color): Undefined;

/**
 * This function allows you to set an emitter to burst a specific type of particle and is typically used in alarms and destroy events as it is a one off code that creates the number of particles specified all at once following the distribution, shape and position set by the function part_emitter_region(). Should you need the particles to appear every step, you should be using the function part_emitter_stream() rather than calling this function every step.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to burst from.
 * @param {Id.ParticleType} parttype - The index (type) of the particles to be created.
 * @param {Real} number - The number of particles to create.
 */
declare function part_emitter_burst(ps: ParticleSystem,ind: ParticleEmitter,parttype: ParticleType,number: Real): Undefined;

/**
 * With this function you can clear the given emitter from the specified particle system back to its default state. This will also stop any particles that are being streamed from the emitter at the time, and if you wish to use the emitter again you will need to set the region position and particle type using the part_emitter_region() function.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to clear.
 */
declare function part_emitter_clear(ps: ParticleSystem,ind: ParticleEmitter): Undefined;

/**
 * This function must be used to create a new emitter and assign it to a given particle system. The function will return the index value for the new emitter which must be stored in a variable and used in all further functions that reference the emitter, and the emitter itself must be destroyed when no longer being used to prevent memory leaks (this can be achieved using the specific emitter destroy functions or by destroying the whole particle system that the emitter belongs to).
 * @returns {Id.ParticleEmitter}
 * @param {Id.ParticleSystem} ps - The particle system to create the emitter in.
 */
declare function part_emitter_create(ps: ParticleSystem): ParticleEmitter;

/**
 * This function will remove the specified emitter from the given system and clear it from memory (this will also stop any particles from being produced by the given emitter, but it does NOT remove them from the room). This function should always be called when the given emitter is no longer needed for the system to prevent memory leaks and errors.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system to destroy the emitter from.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to destroy.
 */
declare function part_emitter_destroy(ps: ParticleSystem,ind: ParticleEmitter): Undefined;

/**
 * This function will remove all defined emitters from the given system and clear them from memory (this will also stop any particles from being produced by the given emitter, but it does NOT remove them from the room). This function should always be called when the emitters are no longer needed for the system to prevent memory leaks and errors.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system to destroy all emitters from.
 */
declare function part_emitter_destroy_all(ps: ParticleSystem): Undefined;

/**
 * With this function you can enable or disable a particle emitter. Disabled particle emitters are not updated nor rendered and they do not spawn new particles.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to enable or disable.
 * @param {Bool} enable - Enable (true) or disable (false) the particle emitter.
 */
declare function part_emitter_enable(ps: ParticleSystem,ind: ParticleEmitter,enable: Bool): Undefined;

/**
 * With this function you can check to see if the given particle emitter indexed exists in the given system or not. Note that if the variable being checked is an uninitialised variable (that a particle emitterwould otherwise have its index assigned to) this will throw an error.
 * @returns {Bool}
 * @param {Id.ParticleSystem} ps - The particle system to check for an emitter.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to search for.
 */
declare function part_emitter_exists(ps: ParticleSystem,ind: ParticleEmitter): Bool;

/**
 * This function is used to set their position of a particle emitter within the current room. You specify the bounding box of the area within the function and then use any of a series of constants to define the final emitter shape within this bounding box as well as the distribution of particles within the shape. The available constants for distribution shapes are listed below:
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to set.
 * @param {Real} xmin - The x coordinate of the left side of the region.
 * @param {Real} xmax - The x coordinate of the right side.
 * @param {Real} ymin - The y coordinate of the top of the region.
 * @param {Real} ymax - The y coordinate of the bottom of the region.
 * @param {Constant.ParticleRegionShape} shape - The shape of the region.
 * @param {Constant.ParticleDistribution} distribution - The distribution style of the particles.
 */
declare function part_emitter_region(ps: ParticleSystem,ind: ParticleEmitter,xmin: Real,xmax: Real,ymin: Real,ymax: Real,shape: ParticleRegionShape,distribution: ParticleDistribution): Undefined;

/**
 * This function allows you to set an emitter to stream a specific type of particle and is typically used the create event as it is a one off code that sets the emitter to generate the number of particles specified every step of the game there-after. The particles are emitted following the distribution, shape and position set by the function part_emitter_region(). You can set the number of particles being streamed to zero and call this function again to "switch off" the particle streaming, and the function will also accept negative numbers for the amount, in which case the emitter will produce particles based on random chance. For example, if you have the particle number set to -5, there is a 1:5 chance that a particle will be produced every step. Should you need the particles to appear all at once rather than every step, you should be using the function part_emitter_burst().
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter to burst from.
 * @param {Id.ParticleType} parttype - The index (type) of the particles to be created.
 * @param {Real} number - The number of particles to create per step.
 */
declare function part_emitter_stream(ps: ParticleSystem,ind: ParticleEmitter,parttype: ParticleType,number: Real): Undefined;

/**
 * With this function you can configure emitter's delay before it bursts first particles when it is in a stream mode.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter.
 * @param {Real} delay_min - The minimum length of the delay.
 * @param {Real} delay_max - The maximum length of the delay.
 * @param {Constant.TimeSourceUnits} delay_unit - The units that the delay is measured in.
 */
declare function part_emitter_delay(ps: ParticleSystem,ind: ParticleEmitter,delay_min: Real,delay_max: Real,delay_unit: TimeSourceUnits): Undefined;

/**
 * With this function you can configure the interval between individual particle bursts when an emitter is in a stream mode.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter.
 * @param {Real} interval_min - The minimum length of the interval.
 * @param {Real} interval_max - The maximum length of the interval.
 * @param {Constant.TimeSourceUnits} interval_unit - The units that the interval is measured in.
 */
declare function part_emitter_interval(ps: ParticleSystem,ind: ParticleEmitter,interval_min: Real,interval_max: Real,interval_unit: TimeSourceUnits): Undefined;

/**
 * With this function you can enable relative mode for an emitter, which means that the number of particles it burst or streams becomes relative to its area.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system that the emitter is in.
 * @param {Id.ParticleEmitter} ind - The index of the emitter.
 * @param {Bool} enable - Enable (true) or disable (false) relative mode.
 */
declare function part_emitter_relative(ps: ParticleSystem,ind: ParticleEmitter,enable: Bool): Undefined;

/**
 * With this function you can clear all the particles currently created by the system from the room. It does not reset or remove the particle types themselves, just their visual representation, and if you have any object streaming particles from an emitter, these particles disappear but will begin to appear again the next step after calling this code.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 */
declare function part_particles_clear(ind: ParticleSystem): Undefined;

/**
 * With this function you can check to see if a particle system currently has any particles created in the room, and it will return the number of them too.
 * @returns {Real}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 */
declare function part_particles_count(ind: ParticleSystem): Real;

/**
 * This function is ideal for those effects that do not require any of the functionality offered by particle emitters (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. Note that you must have created the particle system and the particle type previously for this function to be used.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 * @param {Real} x - The x coordinate of where to create the particles.
 * @param {Real} y - The y coordinate of where to create the particles.
 * @param {Id.ParticleType} parttype - The index (type) of the particles to be created.
 * @param {Real} number - The number of particles to create.
 */
declare function part_particles_create(ind: ParticleSystem,x: Real,y: Real,parttype: ParticleType,number: Real): Undefined;

/**
 * This function is ideal for those effects that do not require any of the functionality offered by particle emitters (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. You can also colour the particles "on the fly" as they are created with this function, and this colour will over-ride the predefined colour of the particle, but it does not blend this colour over the particles lifetime. Note that you must have created the particle system and the particle type previously for this function to be used.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 * @param {Real} x - The x coordinate of where to create the particles.
 * @param {Real} y - The y coordinate of where to create the particles.
 * @param {Id.ParticleType} parttype - The index (type) of the particles to be created.
 * @param {Constant.Color} colour - The colour blending for the particles.
 * @param {Real} number - The number of particles to create.
 */
declare function part_particles_create_colour(ind: ParticleSystem,x: Real,y: Real,parttype: ParticleType,colour: Color,number: Real): Undefined;

/**
 * This function allows you to burst all particles defined in a particle system resource at any position in the room. The final area, distribution and number of the particles created depends on the configuration of emitters inside of the particle system resource.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 * @param {Real} x - The x coordinate of where to burst the particles.
 * @param {Real} y - The y coordinate of where to burst the particles.
 * @param {Asset.GMParticleSystem} partsys - The particle system resource to burst.
 */
declare function part_particles_burst(ind: ParticleSystem,x: Real,y: Real,partsys: GMParticleSystem): Undefined;

/**
 * This function can be used to switch off the drawing of a particle system so that any updates done to the system (automatic or otherwise) will not be seen. This is a purely visual option and when set to false you will not be able to see the particles as they are not drawn, but they still exists and are changing position, colour etc... as they would normally. When automatic drawing is off, you can explicitly order GameMaker to draw the current state of the particle system using the function part_system_drawit(), and if you set this function to true again you can switch automatic drawing back on.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change.
 * @param {Bool} automatic - Whether automatic drawing is on (true) or not (false).
 */
declare function part_system_automatic_draw(ind: ParticleSystem,automatic: Bool): Undefined;

/**
 * This function controls whether GameMaker should update the particle system automatically or not, and normally you would not need to use this function as the default value of true (automatic update is on) is what you wish to happen. However, for special effects or for pausing the game, you can set this to false and it will prevent any updates being carried out on the given particle system unless explicitly commanded by the use of the function part_system_update() or you use this function again to turn automatic updates on. No updating means that particles created in this system will no longer change position, colour or any other parameter and that emitters will cease to work too, "freezing" the system at the exact point in which the automatic update was set to false.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change.
 * @param {Bool} automatic - Whether automatic updating is on (true) or not (false).
 */
declare function part_system_automatic_update(ind: ParticleSystem,automatic: Bool): Undefined;

/**
 * With this function you can clear the indexed system to its default state, removing all emitters and resetting the depth and position (if they had been changed). Be careful using this function as if you have any instance setting or bursting or any other action using an emitter associated with this system, you will get an error unless you are using the part_emitter_exists() function to check. There is also no need to call the part_emitter_destroy() function as this is taken care of automatically too.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to clear.
 */
declare function part_system_clear(ind: ParticleSystem): Undefined;

/**
 * This function is used to retrieve information for the given particle system asset or instance. You supply either a particle system asset added through the Asset Browser or an instance created with part_system_create() and the function returns a struct with the following variables:
 * @returns {Struct}
 * @param {Any} partsys - The particle system for which information should be retrieved.
 */
declare function particle_get_info(partsys: Any): Struct;

/**
 * With this function you can check to see if a particle system asset with the given index exists or not.
 * @returns {Bool}
 * @param {Asset.GMParticleSystem} ind - The index of the particle system asset to check for.
 */
declare function particle_exists(ind: GMParticleSystem): Bool;

/**
 * This function is used to create a new particle system and will return a unique index number that should be stored and used in all further functions relating to that system. The system will be assigned a managed layer and will be set to have a depth of 0. Managed layers are not accessible to the user and used only for internal management when depth is used instead of layers. Normally you would use the function part_system_create_layer() instead of this one.
 * @returns {Id.ParticleSystem}
 * @param {Asset.GMParticleSystem} partsys - A particle system resource to create an instance of.
 */
declare function part_system_create(partsys: GMParticleSystem): ParticleSystem;

/**
 * This function will create a new particle system on a given layer. You give the unique layer ID as returned by the function layer_create() or the name of the layer to use as a string - for example "instance_layer" - and then flag the system as being persistent or not. If the system is not flagged as persistent then it will be automatically destroyed at the end of the room it was created in (this is the same as if you had called the function part_system_destroy() and will also destroy any emitters associated with the system). However, when flagged as persistent, the system will be carried to the next room when the room is changed, and if the following room does not have a layer with the same name or depth as the one assigned, then a new layer will be created for the system that is persisting across the rooms, and it will be named the same as original layer. When changing rooms, if there is another layer in the following rooms with the same name, then the persisted instance will be assigned to the layer with the that name regardless of the depth of the layer. Finally, if a persisted system moves to a room with a layer at the same depth as the layer the system was created on, it will not be assigned to this layer, but instead a new layer will be created at the same depth (with the same name as the original layer).
 * @returns {Id.ParticleSystem}
 * @param {Any} layer - The layer ID value or string to assign the particle system to (can be any layer type)
 * @param {Bool} persistent - Flag the particle system as persistent (set to true) or not (set to false)
 * @param {Asset.GMParticleSystem} partsys - A particle system resource to create an instance of.
 */
declare function part_system_create_layer(layer: Any,persistent: Bool,partsys: GMParticleSystem): ParticleSystem;

/**
 * With this function you can set the draw depth for the particle system, much the same as you can set the render depth of different layers within the room, where a low draw depth means that it will appear on top of all things drawn with a higher depth, and a high draw depth placing it below everything with a lower draw depth.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change.
 * @param {Real} depth - The depth at which to set the particle system.
 */
declare function part_system_depth(ind: ParticleSystem,depth: Real): Undefined;

/**
 * With this function you can destroy a given particles system and remove it from memory. This should always be called when the system is no longer needed, like at the end of a room, or in the destroy event of an instance, otherwise you could end up with particles appearing in later rooms and no way to remove them as well as a memory leak which will eventually crash your game.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to destroy.
 */
declare function part_system_destroy(ind: ParticleSystem): Undefined;

/**
 * With this function you can force a particle system to draw all the current particles on the screen. If part_system_automatic_draw() is switched off then this function will show the particles when used in the draw event of an instance, or it can be used when the drawing target is set to a surface (using surface_set_target()) to draw the particles in the system to that surface.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to update.
 */
declare function part_system_update(ind: ParticleSystem): Undefined;

/**
 * With this function you can set the way in which particles are drawn when created on the screen. The default system uses an old > new look (the function is set to true), where old particles are drawn at a higher depth than newer ones and so appear "beneath" them new particles, but by setting this function to false you can reverse this order and have the new particles drawn higher and so appear "beneath" the older ones. The images below illustrate this, with the image on the left being the default value of true and the image on the right being false:
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change.
 * @param {Bool} oldtonew - Whether old particles should be drawn behind newer ones (true) or vice versa (false).
 */
declare function part_system_draw_order(ind: ParticleSystem,oldtonew: Bool): Undefined;

/**
 * With this function you can check to see if the given particle system indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle system would otherwise have its index assigned to) this will throw an error.
 * @returns {Bool}
 * @param {Id.ParticleSystem} ind - The index of the particle system to check for.
 */
declare function part_system_exists(ind: ParticleSystem): Bool;

/**
 * This function can be used to retrieve the unique layer ID value for the given particle system. You supply the particle system ID value (as returned by the function part_system_create_layer()) and the function will return the ID value of the layer.
 * @returns {Id.Layer}
 * @param {Id.ParticleSystem} ind - The particle system ID value to get the layer ID of
 */
declare function part_system_get_layer(ind: ParticleSystem): Layer;

/**
 * This function can be used to switch a particle system from its current layer to a new one. You supply the particle system ID value (as returned by the function part_system_create_layer()) and then the unique layer ID (as returned by the function layer_create() or the name of the layer to use as a string - for example "instance_layer" - as defined in the room editor), and the system will be moved to the new layer.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ps - The particle system ID
 * @param {Any} layer - The new layer ID
 */
declare function part_system_layer(ps: ParticleSystem,layer: Any): Undefined;

/**
 * This function can be used to enable global space particles. When enabled, particles keep their position and direction when the particle system is moved or rotated. This is by default disabled.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 * @param {Bool} enable - Enable (true) or disable (false) global space particles.
 */
declare function part_system_global_space(ind: ParticleSystem,enable: Bool): Undefined;

/**
 * This function is used to retrieve information for the given particle system instance. You supply a particle system instance created with part_system_create() and the function returns a struct with the following variables:
 * @returns {Struct}
 * @param {Id.ParticleSystem} partsys - The particle system for which information should be retrieved.
 */
declare function part_system_get_info(partsys: ParticleSystem): Struct;

/**
 * This function can be used to change color and alpha with which the particle system is blended.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change the color and alpha of.
 * @param {Constant.Color} color - The new color with which to blend the particle system. c_white is to display it normally.
 * @param {Real} alpha - The new alpha of the particle system (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function part_system_color(ind: ParticleSystem,color: Color,alpha: Real): Undefined;

/**
 * This function can be used to change colour and alpha with which the particle system is blended.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change the colour and alpha of.
 * @param {Constant.Color} colour - The new colour with which to blend the particle system. c_white is to display it normally.
 * @param {Real} alpha - The new alpha of the particle system (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function part_system_colour(ind: ParticleSystem,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can set the base position for the particle system relative to the (0,0) position of the room, meaning that all further particle functions relating to this system will now be drawn relative to the new position. By default this position is always (0,0), but in some very special circumstances you may wish to change this to something else.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change.
 * @param {Real} x - The new x coordinate of the particle system.
 * @param {Real} y - The new y coordinate of the particle system.
 */
declare function part_system_position(ind: ParticleSystem,x: Real,y: Real): Undefined;

/**
 * This function can be used to change the rotation of the particle system.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to change the rotation of.
 * @param {Real} angle - The new rotation of the particle system in degrees.
 */
declare function part_system_angle(ind: ParticleSystem,angle: Real): Undefined;

/**
 * This function is used to set a particle type to have a single alpha value (transparency) for the total duration of the lifetime of each individual particle, and this can be from 0 (transparent) to 1 (opaque).
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} alpha1 - The alpha of the particle.
 */
declare function part_type_alpha1(ind: ParticleType,alpha1: Real): Undefined;

/**
 * This function can be used to set an alpha value (transparency) gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one on with which the particle will end with, and a smooth gradient change will occur to the alpha over the particles lifetime from one to the other. This can be from 0 (transparent) to 1 (opaque).
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} alpha1 - The start alpha of the particle.
 * @param {Real} alpha2 - The end alpha of the particle.
 */
declare function part_type_alpha2(ind: ParticleType,alpha1: Real,alpha2: Real): Undefined;

/**
 * This function can be used to set a three alpha (transparency) value gradient for each particle created of the given type. The first alpha is that which all particles will start with, and the second alpha is the one that will be blended to half way through its lifetime and the third alpha is the one with which the particle will end with. A smooth gradient change will occur through the alphas over the particles lifetime from one to the other.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} alpha1 - The starting alpha of the particle.
 * @param {Real} alpha2 - The halfway point alpha of the particle.
 * @param {Real} alpha3 - The ending alpha of the particle.
 */
declare function part_type_alpha3(ind: ParticleType,alpha1: Real,alpha2: Real,alpha3: Real): Undefined;

/**
 * With this function you can make your particles be drawn with an additive blend mode (true) or not (false). Additive blending is a special blend mode that adds the luminosity values of each particle as they overlap, so that light colours will gradually get brighter (until they appear white) as they overlap, and dark colours become more and more transparent with black being almost invisible. This function can give some beautiful particle effects but may not always be necessary. For example, a smoke trail would have additive blending off to keep the effect gray, but a flame effect would probably have it on to make the particles more translucent and brighter.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Bool} additive - Whether the particles should be blended additively (true) or normally (false).
 */
declare function part_type_blend(ind: ParticleType,additive: Bool): Undefined;

/**
 * With this function you can "reset" a particle, returning all the values for each of the functions relating to the particle (life, colour, alpha, orientation etc...) to their default values. Note that this function does not remove any particles currently visible in the room from the screen, for that you should be using part_particles_clear().
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to clear.
 */
declare function part_type_clear(ind: ParticleType): Undefined;

/**
 * This function is used to set a particle type to be a single colour for the total duration of the lifetime of each individual particle.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The single colour to make the particle type.
 */
declare function part_type_colour1(ind: ParticleType,colour1: Color): Undefined;

/**
 * This function can be used to set a two colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one on which the particle will end with, and a smooth gradient change will occur to the colour over the particles lifetime from one colour to the other.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The colour the particle will start at.
 * @param {Constant.Color} colour2 - The colour the particle will end at.
 */
declare function part_type_colour2(ind: ParticleType,colour1: Color,colour2: Color): Undefined;

/**
 * This function can be used to set a three colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one that will be blended to half way through its lifetime and the third colour is the one with which the particle will end with. A smooth gradient change will occur through the colours over the particles lifetime from one colour to the other.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The colour the particle will start at.
 * @param {Constant.Color} colour2 - The colour the particle will be halfway through its lifespan.
 * @param {Constant.Color} colour3 - The colour the particle will end at.
 */
declare function part_type_colour3(ind: ParticleType,colour1: Color,colour2: Color,colour3: Color): Undefined;

/**
 * With this function you can set a hue, saturation and value range for all particles of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. In this way you can create particles of the same hue but different saturations, or of different hues but the same value (luminosity) etc... All values must be between 0 and 255.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} hmin - The minimum the final colour's hue component can be.
 * @param {Real} hmax - The maximum the final colour's hue component can be.
 * @param {Real} smin - The minimum the final colour's saturation component can be.
 * @param {Real} smax - The maximum the final colour's saturation component can be.
 * @param {Real} vmin - The minimum the final colour's value component can be.
 * @param {Real} vmax - The maximum the final colour's value component can be.
 */
declare function part_type_colour_hsv(ind: ParticleType,hmin: Real,hmax: Real,smin: Real,smax: Real,vmin: Real,vmax: Real): Undefined;

/**
 * With this function you can set the given particle type to be a random blend of two colours.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The first colour the blend will take from.
 * @param {Constant.Color} colour2 - The second colour the blend will take from.
 */
declare function part_type_colour_mix(ind: ParticleType,colour1: Color,colour2: Color): Undefined;

/**
 * With this function you can set the mix of red, green and blue colours for all particles created of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. All values must be between 0 and 255.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} rmin - The minimum the final colour's red component can be.
 * @param {Real} rmax - The maximum the final colour's red component can be.
 * @param {Real} gmin - The minimum the final colour's green component can be.
 * @param {Real} gmax - The maximum the final colour's green component can be.
 * @param {Real} bmin - The minimum the final colour's blue component can be.
 * @param {Real} bmax - The maximum the final colour's blue component can be.
 */
declare function part_type_colour_rgb(ind: ParticleType,rmin: Real,rmax: Real,gmin: Real,gmax: Real,bmin: Real,bmax: Real): Undefined;

/**
 * With this function you can create a new particle type and the return value should be stored in a variable for use in all subsequent particle functions.
 * @returns {Id.ParticleType}
 */
declare function part_type_create(): ParticleType;

/**
 * This function can be used to make your particle burst another type of particle at the end of its lifetime.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} death_number - The quantity of the new particle to create at the particle death. If a negative value, it will instead create a fraction chance one is created (eg -3 would mean that one is created every 3 or so steps).
 * @param {Id.ParticleType} death_type - The index of the particle type to create.
 */
declare function part_type_death(ind: ParticleType,death_number: Real,death_type: ParticleType): Undefined;

/**
 * With this function you can remove the specified particle type from the game. When you use this function, all particles of the given type will disappear from the room and the particle itself is removed form memory, so this function should be used only when you no longer need the particle.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to destroy.
 */
declare function part_type_destroy(ind: ParticleType): Undefined;

/**
 * This function is used to determine the direction of the particle when it is created and can also be used to make the particle increase or decrease its direction over its lifetime. The minimum and maximum direction values default at 0, which means that the particle will move to the right with no variation, but these values can be changed to limit the direction of movement following the standard GameMaker directions of 0 being right, 90 being up, 180 being left and 270 being down. If you set them to the same value the particles will only move in one direction.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} dir_min - The minimum direction the particle can start at.
 * @param {Real} dir_max - The maximum direction the particle can start at.
 * @param {Real} dir_incr - How much the particle direction should increase or decrease per step.
 * @param {Real} dir_wiggle - How much should randomly be added or subtracted from the particle's direction per step.
 */
declare function part_type_direction(ind: ParticleType,dir_min: Real,dir_max: Real,dir_incr: Real,dir_wiggle: Real): Undefined;

/**
 * With this function you can check to see if the given particle type indexed exists in the game or not. Note that if the variable being checked is an uninitialised variable (that a particle type would otherwise have its index assigned to) this will throw an error.
 * @returns {Bool}
 * @param {Id.ParticleType} ind - The index of the particle type to check for.
 */
declare function part_type_exists(ind: ParticleType): Bool;

/**
 * This function will set the gravity that is to affect each particle of the given type that is created. The gravity strength value is added to the particle speed every step and is usually a small value like 0.5, while the direction is the direction of the gravity "pull" and follows the standard GameMaker directions of 0░ being right, 90░ being up, 180░ being left and 270░ being down.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} grav_amount - Strength of the gravity.
 * @param {Real} grav_direction - The direction of the gravity.
 */
declare function part_type_gravity(ind: ParticleType,grav_amount: Real,grav_direction: Real): Undefined;

/**
 * This is the function that governs how long each individual particle of the indicated type remains on the screen. As with other particle functions, you provide a minimum and a maximum value (in steps)and each particle lifespan will be a random number of steps from within the specified range. To have all particles with the same lifetime, set the two values to be the same.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} life_min - The minimum lifespan of the particles.
 * @param {Real} life_max - The maximum lifespan of the particles.
 */
declare function part_type_life(ind: ParticleType,life_min: Real,life_max: Real): Undefined;

/**
 * This function is used to determine the orientation of the particle sprite when it is created and can also be used to make the particle orientation increase or decrease over its lifetime. The minimum and maximum orientation values default at 0 but these values can be changed to randomise the orientation following the standard GameMaker directions of 0 degrees being right, 90 degrees being up, 180 degrees being left and 270 degrees being down. If you set them to the same value the particles will all be created with the same orientation.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} ang_min - The minimum starting angle of the particles.
 * @param {Real} ang_max - The maximum starting angle of the particles.
 * @param {Real} ang_incr - The increase (or decrease if set negative) of the angle in degrees per step.
 * @param {Real} ang_wiggle - The amount the angle wiggles clockwise/counterclockwise per step.
 * @param {Bool} ang_relative - Whether to set its angle relative to the direction of the particle's motion (true) or not (false).
 */
declare function part_type_orientation(ind: ParticleType,ang_min: Real,ang_max: Real,ang_incr: Real,ang_wiggle: Real,ang_relative: Bool): Undefined;

/**
 * This function will set the horizontal and vertical scale of the particle before any other size changes are made. This function works on the ratio of the sprite size, so a value of 1 (the default value) is a 1:1 ratio, meaning that 0.5 would be half and 2 double.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} xscale - The horizontal scaling of the base particle.
 * @param {Real} yscale - The vertical scaling of the base particle.
 */
declare function part_type_scale(ind: ParticleType,xscale: Real,yscale: Real): Undefined;

/**
 * With this function you can set the sprite shape to use for the particle type, with the following constants being acceptable:
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to set.
 * @param {Constant.ParticleShape} shape - The shape to choose.
 */
declare function part_type_shape(ind: ParticleType,shape: ParticleShape): Undefined;

/**
 * This function is used to determine the size of the particle when it is created and can also be used to make the particle increase or decrease in size over its lifetime. The minimum and maximum size values default at 1 (meaning that the size is the same ratio as the base particle after the part_type_scale() scale has been set) and if they are set to the same value, the initial size for all particles will be the same, but if set to different values, each particle will start with a random size from within the range, for example if you have a minimum of 0.5 and a maximum of 2, all particles will be created with a size between half and double the base scale.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} size_min - The minimum size the particle can start at.
 * @param {Real} size_max - The maximum size the particle can start at.
 * @param {Real} size_incr - How much the particle should increase or decrease per step.
 * @param {Real} size_wiggle - How much should randomly be added or subtracted from the particles size per step.
 */
declare function part_type_size(ind: ParticleType,size_min: Real,size_max: Real,size_incr: Real,size_wiggle: Real): Undefined;

/**
 * This function is used to configure particle size similarly to part_type_size(), except only for the x axis. You can use function part_type_size_y() to configure the size on the y axis separately as well.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} size_min - The minimum size the particle can start at on the x axis.
 * @param {Real} size_max - The maximum size the particle can start at on the x axis.
 * @param {Real} size_incr - How much the particle should increase or decrease on the x axis per step.
 * @param {Real} size_wiggle - How much should randomly be added or subtracted from the particles size on the x axis per step.
 */
declare function part_type_size_x(ind: ParticleType,size_min: Real,size_max: Real,size_incr: Real,size_wiggle: Real): Undefined;

/**
 * This function is used to configure particle size similarly to part_type_size(), except only for the y axis. You can use function part_type_size_x() to configure the size on the x axis separately as well.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} size_min - The minimum size the particle can start at on the y axis.
 * @param {Real} size_max - The maximum size the particle can start at on the y axis.
 * @param {Real} size_incr - How much the particle should increase or decrease on the y axis per step.
 * @param {Real} size_wiggle - How much should randomly be added or subtracted from the particles size on the y axis per step.
 */
declare function part_type_size_y(ind: ParticleType,size_min: Real,size_max: Real,size_incr: Real,size_wiggle: Real): Undefined;

/**
 * This function is used to set the movement speed of the particle when it is created and can also be used to make the particle increase or decrease its speed over its lifetime. The minimum and maximum speed values default at 1, which means that the particle will move 1 pixel each step, and if they are set to the same value, the initial speed for all particles will be the same, but if set to different values, each particle will start with a random speed from within the given range. For example if you have a minimum of 3 and a maximum of 6, all particles will be created with a speed between three and six pixels per step.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} speed_min - The minimum speed the particle can start at.
 * @param {Real} speed_max - The maximum speed the particle can start at.
 * @param {Real} speed_incr - How much the particle speed should increase or decrease per step.
 * @param {Real} speed_wiggle - How much should randomly be added or subtracted from the particle's speed per step.
 */
declare function part_type_speed(ind: ParticleType,speed_min: Real,speed_max: Real,speed_incr: Real,speed_wiggle: Real): Undefined;

/**
 * This function can be used to set a particle type to use a custom sprite from the game assets. You can select the sprite and then tell GameMaker to use the sprite and animate it or not, and if you choose animated, then you can also choose to have the sub-images changed at an interval such that the animation will begin and end at the beginning and end of the lifetime of each particle created (so that if you have a lifetime set to a 15 step minimum and a 30 step maximum, no matter what value the lifetime has the animation will be made to fit, with it running faster for the shorter lifetimes and slower for the longer). You can also select to choose a random sub-image so that if the sprite is not animated, a different image will be chosen at random to create the sprite, or if the particle is animated it will start the animation at a random point.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Asset.GMSprite} sprite - The index of the sprite to set the particle type to.
 * @param {Bool} animate - Whether to follow the sprite's animation normally (true) or not (false).
 * @param {Bool} stretch - Whether to stretch the sprite's animation to match the particle lifespan (true) or not (false).
 * @param {Bool} random - Whether to choose a random sub-image (true) or not (false).
 */
declare function part_type_sprite(ind: ParticleType,sprite: GMSprite,animate: Bool,stretch: Bool,random: Bool): Undefined;

/**
 * This function can be used to set a particle type to use a custom sub-image (frame) of a sprite. If the particle's sprite is animated, then this sub-image will be used as the starting frame of the animation.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} subimg - The sub-image (frame) of the sprite to use.
 */
declare function part_type_subimage(ind: ParticleType,subimg: Real): Undefined;

/**
 * This function can be used to make your particle type stream another type each step until the end of its lifetime. You can set a negative value for the step number and a particle will be emitted at a random interval based on that, so that, for example, a value of -3 will have a 1:3 chance of emitting a particle each step.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} step_number - The quantity of the new particle to create per step.
 * @param {Id.ParticleType} step_type - The index of the particle type to create.
 */
declare function part_type_step(ind: ParticleType,step_number: Real,step_type: ParticleType): Undefined;

/**
 * This function must be called before you can define any primitives. There are 6 types of primitives you can define with the following constants:
 * @returns {Undefined}
 * @param {Constant.PrimitiveType} kind - The kind of primitive you are going to draw.
 */
declare function draw_primitive_begin(kind: PrimitiveType): Undefined;

/**
 * This function must be called before you define the vertices of a textured primitive. You must give the kind of primitive to use (see draw_primitive_begin() for more information) and the id of a texture to use, which can be a sprite or background image asset. This asset id can be gotten from the functions sprite_get_texture(), for example (use -1 for no texture).
 * @returns {Undefined}
 * @param {Constant.PrimitiveType} kind - The kind of primitive you are going to draw.
 * @param {Any} tex - The texture to use with the primitive.
 */
declare function draw_primitive_begin_texture(kind: PrimitiveType,tex: Any): Undefined;

/**
 * This function must be called when you have finished defining the points of your primitive. If you do not call this function, nothing will be drawn as this effectively tells GameMaker that you have finished and that it can now draw the defined primitive.
 * @returns {Undefined}
 */
declare function draw_primitive_end(): Undefined;

/**
 * This function defines the position of a vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it. See draw_primitive_begin() for more information. To end and draw the primitive you must call draw_primitive_end().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the vertex.
 * @param {Real} y - The y coordinate of the vertex.
 */
declare function draw_vertex(x: Real,y: Real): Undefined;

/**
 * This function defines the position of a vertex for a primitive, with its own colour and alpha setting. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it (see draw_primitive_begin() for more information) and the vertexes with different colours and alphas will blend smoothly from one to the other. To end and draw the primitive you must call draw_primitive_end().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the vertex.
 * @param {Real} y - The y coordinate of the vertex.
 * @param {Constant.Color} col - The colour to draw this vertex with.
 * @param {Real} alpha - The alpha to draw this vertex with (0-1).
 */
declare function draw_vertex_colour(x: Real,y: Real,col: Color,alpha: Real): Undefined;

/**
 * This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See draw_primitive_begin() for more information), the order with which you add the vertexes to it and the position of the start point you set for the texture. To end and draw the primitive you must call draw_primitive_end().
 * @returns {Undefined}
 * @param {Real} x - None
 * @param {Real} y - None
 * @param {Real} xtex - None
 * @param {Real} ytex - None
 */
declare function draw_vertex_texture(x: Real,y: Real,xtex: Real,ytex: Real): Undefined;

/**
 * This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See draw_primitive_begin() for more information), the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value of -1 (or c_white) may be used for the colour argument. To end and draw the primitive you must call draw_primitive_end().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the vertex.
 * @param {Real} y - The y coordinate of the vertex.
 * @param {Real} xtex - The x coordinate within the texture.
 * @param {Real} ytex - The y coordinate within the texture.
 * @param {Constant.Color} col - The colour to blend with the texture at this vertex (-1 or c_white for no blending).
 * @param {Real} alpha - The alpha to draw this vertex with (0-1).
 */
declare function draw_vertex_texture_colour(x: Real,y: Real,xtex: Real,ytex: Real,col: Color,alpha: Real): Undefined;

/**
 * This function will set the ARGB values for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the red, green, blue and alpha values that you wish to use as a single 32-bit unsigned integer - alpha sample in the highest 8 bits, followed by the red sample, green sample and finally the blue sample in the lowest 8 bits. You can use hex notation ($AARRGGBB) a real number or use any of the make_colour_*() functions to define the colour value.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} argb - The ARGB value to set.
 */
declare function vertex_argb(buffer: VertexBuffer,argb: Real): Undefined;

/**
 * With this function you begin the definition of a custom primitive. You assign a buffer to write the primitive to, and the vertex format to use (previously defined using the vertex format functions). You would then define the necessary points for each vertex of the primitive before calling vertex_end() to finalise the primitive creation.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to be written to.
 * @param {Id.VertexFormat} format - The vertex format to use.
 */
declare function vertex_begin(buffer: VertexBuffer,format: VertexFormat): Undefined;

/**
 * If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a colour constant, or a hex value (using the standard GameMaker format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Constant.Color} colour - The colour for this vertex (can be a constant or a hex value).
 * @param {Real} alpha - The alpha value for the vertex (from 0 to 1).
 */
declare function vertex_colour(buffer: VertexBuffer,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can create a new vertex buffer. This is a special grow buffer created by GameMaker which is pre-formatted for use when building primitives (for use with shaders, for example). The function will return a "Pointer" (index) for the buffer which should then be used in all further calls to it.
 * @returns {Id.VertexBuffer}
 */
declare function vertex_create_buffer(): VertexBuffer;

/**
 * As with the function vertex_create_buffer(), this function will create a new vertex buffer. This is a special grow buffer created by GameMaker which is pre-formatted for use when building primitives for use with shaders. You can specify an initial starting size for the buffer (in bytes) and it will return a "handle" (index) for the buffer which should then be used in all further calls to the buffer.
 * @returns {Id.VertexBuffer}
 * @param {Real} size - The initial size of the buffer (in bytes).
 */
declare function vertex_create_buffer_ext(size: Real): VertexBuffer;

/**
 * As with the function vertex_create_buffer(), this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer created is a special grow buffer which is pre-formatted with the vertex format for building primitives for use with (for example) shaders. This function requires that you supply the pointer to a previously created regular buffer, and a vertex format that should be applied to the copied data.
 * @returns {Id.VertexBuffer}
 * @param {Id.Buffer} buffer - The buffer to create the vertex buffer from.
 * @param {Id.VertexFormat} format - The primitive vertex format to use.
 */
declare function vertex_create_buffer_from_buffer(buffer: Buffer,format: VertexFormat): VertexBuffer;

/**
 * As with the function vertex_create_buffer(), this function will create a new vertex buffer, only now the vertex data it stores is copied from the regular buffer that is specified as the source. The buffer is pre-formatted with the vertex format for building primitives for use with (for example) shaders, and you can also supply an offset within the source buffer to copy from and the number of vertices that the final buffer should have. Note that if the number of vertices does not match those being copied you may get corrupted vertex data.
 * @returns {Id.VertexBuffer}
 * @param {Id.Buffer} buffer - The buffer to create the vertex buffer from.
 * @param {Id.VertexFormat} format - The primitive vertex format to use.
 * @param {Real} src_offset - The offset within the the source buffer to copy from.
 * @param {Real} vert_num - The number of vertices the buffer should have.
 */
declare function vertex_create_buffer_from_buffer_ext(buffer: Buffer,format: VertexFormat,src_offset: Real,vert_num: Real): VertexBuffer;

/**
 * This function updates contents of a vertex buffer using data from a regular buffer. The vertex buffer must not be frozen!
 * @returns {Undefined}
 * @param {Id.VertexBuffer} dest_vbuff - The vertex buffer to copy to.
 * @param {Real} dest_offset - The offset (in bytes) within the vertex buffer to copy to.
 * @param {Id.Buffer} src_buffer - The buffer to copy data from.
 * @param {Real} src_offset - The offset (in bytes) within the buffer to copy from.
 * @param {Real} src_size - The size (in bytes) of data to be copied.
 */
declare function vertex_update_buffer_from_buffer(dest_vbuff: VertexBuffer,dest_offset: Real,src_buffer: Buffer,src_offset: Real,src_size: Real): Undefined;

/**
 * This function updates contents of a vertex buffer using contents of another vertex buffer. The vertex buffers must not be frozen!
 * @returns {Undefined}
 * @param {Id.VertexBuffer} dest_vbuff - The destination vertex buffer to copy to.
 * @param {Real} dest_vert - The index of the first vertex within the destination vertex buffer to copy to.
 * @param {Id.VertexBuffer} src_vbuff - The source vertex buffer to copy vertices from.
 * @param {Real} src_vert - The index of the first vertex to copy from the source vertex buffer.
 * @param {Real} src_vert_num - The number of vertices to copy.
 */
declare function vertex_update_buffer_from_vertex(dest_vbuff: VertexBuffer,dest_vert: Real,src_vbuff: VertexBuffer,src_vert: Real,src_vert_num: Real): Undefined;

/**
 * This function can be used to remove a previously created vertex buffer (see vertex_create_buffer()) from system memory. This will also remove all vertex data for any custom primitives that it contained.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to be removed.
 */
declare function vertex_delete_buffer(buffer: VertexBuffer): Undefined;

/**
 * With this function you end the building of the custom primitive. Once you call this command the primitive can be used in the vertex_submit() function for use in a shader or you can freeze the buffer (making the vertex buffer used read-only and much faster) using vertex_freeze().
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to end writing to.
 */
declare function vertex_end(buffer: VertexBuffer): Undefined;

/**
 * This function will add a floating point value to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} float - The input value.
 */
declare function vertex_float1(buffer: VertexBuffer,float: Real): Undefined;

/**
 * This function will add two floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} float - The first input value.
 * @param {Real} float - The second input value.
 */
declare function vertex_float2(buffer: VertexBuffer,float: Real,float: Real): Undefined;

/**
 * This function will add three floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} float - The first input value.
 * @param {Real} float - The second input value.
 * @param {Real} float - The third input value.
 */
declare function vertex_float3(buffer: VertexBuffer,float: Real,float: Real,float: Real): Undefined;

/**
 * This function will add four floating point values to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} float - The first input value.
 * @param {Real} float - The second input value.
 * @param {Real} float - The third input value.
 * @param {Real} float - The fourth input value.
 */
declare function vertex_float4(buffer: VertexBuffer,float: Real,float: Real,float: Real,float: Real): Undefined;

/**
 * Tell GameMaker to accept colour data as part of the new vertex format being created.
 * @returns {Undefined}
 */
declare function vertex_format_add_colour(): Undefined;

/**
 * This function permits you to use a custom data type for specific vertex format attributes as part of the new vertex format being created. The available values to use are defined by the data type constant that you choose, listed below:
 * @returns {Undefined}
 * @param {Constant.VertexType} type - The data type that this custom vertex data will hold (see the type constants listed below).
 * @param {Constant.VertexUsage} usage - The use that the data will get(see the usage constants listed below).
 */
declare function vertex_format_add_custom(type: VertexType,usage: VertexUsage): Undefined;

/**
 * Tell GameMaker to accept surface normal data (nx, ny and nz) as part of the new vertex format being created.
 * @returns {Undefined}
 */
declare function vertex_format_add_normal(): Undefined;

/**
 * Tell GameMaker to accept 2D positional data (x and y) as part of the new vertex format being created.
 * @returns {Undefined}
 */
declare function vertex_format_add_position(): Undefined;

/**
 * Tell GameMaker to accept 3D positional data (x, y and z) as part of the new vertex format being created.
 * @returns {Undefined}
 */
declare function vertex_format_add_position_3d(): Undefined;

/**
 * Tell GameMaker to accept texture position data (u and v) as part of the new vertex format being created.
 * @returns {Undefined}
 */
declare function vertex_format_add_texcoord(): Undefined;

/**
 * Before you can define your new vertex format you must tell GameMaker that you're doing so using this function. You must call this first, then define the format values using the appropriate functions, and finally call vertex_format_end() to finish the definition and return the new format "handle".
 * @returns {Undefined}
 */
declare function vertex_format_begin(): Undefined;

/**
 * This function must be called whenever you are finished using any created vector formats. You provide the format ID value (as returned by the function vector_format_end()), and this function will free the memory associated with it. Note that if you try to use this format again after calling this function, you will get an error.
 * @returns {Undefined}
 * @param {Id.VertexFormat} format_id - None
 */
declare function vertex_format_delete(format_id: VertexFormat): Undefined;

/**
 * This function must be called after defining any new vertex format. It returns the new format "handle" (index) which must be used in all further vertex functions that refer to this new format.
 * @returns {Id.VertexFormat}
 */
declare function vertex_format_end(): VertexFormat;

/**
 * This function is used to retrieve information for the given vertex format. You supply a vertex format index and the function returns a struct with the following variables:
 * @returns {Struct.VertexFormatInfo}
 * @param {Id.VertexFormat} format_id - The vertex format for which information should be retrieved.
 */
declare function vertex_format_get_info(format_id: VertexFormat): VertexFormatInfo;

/**
 * This function can be used to "freeze" a vertex buffer. this buffer becomes read-only, meaning that should you need to change it, you would have to delete the whole buffer and re-create it. A frozen buffer can be submitted to the shader faster than a normal, dynamic buffer and is recommended for those effects that require an unchanging custom primitive for the duration of a level or the game.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to freeze.
 */
declare function vertex_freeze(buffer: VertexBuffer): Undefined;

/**
 * With this function you can get the size of the given vertex buffer in bytes.
 * @returns {Real}
 * @param {Id.VertexBuffer} buffer - The buffer to get the size of.
 */
declare function vertex_get_buffer_size(buffer: VertexBuffer): Real;

/**
 * With this function you can find out the number of individual vertices defined in any given vertex buffer.
 * @returns {Real}
 * @param {Id.VertexBuffer} buffer - The vertex buffer to check.
 */
declare function vertex_get_number(buffer: VertexBuffer): Real;

/**
 * This function will add surface normal data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z component parts of the normal.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} nx - The x component of the surface normal.
 * @param {Real} ny - The y component of the surface normal.
 * @param {Real} nz - The z component of the surface normal.
 */
declare function vertex_normal(buffer: VertexBuffer,nx: Real,ny: Real,nz: Real): Undefined;

/**
 * This function will add 2D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x and y position for drawing.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} x - The x position.
 * @param {Real} y - The y position.
 */
declare function vertex_position(buffer: VertexBuffer,x: Real,y: Real): Undefined;

/**
 * This function will add 3D position data to the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the x, y and z position for drawing.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} x - The x position.
 * @param {Real} y - The y position.
 * @param {Real} z - The z position.
 */
declare function vertex_position_3d(buffer: VertexBuffer,x: Real,y: Real,z: Real): Undefined;

/**
 * You can use this function to submit the contents of a vertex buffer to the graphics pipeline. You supply the buffer index to use, the base primitive type to use (see the constants below) and the texture that is to be used. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to use.
 * @param {Constant.PrimitiveType} primitive - The primitive base type.
 * @param {Any} texture - The texture to use (or -1 for no texture).
 */
declare function vertex_submit(buffer: VertexBuffer,primitive: PrimitiveType,texture: Any): Undefined;

/**
 * You can use this function to submit the contents of a vertex buffer to the graphics pipeline. You supply the buffer index to use, the base primitive type to use (see the constants below), the texture that is to be used, the index of the first vertex to start submitting form and number of vertices to submit. The base primitive type is only used for assigning the order in which the vertexes that you stored in the buffer are drawn and connected, but the actual data used for each of the vertexes will be that which you defined when creating the vertex buffer.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to use.
 * @param {Constant.PrimitiveType} primitive - The primitive base type.
 * @param {Any} texture - The texture to use (or -1 for no texture).
 * @param {Real} offset - The index of the first vertex to submit. Must be a positive number.
 * @param {Real} number - Number of vertices to submit. Use -1 to submit all vertices after given offset.
 */
declare function vertex_submit_ext(buffer: VertexBuffer,primitive: PrimitiveType,texture: Any,offset: Real,number: Real): Undefined;

/**
 * This function will set the texture coordinates to use for the vertex currently being defined for the custom primitive. You supply the buffer to write the data into as well as the UV position within the texture to use.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} u - The first texture coordinate to use (0 - 1).
 * @param {Real} v - The second texture coordinate to use (0 - 1).
 */
declare function vertex_texcoord(buffer: VertexBuffer,u: Real,v: Real): Undefined;

/**
 * This function will add four unsigned byte values (0 - 255) to the vertex data. The vertex must have been formatted correctly to accept this using the vertex_format_add_custom() function.
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Real} byte - The first input value.
 * @param {Real} byte - The second input value.
 * @param {Real} byte - The third input value.
 * @param {Real} byte - The fourth input value.
 */
declare function vertex_ubyte4(buffer: VertexBuffer,byte: Real,byte: Real,byte: Real,byte: Real): Undefined;

/**
 * With this function you can enable or disable anti-aliasing (AA) for SWF format vector sprites. AA simply smooths the edges of vector images to give them a nicer look. The amount of AA used will depend on the value set using the function draw_set_swf_aa_level(). By default this is disabled.
 * @returns {Undefined}
 * @param {Bool} enable - Enable (true) or disable (false) AA for all SWF sprites.
 */
declare function draw_enable_swf_aa(enable: Bool): Undefined;

/**
 * This function can be used to get the anti-aliasing (AA) level for SWF format vector sprites. The return value will between 0 and 1 and shows how "smooth" the edges of these sprites will be drawn. You can set the AA level using the function draw_set_swf_aa_level().
 * @returns {Real}
 */
declare function draw_get_swf_aa_level(): Real;

/**
 * This function draws the sprite assigned to the instance exactly as it would be drawn if the draw event held no code or actions, and will reflect and changes that have been made to the sprite variables in other events.
 * @returns {Undefined}
 */
declare function draw_self(): Undefined;

/**
 * This function can be used to set the anti-aliasing (AA) level for SWF format vector sprites. This can be a real value from 0 to 1 and will "smooth" the edges of these sprites. Note that to see this effect, you must first have enabled AA using the function draw_enable_swf_aa().
 * @returns {Undefined}
 * @param {Real} aa - The anti-aliasing value to use from 0 to 1.
 */
declare function draw_set_swf_aa_level(aa: Real): Undefined;

/**
 * With this function you can enable or disable anti-aliasing (AA) for SVG format vector sprites. AA simply smooths the edges of vector images to give them a nicer look. The amount of AA used will depend on the value set using the function draw_set_svg_aa_level(). By default this is disabled.
 * @returns {Undefined}
 * @param {Bool} enable - Enable (true) or disable (false) AA for all SVG sprites.
 */
declare function draw_enable_svg_aa(enable: Bool): Undefined;

/**
 * This function can be used to get the anti-aliasing (AA) level for SVG format vector sprites. The return value will between 0 and 1 and shows how "smooth" the edges of these sprites will be drawn. You can set the AA level using the function draw_set_svg_aa_level().
 * @returns {Real}
 */
declare function draw_get_svg_aa_level(): Real;

/**
 * This function can be used to set the anti-aliasing (AA) level for SVG format vector sprites. This can be a real value from 0 to 1 and will "smooth" the edges of these sprites. Note that to see this effect, you must first have enabled AA using the function draw_enable_svg_aa().
 * @returns {Undefined}
 * @param {Real} aa - The anti-aliasing value to use from 0 to 1.
 */
declare function draw_set_svg_aa_level(aa: Real): Undefined;

/**
 * This function draws the given sprite and sub-image at a position within the game room. For the sprite you can use the instance variable sprite_index to get the current sprite that is assigned to the instance running the code, or you can use any other sprite asset. The same goes for the sub-image, as this can also be set to the instance variable image_index which will set the sub-image to that selected for the current instance sprite (note, that you can draw a different sprite and still use the sub-image value for the current instance), or you can use any other value for this to draw a specific sub-image of the chosen sprite. If the value is larger than the number of sub-images, then GameMaker will automatically loop the number to select the corresponding image (for example, if the sprite being drawn has 5 sub-images numbered 0 to 4 and we set the index value to 7, then the function will draw sub-image 3, numbered 0). Finally, the x and y position is the position within the room that the sprite will be drawn, and it is centered on the sprite x offset and y offset.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The sub-image (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 */
declare function draw_sprite(sprite: GMSprite,subimg: Real,x: Real,y: Real): Undefined;

/**
 * This function will draw the given sprite as in the function draw_sprite() but with additional options to change the scale, blending, rotation and alpha of the sprite being drawn. Changing these values does not modify the resource in any way (only how it is drawn), and you can use any of the available sprite variables instead of direct values for all the arguments in the function. The image below illustrates how different values affect the drawing of the sprite:
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the sprite. 0=right way up, 90=rotated 90 degrees counter-clockwise etc...
 * @param {Constant.Color} colour - The colour with which to blend the sprite. c_white is to display it normally.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_sprite_ext(sprite: GMSprite,subimg: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Undefined;

/**
 * This function combines the function draw_sprite_ext() with the function draw_sprite_part(), adding in some additional blending options so that each corner of the final sprite part can be blended with an individual colour.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} left - The x position on the sprite of the top left corner of the area to draw.
 * @param {Real} top - The y position on the sprite of the top left corner of the area to draw.
 * @param {Real} width - The width of the area to draw.
 * @param {Real} height - The height of the area to draw.
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the sprite. 0=normal, 90=turned 90 degrees counter-clockwise etc.
 * @param {Constant.Color} c1 - The colour with which to blend the top left area of the sprite.
 * @param {Constant.Color} c2 - The colour with which to blend the top right area of the sprite.
 * @param {Constant.Color} c3 - The colour with which to blend the bottom right area of the sprite.
 * @param {Constant.Color} c4 - The colour with which to blend the bottom left area of the sprite.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_sprite_general(sprite: GMSprite,subimg: Real,left: Real,top: Real,width: Real,height: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * With this function you can draw part of any sprite at a given position within the room. As with draw_sprite() you can specify a sprite and a sub-image for drawing, then you must give the relative coordinates within the sprite of the area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the sprite and all further coordinates should be taken from that position. The image below shows an example of how this works:
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} left - The x position on the sprite of the top left corner of the area to draw.
 * @param {Real} top - The y position on the sprite of the top left corner of the area to draw.
 * @param {Real} width - The width of the area to draw.
 * @param {Real} height - The height of the area to draw.
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 */
declare function draw_sprite_part(sprite: GMSprite,subimg: Real,left: Real,top: Real,width: Real,height: Real,x: Real,y: Real): Undefined;

/**
 * This function will draw a part of the chosen sprite at the given position following the same rules as per draw_sprite_part(), only now you can scale the part, blend a colour with it, or change its alpha when drawing it to the screen (the same as when drawing a sprite with draw_sprite_ext()). You should note that if the texture page permits automatic cropping then this function may not work as expected, since the extra "empty" space around the sprite will have been removed for creating the texture page. To resolve this issue, you will need to set the texture page settings (in the Texture Group Editor) to disable the Automatic Crop.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} left - The x position on the sprite of the top left corner of the area to draw.
 * @param {Real} top - The y position on the sprite of the top left corner of the area to draw.
 * @param {Real} width - The width of the area to draw.
 * @param {Real} height - The height of the area to draw.
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the sprite, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Constant.Color} colour - The colour with which to blend the sprite. c_white is to display it normally.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_sprite_part_ext(sprite: GMSprite,subimg: Real,left: Real,top: Real,width: Real,height: Real,x: Real,y: Real,xscale: Real,yscale: Real,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can draw a sprite distorted over the area defined by the four corner coordinates. The first two arguments are the sprite to draw and the sub-image of the sprite (the same as in the function draw_sprite()) but the next ones are those that define the position of each of the four corners of the bounding box of the given sprite. These should be given in clockwise order, so the first coordinate is the top left, then the top right, then bottom right and finally the bottom left. You can also set a value for the alpha of the sprite to draw it with transparency. The image below illustrates how this function works:
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x1 - The first x coordinate.
 * @param {Real} y1 - The first y coordinate.
 * @param {Real} x2 - The second x coordinate.
 * @param {Real} y2 - The second y coordinate.
 * @param {Real} x3 - The third x coordinate.
 * @param {Real} y3 - The third y coordinate.
 * @param {Real} x4 - The fourth x coordinate.
 * @param {Real} y4 - The fourth y coordinate.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_sprite_pos(sprite: GMSprite,subimg: Real,x1: Real,y1: Real,x2: Real,y2: Real,x3: Real,y3: Real,x4: Real,y4: Real,alpha: Real): Undefined;

/**
 * This function simply takes a sprite resource and stretches it over the given width and height so that it occupies that area. As with draw_sprite() you can specify a sprite and a sub-image for drawing, then the x / y position in the room for the sprite to be drawn at and finally a width and a height (which must be pixel values). The image below shows the result of this function with different sets of arguments:
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} w - The width of the area the stretched sprite will occupy.
 * @param {Real} h - The height of the area the stretched sprite will occupy.
 */
declare function draw_sprite_stretched(sprite: GMSprite,subimg: Real,x: Real,y: Real,w: Real,h: Real): Undefined;

/**
 * This function does exactly the same as the draw_sprite_stretched() function with the added ability to set the colour blending and alpha value for the sprite when it is drawn (similar to the function draw_sprite_ext()).
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} w - The width of the area the stretched sprite will occupy.
 * @param {Real} h - The height of the area the stretched sprite will occupy.
 * @param {Constant.Color} colour - The colour with which to blend the sprite. c_white is to display it normally.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_sprite_stretched_ext(sprite: GMSprite,subimg: Real,x: Real,y: Real,w: Real,h: Real,colour: Color,alpha: Real): Undefined;

/**
 * This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function. Tiling is based on the width and height of the sprite as defined by the sprite variables of the instance running the code. This function is for 2D (orthographic) projections only, and will not work correctly when a 3D camera projection is used.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 */
declare function draw_sprite_tiled(sprite: GMSprite,subimg: Real,x: Real,y: Real): Undefined;

/**
 * This function will take a sprite and then repeatedly tile it across the whole view (or room if no view is defined), starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same as those used in draw_sprite_ext()). This function is for 2D (orthographic) projections only, and will not work correctly when a 3D camera projection is used.
 * @returns {Undefined}
 * @param {Asset.GMSprite} sprite - The index of the sprite to draw.
 * @param {Real} subimg - The subimg (frame) of the sprite to draw (image_index or -1 correlate to the current frame of animation in the object).
 * @param {Real} x - The x coordinate of where to draw the sprite.
 * @param {Real} y - The y coordinate of where to draw the sprite.
 * @param {Real} xscale - The horizontal scaling of the sprite. A multiplier ' 1 = normal scaling, 0.5 is half etc.
 * @param {Real} yscale - The vertical scaling of the sprite. A multiplier ' 1 = normal scaling, 0.5 is half etc.
 * @param {Constant.Color} colour - The colour with which to blend the sprite. c_white is to display it normally.
 * @param {Real} alpha - The alpha of the sprite (from 0 to 1 where 0 is transparent and 1 opaque).
 */
declare function draw_sprite_tiled_ext(sprite: GMSprite,subimg: Real,x: Real,y: Real,xscale: Real,yscale: Real,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can draw any given tile from a tile set - compete with rotations, flips and mirrors - setting the frame (if animated) and the position within the room. The tile set ID value is the tile set index as set in the IDE and the tile data is the data "blob" that contains all the information about the tile index and the transformations that have been applied. You can use the function tilemap_get() to get the tile data which can then be manipulated using the Tile Functions, or you can construct it yourself using the following tile constants along with the index value of the tile to create:
 * @returns {Real}
 * @param {Asset.GMTileSet} tile set - The ID of the tile set to use
 * @param {Real} tiledata - The tile data to use
 * @param {Real} frame - The frame number for the animated tile to use (default 0 for non-animated tiles)
 * @param {Real} x - The x position within the room to draw at
 * @param {Real} y - The y position within the room to draw at
 */
declare function draw_tile(tile set: GMTileSet,tiledata: Real,frame: Real,x: Real,y: Real): Real;

/**
 * This function can be used to draw a given tilemap anywhere in the room. You give the tilemap element ID (which you get when you create a tilemap element using layer_tilemap_create() or when you use the function layer_tilemap_get_id()), then give the x/y position for drawing (in the room). Note that this will simply draw the tilemap at the specified point, using the layer depth of the instance that is calling the function. It does not move the tilemap - nor change it in any way - and does it matter if the tilemap is flagged as visible or not.
 * @returns {Undefined}
 * @param {Id.TileMapElement} tilemap_element_id - The unique ID value of the tilemap element to get the cell y position of
 * @param {Real} x - The x position within the room to draw at
 * @param {Real} y - The y position within the room to draw at
 */
declare function draw_tilemap(tilemap_element_id: TileMapElement,x: Real,y: Real): Undefined;

/**
 * When you have "maintain aspect ratio" ticked in the Game Options for a target platform, GameMaker will automatically set the draw position for the application surface so that it is displayed correctly centered and scaled on the given display. However if you are manipulating this surface and wish to draw it yourself, then this function gives you an easy way to find exactly where within the display or window that the surface was being drawn so that you can then draw it there yourself, or align GUI images or post draw images to it.
 * @returns {Array[Real]}
 */
declare function application_get_position(): Array[Real];

/**
 * You can use this function to enable or disable the automatic drawing of the application surface. By default this is enabled, but in many cases you will want to take over when and how the surface is drawn (when using shaders for example), in which case you would use this function to set it to false so that you can draw it yourself when and how you require. It's important to note that when you switch off automatic drawing and draw the application surface yourself, that you may see certain issues with the alpha component of sprites and the surface itself. This is because GameMaker will draw the application surface without alpha blending when the automatic drawing is on. If you switch off automatic drawing then you need to handle this yourself, using the following code (for example):
 * @returns {Undefined}
 * @param {Bool} flag - The flag will be either true (enabled, the default value) or false (disabled).
 */
declare function application_surface_draw_enable(flag: Bool): Undefined;

/**
 * With this function you can enable or disable the application surface. By default the application surface is enabled and all drawing for the Draw events will be done to that and the surface drawn to the screen. However on some older devices and specific chipsets this may result in poorer performance. In those cases you can switch off drawing to the application surface and all Draw event drawing will then be done directly to the screen buffer.
 * @returns {Undefined}
 * @param {Bool} enable - Set to enable (true) or disable (false) the application surface.
 */
declare function application_surface_enable(enable: Bool): Undefined;

/**
 * This function will return true if the application surface is being used for drawing, or false if the screen buffer is being used.
 * @returns {Bool}
 */
declare function application_surface_is_enabled(): Bool;

/**
 * With this function you can open a video from the specified path or url
 * @returns {Undefined}
 * @param {String} path - Set the path or url to the video.
 */
declare function video_open(path: String): Undefined;

/**
 * This function is used to close the video file and free up any memory associated with it.
 * @returns {Undefined}
 */
declare function video_close(): Undefined;

/**
 * This function will set the volume for any video that you play
 * @returns {Undefined}
 * @param {Real} volume - The volume is a linear value from 0 to 1.
 */
declare function video_set_volume(volume: Real): Undefined;

/**
 * This function will draw the currently selected video to surfaces which will then be used to draw the video
 * @returns {Array[Real]}
 */
declare function video_draw(): Array[Real];

/**
 * This function will pause the video
 * @returns {Undefined}
 */
declare function video_pause(): Undefined;

/**
 * This function will resume the video
 * @returns {Undefined}
 */
declare function video_resume(): Undefined;

/**
 * This function will enable or disable the loop
 * @returns {Undefined}
 * @param {Bool} enable - Set loop enable or disable.
 */
declare function video_enable_loop(enable: Bool): Undefined;

/**
 * This function will move the position of the video in milliseconds
 * @returns {Undefined}
 * @param {Real} milliseconds - Set the position in milliseconds.
 */
declare function video_seek_to(milliseconds: Real): Undefined;

/**
 * This function will return the duration of video in milliseconds
 * @returns {Real}
 */
declare function video_get_duration(): Real;

/**
 * This function will return the position of video in milliseconds
 * @returns {Real}
 */
declare function video_get_position(): Real;

/**
 * This function will return the status of the video
 * @returns {Constant.VideoStatus}
 */
declare function video_get_status(): VideoStatus;

/**
 * This function will return the format of the surface
 * @returns {Constant.VideoFormat}
 */
declare function video_get_format(): VideoFormat;

/**
 * This function will return true if loop is enabled
 * @returns {Bool}
 */
declare function video_is_looping(): Bool;

/**
 * This function will return the volume 0-1
 * @returns {Real}
 */
declare function video_get_volume(): Real;

/**
 * With this function you can draw a surface at a given position within the room, with the top left corner of the image being drawn at the specified x/y position.
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 */
declare function draw_surface(id: Surface,x: Real,y: Real): Undefined;

/**
 * This function will draw the given surface as in the function draw_surface() but with additional options to change the scale, blending, rotation and alpha of the surface being drawn. Changing these values does not modify the resource in any way (only how it is drawn).
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 * @param {Real} xscale - The horizontal scale.
 * @param {Real} yscale - The vertical scale.
 * @param {Real} rot - The rotation or angle to draw the surface.
 * @param {Constant.Color} col - The colour with which to blend the surface.
 * @param {Real} alpha - The alpha transparency for drawing the surface.
 */
declare function draw_surface_ext(id: Surface,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,col: Color,alpha: Real): Undefined;

/**
 * This function combines the function draw_surface_ext() with the function draw_surface_part(), adding in some additional blending options so that each corner of the final surface part can be blended with an individual colour.
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} left - The left position in the surface of the part to be drawn.
 * @param {Real} top - The top position in the surface of the part to be drawn.
 * @param {Real} w - The width of the part to be draw, from left.
 * @param {Real} h - The height of the part to be draw, from top.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 * @param {Real} xscale - The horizontal scaling to draw the surface with.
 * @param {Real} yscale - The vertical scaling to draw the surface with.
 * @param {Real} rot - The rotation or angle to draw the surface with.
 * @param {Constant.Color} c1 - The colour of the top left corner of the surface.
 * @param {Constant.Color} c2 - The colour of the top right corner of the surface.
 * @param {Constant.Color} c3 - The colour of the bottom right corner of the surface.
 * @param {Constant.Color} c4 - The colour of the bottom left corner of the surface.
 * @param {Real} alpha - The alpha transparency to draw the surface with..
 */
declare function draw_surface_general(id: Surface,left: Real,top: Real,w: Real,h: Real,x: Real,y: Real,xscale: Real,yscale: Real,rot: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * With this function you can draw part of any surface at a given position within the room. As with draw_surface() you can specify a surface, but you then need to specify the relative coordinates within the surface of an area to select for drawing. This means that a left position of 0 and a top position of 0 would be the top left corner of the surface and all further coordinates should be taken from that position.
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} left - The left position in the surface of the part to be drawn.
 * @param {Real} top - The top position in the surface of the part to be drawn.
 * @param {Real} w - The width of the part to be draw, from left.
 * @param {Real} h - The height of the part to be drawn, from top.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 */
declare function draw_surface_part(id: Surface,left: Real,top: Real,w: Real,h: Real,x: Real,y: Real): Undefined;

/**
 * This function will draw a part of the chosen surface at the given position following the same rules as per draw_surface_part(), only now you can scale the part, blend a colour with it, or change its alpha when drawing it to the screen (the same as when drawing a surface with draw_surface_ext()).
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} left - The left position in the surface of the part to be drawn.
 * @param {Real} top - The top position in the surface of the part to be drawn.
 * @param {Real} w - The width of the part to be draw, from left.
 * @param {Real} h - The height of the part to be drawn, from top.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 * @param {Real} xscale - The horizontal scaling the part should be drawn with.
 * @param {Real} yscale - The vertical scaling the part should be drawn with.
 * @param {Constant.Color} colour - The colour blending the part should be drawn with.
 * @param {Real} alpha - The alpha transparency the part should be drawn with.
 */
declare function draw_surface_part_ext(id: Surface,left: Real,top: Real,w: Real,h: Real,x: Real,y: Real,xscale: Real,yscale: Real,colour: Color,alpha: Real): Undefined;

/**
 * This function simply takes a surface and stretches it over the given width and height so that it occupies the area. As with draw_surface() you can specify a surface and then the x / y position in the room for the surface to be drawn at and finally a width and a height (which must be pixel values).
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 * @param {Real} w - The width at which to draw the surface.
 * @param {Real} h - The height at which to draw the surface.
 */
declare function draw_surface_stretched(id: Surface,x: Real,y: Real,w: Real,h: Real): Undefined;

/**
 * This function does exactly the same as the draw_surface_stretched() function with the added ability to set the colour blending and alpha value for the surface when it is drawn (similar to the function draw_surface_ext()).
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 * @param {Real} w - The width at which to draw the surface.
 * @param {Real} h - The height at which to draw the surface.
 * @param {Constant.Color} colour - The colour with which to colour the surface.
 * @param {Real} alpha - The alpha with which to blend the surface.
 */
declare function draw_surface_stretched_ext(id: Surface,x: Real,y: Real,w: Real,h: Real,colour: Color,alpha: Real): Undefined;

/**
 * This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function.
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} x - The x position of where to draw the surface.
 * @param {Real} y - The y position of where to draw the surface.
 */
declare function draw_surface_tiled(id: Surface,x: Real,y: Real): Undefined;

/**
 * This function will take a surface and then repeatedly tile it across the whole room, starting from the coordinates that you give in the function and with each tile scaled, colour blended and with the alpha that you define (these properties are the same as those used in draw_surface_ext()).
 * @returns {Undefined}
 * @param {Id.Surface} id - The unique ID value of the surface to draw.
 * @param {Real} x - The x coordinate of where to draw the surface.
 * @param {Real} y - The y coordinate of where to draw the surface.
 * @param {Real} xscale - The horizontal scaling of the surface.
 * @param {Real} yscale - The vertical scaling of the surface.
 * @param {Constant.Color} col - The colour with which to blend the surface.
 * @param {Real} alpha - The alpha of the surface.
 */
declare function draw_surface_tiled_ext(id: Surface,x: Real,y: Real,xscale: Real,yscale: Real,col: Color,alpha: Real): Undefined;

/**
 * This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). If the destination surface already has information this will be overwritten by the copy, and the function does not change the source surface in any way.
 * @returns {Undefined}
 * @param {Id.Surface} destination - The ID of the surface to copy the other surface to.
 * @param {Real} x - The x position to copy to.
 * @param {Real} y - The y position to copy to.
 * @param {Id.Surface} source - The ID of surface to be copied.
 */
declare function surface_copy(destination: Surface,x: Real,y: Real,source: Surface): Undefined;

/**
 * This function simply takes the image from one surface and copies it onto another one at the specified local position within that surface (where the (0,0) position is the top left corner of the destination surface). You can specify a local x and y position to copy from as well as the width and height of the section. Please note that these are coordinates based on the surface size and not on the position at which the surface is being drawn in the room. If the destination surface already has information this will be overwritten by the copy, and the function does not change the source surface in any way.
 * @returns {Undefined}
 * @param {Id.Surface} destination - The ID of the surface to copy the other surface to.
 * @param {Real} x - The x position to copy to.
 * @param {Real} y - The y position to copy to.
 * @param {Id.Surface} source - The ID of the surface to be copied.
 * @param {Real} xs - The x position in the source surface to copy from.
 * @param {Real} ys - The y position in the source surface to copy from.
 * @param {Real} ws - The width of the area in the source surface to copy from.
 * @param {Real} hs - The height of the area in the source surface to copy from.
 */
declare function surface_copy_part(destination: Surface,x: Real,y: Real,source: Surface,xs: Real,ys: Real,ws: Real,hs: Real): Undefined;

/**
 * This function is used to create a surface and will return the index of the surface which should be stored in a variable for future function calls. When the surface is first created, it may contain "noise" as basically it is just an area of memory that is put aside for the purpose (and that memory may still contain information), so you may want to clear the surface before use with a function like draw_clear_alpha().
 * @returns {Id.Surface}
 * @param {Real} w - The width of the surface to be created.
 * @param {Real} h - The height of the surface to be created.
 * @param {Constant.SurfaceFormatType} format - The format of the surface to be created.
 */
declare function surface_create(w: Real,h: Real,format: SurfaceFormatType): Surface;

/**
 * This function allows you to attach a surface to a canvas element that already exists in your web page, meaning that you can effectively split up portions of your game to be drawn at various different places within the page. To that end, you must have defined the canvas element correctly within the *.html page of your game using the correct sizes and names that correspond to the surfaces you wish to create. So, you would have your "main" canvas, and then your secondary surface canvas elements, which will be assigned using this function to the correct surfaces. The following image is an example of how a page with three canvas elements would be set up:
 * @returns {Id.Surface}
 * @param {String} name - The name of the canvas element to link the surface to.
 * @param {Real} w - The width of the surface to be created.
 * @param {Real} h - The height of the surface to be created.
 */
declare function surface_create_ext(name: String,w: Real,h: Real): Surface;

/**
 * This function is used to test whether the specified surface format is supported on the current platform.
 * @returns {Bool}
 * @param {Constant.SurfaceFormatType} format - The surface format to be tested.
 */
declare function surface_format_is_supported(format: SurfaceFormatType): Bool;

/**
 * This function disables the automatic depth buffer generation for all surfaces that are created after it has been disabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it'll sort them properly by depth in order to maintain functional parity between rendering to surfaces and rendering to the back buffer, however allocating depth buffers essentially doubles the amount of memory required for surfaces, which could be an excessive and unnecessary overhead especially if your game is very memory intensive, and for 2D games they aren't generally required.
 * @returns {Undefined}
 * @param {Bool} disable - If set to true the depth buffer will be disabled for created surfaces.
 */
declare function surface_depth_disable(disable: Bool): Undefined;

/**
 * This function is essential when working with surfaces due to their volatile nature. Surfaces are always held in texture memory which means that they can be destroyed from one moment to the next (for example, when a screensaver starts on windows, or when minimised on an Android device), so you should always check that a surface exists before doing anything with it (this includes drawing it to the screen). The example code below shows a typical use of this command in the draw event of an instance to check for a surface and re-create it if it has been removed (note that the surface will have been originally created in the create event of the object).
 * @returns {Bool}
 * @param {Id.Surface} surface_id - The ID of the surface to check.
 */
declare function surface_exists(surface_id: Surface): Bool;

/**
 * When you are working with surfaces, you should always use this function whenever you are finished using them. Surfaces take up space in memory and so need to be removed, normally at the end of a room, but it can be done at any time depending on the use you put them to. Failure to do so can cause memory leaks which will eventually slow down and crash your game.
 * @returns {Undefined}
 * @param {Id.Surface} surface_id - The ID of the surface to be freed.
 */
declare function surface_free(surface_id: Surface): Undefined;

/**
 * This function can be used to get the colour of a specific pixel from a surface, using the local coordinates of the surface where (0,0) is the top left corner. This function should not be used very often as it is extremely slow and may cause a pause in your game.
 * @returns {Real}
 * @param {Id.Surface} surface_id - The ID of the surface.
 * @param {Real} x - The x position on the surface from which to get the pixel.
 * @param {Real} y - The y position on the surface from which to get the pixel.
 */
declare function surface_getpixel(surface_id: Surface,x: Real,y: Real): Real;

/**
 * With this function you can get the full abgr 32bit value of any pixel of a (previously created) surface.
 * @returns {Real}
 * @param {Id.Surface} surface_id - The ID of the surface to use.
 * @param {Real} x - The x coordinate of the pixel to check
 * @param {Real} y - The y coordinate of the pixel to check
 */
declare function surface_getpixel_ext(surface_id: Surface,x: Real,y: Real): Real;

/**
 * This function checks to see if the automatic depth buffer generation for surfaces is enabled. Normally all surfaces have depth buffers so if you draw 3D objects to them then it'll sort them properly by depth, however allocating depth buffers essentially doubles the size of surfaces, which could be an excessive and unnecessary overhead especially if your game is very memory intensive or predominantly 2D. In these cases you can check this using this function and disable the depth buffer for surfaces if required using the function surface_depth_disable().
 * @returns {Bool}
 */
declare function surface_get_depth_disable(): Bool;

/**
 * This function simply returns the height, in pixels, of the indexed surface. It should be noted that if you call this to check the application_surface immediately after having changed its size using surface_resize() it will not return the new value as the change needs a step or two to be fully processed. After waiting a step it should return the new size correctly.
 * @returns {Real}
 * @param {Id.Surface} surface_id - The ID of the surface to get the height of.
 */
declare function surface_get_height(surface_id: Surface): Real;

/**
 * With this function you can get the ID of the current surface being targeted for drawing to. If you created that surface using surface_create(), then this will be the positive integer which is the unique ID for that surface
 * @returns {Id.Surface}
 */
declare function surface_get_target(): Surface;

/**
 * This function can be used to retrieve the ID of the surface whose depth buffer is set as the current one.
 * @returns {Id.Surface}
 */
declare function surface_get_target_depth(): Surface;

/**
 * This function will retrieve the surface ID assigned to one of the 4 render targets available to surfaces. You supply the index of the render target to check, and the function will return -1 if no surface is assigned, or an integer value >= 0, representing the ID of the surface assigned (as returned by the function surface_create()).
 * @returns {Id.Surface}
 * @param {Real} index - The render target index to check (from 0 to 3).
 */
declare function surface_get_target_ext(index: Real): Surface;

/**
 * This function returns a special pointer for the surface texture. This value can then be used in other draw functions, particularly in general 3D and some of the 2D primitive functions.
 * @returns {Pointer.Texture}
 * @param {Id.Surface} surface_id - The ID of the surface to get the texture of.
 */
declare function surface_get_texture(surface_id: Surface): Pointer.Texture;

/**
 * This function returns a special pointer for the depth buffer texture of a surface. This value can then be used in other draw functions, particularly in general 3D and some of the 2D primitive functions.
 * @returns {Pointer.Texture}
 * @param {Id.Surface} surface_id - The ID of the surface to get the depth buffer texture of.
 */
declare function surface_get_texture_depth(surface_id: Surface): Pointer.Texture;

/**
 * This function simply returns the width, in pixels, of the indexed surface. It should be noted that if you call this to check the application_surface immediately after having changed its size using surface_resize() it will not return the new value as the change needs a step or two to be fully processed. After waiting a step it should return the new size correctly.
 * @returns {Real}
 * @param {Id.Surface} surface_id - The ID of the surface to get the width of.
 */
declare function surface_get_width(surface_id: Surface): Real;

/**
 * This function returns whether given surface has a depth buffer (returns true) or not (returns false). By default all surfaces have a depth buffer unless depth buffers are disabled using function surface_depth_disable().
 * @returns {Bool}
 * @param {Id.Surface} surface_id - The ID of the surface to check.
 */
declare function surface_has_depth(surface_id: Surface): Bool;

/**
 * With this function you reset all further drawing from the target surface back to the screen. Please note that to start drawing to a surface you must first have called the function surface_set_target() and then this one after you have finished, for each surface target that you have set or else nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance.
 * @returns {Undefined}
 */
declare function surface_reset_target(): Undefined;

/**
 * This function will resize a surface to the given dimensions (in pixels). The "surface_id" is that of a surface you have created previously, or the application_suface, and the function will resize that surface. Note that this will neither crop nor stretch the contents of the surface, but rather it destroys the current surface and recreates it with the same handle (surface_id) with the new dimensions, meaning that it will need to be cleared and drawn to again (unless it is the application_surface in which case GameMaker will do this automatically).
 * @returns {Undefined}
 * @param {Id.Surface} surface_id - The ID of the surface to change.
 * @param {Real} w - The width of the new surface.
 * @param {Real} h - The height of the new surface.
 */
declare function surface_resize(surface_id: Surface,w: Real,h: Real): Undefined;

/**
 * This function will save a surface to disc using the given filename. The surface must be saved as a *.png format file.
 * @returns {Undefined}
 * @param {Id.Surface} surface_id - The ID of the surface to set as the drawing target.
 * @param {String} fname - The name of the saved image file.
 */
declare function surface_save(surface_id: Surface,fname: String): Undefined;

/**
 * This function will save a part of a surface to disc using the given filename. The surface must be saved as a *.png format file, and the (x,y) position must be given as local coordinates to the surface, bearing in mind that the top left corner of the surface is always (0,0).
 * @returns {Undefined}
 * @param {Id.Surface} surface_id - The ID of the surface to set as the drawing target.
 * @param {String} fname - The name of the saved image file.
 * @param {Real} x - The starting x position within the surface.
 * @param {Real} y - The starting y position within the surface.
 * @param {Real} width - The width of the part to save.
 * @param {Real} height - The height of the part to save.
 */
declare function surface_save_part(surface_id: Surface,fname: String,x: Real,y: Real,width: Real,height: Real): Undefined;

/**
 * With this function you set all further drawing to the target surface rather than the screen and in this way you can tell GameMaker to only draw specific things to the specified surface. Please note that if you do not call surface_reset_target() after you have finished, nothing will be drawn on the screen as all further drawing (even in other instances) will be done on the surface. You should also realise that nothing will be seen if the surface itself is not drawn on the screen in the draw event of an instance. You can check the return value of this function too as a debug tool to check whether the surface target was set or not, with a return value of 0 being a failure to set the target and any other positive value being a success. Optionally you can provide a surface whose depth buffer to use as the current depth buffer (defaults to the surface's depth buffer if not specified).
 * @returns {Bool}
 * @param {Id.Surface} surface_id - The ID of the surface to set as the drawing target.
 * @param {Id.Surface} depth_id - The ID of the surface whose depth buffer to use as the current depth buffer.
 */
declare function surface_set_target(surface_id: Surface,depth_id: Surface): Bool;

/**
 * This function is for use with the Shader Functions and sets the MRT (0 - 3) for native level shaders (DX9, DX11, OpenGL).
 * @returns {Bool}
 * @param {Real} index - The render target index to use (from 0 to 3).
 * @param {Id.Surface} surface_id - The ID of the surface to use.
 */
declare function surface_set_target_ext(index: Real,surface_id: Surface): Bool;

/**
 * This function will get the font currently assigned for drawing text. The function will return -1 if no font is set, or the ID value (a positive integer) for the font resource assigned.
 * @returns {Asset.GMFont}
 */
declare function draw_get_font(): GMFont;

/**
 * This function is used to get the text alignment setting along the horizontal axis, and will return one of the constants listed below.
 * @returns {Constant.HAlign}
 */
declare function draw_get_halign(): HAlign;

/**
 * This function is used to get the text alignment setting along the vertical axis, and will return one of the constants listed below.
 * @returns {Constant.VAlign}
 */
declare function draw_get_valign(): VAlign;

/**
 * This simple function will draw the current list of internally stored high scores using the currently set font, colour and alpha values within the specified rectangle. You provide the coordinates for the upper left corner and lower right corner of the rectangular area to draw the text, and GameMaker will take care of the rest, with spacing and position being done automatically.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the highscore rectangle.
 * @param {Real} y1 - The y coordinate of the top of the highscore rectangle.
 * @param {Real} x2 - The x coordinate of the right of the highscore rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the highscore rectangle.
 */
declare function draw_highscore(x1: Real,y1: Real,x2: Real,y2: Real): Undefined;

/**
 * This function will set the font to be used for all further text drawing. This font must have been added into the font assets of the game or have been created using either the font_add() or font_add_sprite().
 * @returns {Undefined}
 * @param {Asset.GMFont} font - The name of the font to use.
 */
declare function draw_set_font(font: GMFont): Undefined;

/**
 * This function is used to align text along the horizontal axis and changing the horizontal alignment will change the position and direction in which all further text is drawn with the default value being fa_left. The following constants are accepted:
 * @returns {Undefined}
 * @param {Constant.HAlign} halign - Horizontal alignment.
 */
declare function draw_set_halign(halign: HAlign): Undefined;

/**
 * This function is used to align text along the vertical axis and changing the vertical alignment will change the position and direction in which all further text is drawn, with the default value being fa_top. The following constants are accepted:
 * @returns {Undefined}
 * @param {Constant.VAlign} valign - Vertical alignment.
 */
declare function draw_set_valign(valign: VAlign): Undefined;

/**
 * With this function you can draw any string at any position within the room (for drawing real numbers you should use the string() function to convert them into text). To combine strings you can use + (see example below) and you can also use \n within a string to add a line break so it is drawn over multiple lines (for information on how to properly format a string and what escape characters you can use, please see here). The colour of the text and the alpha are governed by the current base alpha and colour values as set by draw_set_alpha() and draw_set_colour().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 */
declare function draw_text(x: Real,y: Real,string: Any): Undefined;

/**
 * This function will draw text in a similar way to draw_text() only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead of the base drawing colour and alpha.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_colour(x: Real,y: Real,string: Any,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * This function will draw text in a similar way to draw_text() only now you can set the space between each line of text - should the text occupy more than one line - and limit the width (in pixels) of the string per line so that should any line exceed this value, GameMaker will automatically split the text to the next line at the nearest available white-space (if the text has no white-spaces then it will overrun this maximum width value). Note that any white space placed at the start of the string will be stripped out before being parsed for drawing because of this. Also note that a value of -1 for the line separation argument will default to a separation based on the height of the "M" character in the chosen font.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} sep - The distance in pixels between lines of text.
 * @param {Real} w - The maximum width in pixels of the string before a line break.
 */
declare function draw_text_ext(x: Real,y: Real,string: Any,sep: Real,w: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_ext() and draw_text_colour() functions, permitting you to define gradient colours for text as well as the line spacing and maximum width per line all together.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} sep - The distance in pixels between lines of text.
 * @param {Real} w - The maximum width in pixels of the string before a line break.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_ext_colour(x: Real,y: Real,string: Any,sep: Real,w: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_ext() and draw_text_transformed() functions, permitting you to scale and rotate text while maintaining a specific line spacing and maximum width per line. Note that the "width" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} sep - The distance in pixels between lines of text.
 * @param {Real} w - The maximum width in pixels of the string before a line break.
 * @param {Real} xscale - The horizontal scale.
 * @param {Real} yscale - The vertical scale.
 * @param {Real} angle - The angle of the text.
 */
declare function draw_text_ext_transformed(x: Real,y: Real,string: Any,sep: Real,w: Real,xscale: Real,yscale: Real,angle: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_ext(), draw_text_transformed() and draw_text_colour() functions. As such, this is the most general of all functions for drawing text and gives a large amount of flexibility when drawing. Note that the "width" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} sep - The distance in pixels between lines of text.
 * @param {Real} w - The maximum width in pixels of the string before a line break.
 * @param {Real} xscale - The horizontal scale.
 * @param {Real} yscale - The vertical scale.
 * @param {Real} angle - The angle of the text.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_ext_transformed_colour(x: Real,y: Real,string: Any,sep: Real,w: Real,xscale: Real,yscale: Real,angle: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * This function will draw text in a similar way to draw_text() only now you can choose to scale the text along the horizontal or vertical axis (effectively stretching or shrinking it) and also have GameMaker draw it at an angle (where 0 is normal and every degree over 0 rotates the text anti-clockwise).
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} xscale - The horizontal scale (default 1).
 * @param {Real} yscale - The vertical scale(default 1).
 * @param {Real} angle - The angle of the text.
 */
declare function draw_text_transformed(x: Real,y: Real,string: Any,xscale: Real,yscale: Real,angle: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_transformed() and draw_text_colour() functions, permitting you to scale and rotate text as well as colour it with a gradient fill and change its alpha value, ignoring the base alpha and colour settings for drawing.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} xscale - The horizontal scale.
 * @param {Real} yscale - The vertical scale.
 * @param {Real} angle - The angle of the text.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_transformed_colour(x: Real,y: Real,string: Any,xscale: Real,yscale: Real,angle: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * With this function you can remove all textures from video memory, and they will then be reloaded on first use. This is the only effective way to manage video memory when you have multiple texture pages for a game, and you should flush the texture memory between levels on your game and organise the graphics using the texture group feature to ensure that the minimum number of textures are used.
 * @returns {Undefined}
 */
declare function draw_texture_flush(): Undefined;

/**
 * With this function you can retrieve the font index of each of the fonts assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the font index for a font resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).
 * @returns {Array[Asset.GMFont]}
 * @param {String} tex - The name of the texture group to check (a string)
 */
declare function texturegroup_get_fonts(tex: String): Array[GMFont];

/**
 * With this function you can retrieve the sprite index of each of the sprites assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the sprite index for a sprite resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).
 * @returns {Array[Asset.GMSprite]}
 * @param {String} tex - The name of the texture group to check (a string)
 */
declare function texturegroup_get_sprites(tex: String): Array[GMSprite];

/**
 * This function can be used to retrieve the texture page IDs of the individual pages that make up a texture group. You supply the texture group ID string (as defined in the Texture Group Editor), and the function will return a 1D array, where each entry in the array is a single texture page ID. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).
 * @returns {Array[Id.Texture]}
 * @param {String} tex_id - The name of the texture group to check (a string)
 */
declare function texturegroup_get_textures(tex_id: String): Array[Texture];

/**
 * With this function you can retrieve the tileset index of each of the tilesets assigned to texture pages within the given texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a 1D array where each entry contains the tileset index for a tileset resource. If the function fails - ie: an invalid group is given, or the group has no texture assigned to it - then the array will be empty (0 length).
 * @returns {Array[Asset.GMTileSet]}
 * @param {String} tex - The name of the texture group to check (a string)
 */
declare function texturegroup_get_tilesets(tex: String): Array[GMTileSet];

/**
 * With this function you can retrieve the names of all the texturegroups contained in the game.
 * @returns {Array[String]}
 */
declare function texturegroup_get_names(): Array[String];

/**
 * With this function you can load all the pages for the specified texture group. You supply the texture group ID string (as defined in the texture Group Editor) and (optionally) specify whether you want to also prefetch the pages in the group (load them into GPU memory)..
 * @returns {Undefined}
 * @param {String} groupname - The name of the texture group to load (a string)
 * @param {Bool} prefetch - Whether each texture in the group should be loaded into GPU memory (defaults to true)
 */
declare function texturegroup_load(groupname: String,prefetch: Bool): Undefined;

/**
 * With this function you can unload all pages in the specified texture group. You supply the texture group ID string (as defined in the texture Group Editor) for the group to unload.
 * @returns {Undefined}
 * @param {String} groupname - The name of the texture group to unload (a string)
 */
declare function texturegroup_unload(groupname: String): Undefined;

/**
 * With this function you can retrieve the load status of the specified texture group. You supply the texture group ID string (as defined in the texture Group Editor) and the function will return a value indicating the status.
 * @returns {Real}
 * @param {String} groupname - The name of the texture group to check (a string)
 */
declare function texturegroup_get_status(groupname: String): Real;

/**
 * With this function you can configure how texture group loading is handled as well as set debug options
 * @returns {Undefined}
 * @param {Bool} explicit - If false, indicates that texture pages are automatically loaded if a sprite is rendered from an unloaded texture group
 * @param {Bool} debug - If true, enables a debug view
 * @param {Asset.GMSprite} default_sprite - Specifies default sprite which is used for drawing when a texture group hasn't been loaded
 */
declare function texturegroup_set_mode(explicit: Bool,debug: Bool,default_sprite: GMSprite): Undefined;

/**
 * This function can be used to enable or disable texture debug messages. When enabled (set to true), additional information about texture page use will be sent to the output window. Set to false to disable this output again.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or disable the texture debug messages
 */
declare function texture_debug_messages(enable: Bool): Undefined;

/**
 * This function can be used to "flush" a texture page or a group of texture pages, ie: remove them from VRAM when no longer required. You supply the unique texture page ID (as returned by the texturegroup_* functions) to flush a single page, or you can supply a texture group name (as defined in the Texture Group Editor) to flush all the texture pages in the group.
 * @returns {Undefined}
 * @param {Any} tex_id - The texture page ID (an integer) or a texture group ID (a string)
 */
declare function texture_flush(tex_id: Any): Undefined;

/**
 * Returns the height of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.
 * @returns {Real}
 * @param {Any} tex - The texture page asset pointer to use
 */
declare function texture_get_height(tex: Any): Real;

/**
 * A texel, or texture element is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the height of a single texel from the texture page of the image asset used.
 * @returns {Real}
 * @param {Any} tex - The texture page asset pointer to use
 */
declare function texture_get_texel_height(tex: Any): Real;

/**
 * A texel, or texture element is the fundamental unit of texture space used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels, and this function returns the width of a single texel from the texture page of the image asset used.
 * @returns {Real}
 * @param {Any} tex - The texture page asset pointer to use
 */
declare function texture_get_texel_width(tex: Any): Real;

/**
 * This function returns a 1D array with 4 elements representing the UV coordinates for the image on the texture page, filling in the array with the following values:
 * @returns {Array[Real]}
 * @param {Any} texid - The image asset to get the texture from
 */
declare function texture_get_uvs(texid: Any): Array[Real];

/**
 * Returns the width of the texture with the given id, which is always a value within the range 0 - 1. This can then be used when mapping textures to models or primitives.
 * @returns {Real}
 * @param {Any} tex - The texture page asset pointer to use
 */
declare function texture_get_width(tex: Any): Real;

/**
 * This function allows you to control the scaling of the texture pages on load from the WAD file that is part of your final game executable. The input value must be a power of two value and will work such that:
 * @returns {Undefined}
 * @param {Real} pow2integer - The scale factor to use (1, no scale, 2, half scale, 4, quarter scale, etc...)
 */
declare function texture_global_scale(pow2integer: Real): Undefined;

/**
 * This function can be used to check if a specific texture page has been unpacked and is ready for use, or if a group of texture pages have been unpacked and are ready for use. You supply the unique texture page ID (as returned by the texturegroup_* functions) or the texture group ID string (as defined in the Texture Group Editor), and the function will return true if they have been unpacked, or false otherwise.
 * @returns {Bool}
 * @param {Any} tex_id - The texture page ID (an integer) or a texture group ID (a string)
 */
declare function texture_is_ready(tex_id: Any): Bool;

/**
 * This function can be used to "prefetch" a texture page or a group of texture pages, ie: load them into VRAM when required. You supply the unique texture page ID (as returned by the texturegroup_* functions) to prefetch a single page, or you can supply a texture group name (as defined in the Texture Group Editor) to prefetch all the texture pages in the group.
 * @returns {Undefined}
 * @param {Any} tex_id - The texture page ID (an integer) or a texture group ID (a string)
 */
declare function texture_prefetch(tex_id: Any): Undefined;

/**
 * This function will set the given stage "slot" a texture to be used. The number of stage "slots" available will depend on the platform you are compiling to, with a maximum of 8 being available for Windows, Mac and Linux, but on lower end Android devices (for example) this number can be as low as 2. It is also worth noting that the first stage "slot" is always used automatically by GameMaker.
 * @returns {Undefined}
 * @param {Id.Sampler} stage - The texture "slot" to use.
 * @param {Any} tex - The texture to use.
 */
declare function texture_set_stage(stage: Sampler,tex: Any): Undefined;

/**
 * Closes a previously opened binary file. You supply the file ID value, as returned by the function file_bin_open().
 * @returns {Undefined}
 * @param {Id.BinaryFile} binfile - The ID of the file to close.
 */
declare function file_bin_close(binfile: BinaryFile): Undefined;

/**
 * This function will open the binary file with the indicated name. The mode indicates what can be done with the file:
 * @returns {Id.BinaryFile}
 * @param {String} fname - The name of the file to read from.
 * @param {Real} mode - the indicator of what can be done with the file.
 */
declare function file_bin_open(fname: String,mode: Real): BinaryFile;

/**
 * This function will returns the current position in bytes, where 0 is the first position, of the file with the given file id. You supply the file ID value, as returned by the function file_bin_open().
 * @returns {Real}
 * @param {Id.BinaryFile} binfile - The ID of the file to get the position in.
 */
declare function file_bin_position(binfile: BinaryFile): Real;

/**
 * This function will return a byte of data from current position within the file with the given file ID. You supply the file ID value, as returned by the function file_bin_open().
 * @returns {Real}
 * @param {Id.BinaryFile} binfile - The ID of the file to get the data from.
 */
declare function file_bin_read_byte(binfile: BinaryFile): Real;

/**
 * This function takes the filename handle as returned by the function file_bin_open() and then rewrites the file, clearing it of all previous data to start writing from the beginning of the file.
 * @returns {Undefined}
 * @param {Id.BinaryFile} binfile - The ID of the file to rewrite.
 */
declare function file_bin_rewrite(binfile: BinaryFile): Undefined;

/**
 * This function moves the current read position within the file to the indicated position. You supply the file ID value, as returned by the function file_bin_open(), and to append a file, move the position to the size of the file before writing.
 * @returns {Undefined}
 * @param {Id.BinaryFile} binfile - The ID of the file to read from.
 * @param {Real} pos - The position in the file to move to.
 */
declare function file_bin_seek(binfile: BinaryFile,pos: Real): Undefined;

/**
 * This function will return the size (in bytes) of a file that has been opened for reading and/or writing. The File ID is the value returned by the function file_bin_open().
 * @returns {Real}
 * @param {Id.BinaryFile} binfile - The ID of the file to get the size of.
 */
declare function file_bin_size(binfile: BinaryFile): Real;

/**
 * This function will write a byte of data to the file identified by the file ID at the current write position. You supply the file ID value, as returned by the function file_bin_open() and the byte of data to write.
 * @returns {Real}
 * @param {Id.BinaryFile} binfile - The ID of the file to write to.
 * @param {Real} byte - The data to write.
 */
declare function file_bin_write_byte(binfile: BinaryFile,byte: Real): Real;

/**
 * This function will convert a string encoded previously using base64 format, into standard text. Base64 is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye.
 * @returns {String}
 * @param {String} string - The string to decode.
 */
declare function base64_decode(string: String): String;

/**
 * This function will convert a string into a base64 format encoded string. This is a commonly used encoding scheme that is often used for any media that needs to be stored or transferred over the internet as text, and renders the output unreadable to the human eye.
 * @returns {String}
 * @param {String} string - The string to encode.
 */
declare function base64_encode(string: String): String;

/**
 * JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:
 * @returns {Any}
 * @param {String} string - The JSON format string that you are passing to the function for decoding
 */
declare function json_decode(string: String): Any;

/**
 * JSON (JavaScript Object Notation) is a lightweight data-interchange format which is easy for to read and write, for both people and machines. It is built on two basic structures:
 * @returns {String}
 * @param {Id.DsMap} map - a DS map with the information to encode (or an array)
 * @param {Bool} prettify - Whether of not the result JSON string should be prettified. Defaults to false.
 */
declare function json_encode(map: DsMap,prettify: Bool): String;

/**
 * This function can be used to parse a JSON string (either previously created using json_stringify or from any valid source), and convert it into a collection of arrays or structs, where an array is the equivalent of a JSON array and a struct is the equivalent of a JSON object. You supply the string to parse, and the function will return the top level array or struct which can then be checked in your code. If you are not sure of the contents of the JSON, you can use the different Variable Functions (like typeof() or variable_struct_get_names()) to check the returned contents. Note that trying to parse an invalid value (ie: not a string) will throw an exception error.
 * @returns {Any}
 * @param {String} json - The JSON to parse (a string)
 * @param {Function} filter - filter function called for each value element parsed in the data - function takes 2 arguments (key and value) and returns a value (this is the value that is then placed in the final output)
 * @param {Bool} inhibit_string_convert - Enable or disable the automatic conversion of strings into handles / int64 / nans and infinities. (default is false)
 */
declare function json_parse(json: String,filter: Function,inhibit_string_convert: Bool): Any;

/**
 * With this function you can convert single or nested structs and arrays into a valid JSON string. You supply the initial value to use (an array index or a struct reference) and then the function will "stringify" it, converting it into a JSON string, converting GameMaker arrays into JSON arrays, and GameMaker structs in to JSON objects.
 * @returns {String}
 * @param {Any} val - The reference value for a struct or array to convert into a JSON string
 * @param {Bool} prettify - Whether of not the result JSON string should be prettified. Defaults to false.
 * @param {Function} filter - filter function called for each value element encoded in the output - function takes 2 arguments (key and value) and returns a value (this is the value that is then placed in the final output)
 */
declare function json_stringify(val: Any,prettify: Bool,filter: Function): String;

/**
 * This function will load a CSV format file and convert it into a DS grid, returning the unique ID value for the grid created.
 * @returns {Id.DsGrid}
 * @param {String} filename - The name of the file to open (as a string)
 */
declare function load_csv(filename: String): DsGrid;

/**
 * In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take the given file and generate a unique MD5 for that file which can then be stored for later use.
 * @returns {String}
 * @param {String} filename - The file to generate the MD5 hash for.
 */
declare function md5_file(filename: String): String;

/**
 * In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take an input unicode string (which is 16bits for each char) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example).
 * @returns {String}
 * @param {String} string - The string to hash.
 */
declare function md5_string_unicode(string: String): String;

/**
 * In cryptography, MD5 (Message-Digest algorithm 5) is a widely used cryptographic hash function with a 128-bit hash value and has been employed in a wide variety of security applications. It is also commonly used to check the integrity of files and strings. This function will take an input UTF-8 string (which has a variable number of bytes per character) and return the 32-character hexadecimal MD5 hash that is unique to that string. In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example).
 * @returns {String}
 * @param {String} string - The string to hash.
 */
declare function md5_string_utf8(string: String): String;

/**
 * In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications popular Git where it is used to check for file changes, and the protocols TLS and SSL, PGP, SSH, S/MIME, and IPsec. This function will take an input file and return a 160 bit message digest in ASCII format unique to that file to be used for integrity verification at any later date.
 * @returns {String}
 * @param {String} filename - The file to generate the sha1 hash for.
 */
declare function sha1_file(filename: String): String;

/**
 * In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular Git where it is used to check for file changes. This function will take an input unicode string and returns a 160 bit message digest in ASCII format, for example:
 * @returns {String}
 * @param {String} string - The string to hash.
 */
declare function sha1_string_unicode(string: String): String;

/**
 * In cryptography, SHA-1 is a cryptographic hash function designed by the United States National Security Agency and is employed in several widely used applications and protocols like the popular Git where it is used to check for file changes. This function will take an input UTF-8 string (which has a variable number of bytes per character) and returns a 160 bit message digest in ASCII format, for example:
 * @returns {String}
 * @param {String} string - The string to hash.
 */
declare function sha1_string_utf8(string: String): String;

/**
 * This function will open a stored zip file and extract its contents to the given directory. Note that if you do not supply a full path to the ZIP directory then the current drive root will be used, and if you want to place it in a relative path to the game bundle working directory then you should use the working_directory variable as part of the path (relative paths using "." or ".." will not work as expected so should be avoided). Note too that the zip must be either part of the game bundle (ie: an Included File) or have been downloaded to the storage area using http_get_file().
 * @returns {Real}
 * @param {String} zip_file - The zip file to open
 * @param {String} target_directory - The target directory to extract the files to
 */
declare function zip_unzip(zip_file: String,target_directory: String): Real;

/**
 * This function will open a stored zip file and extract its contents to the given directory asynchronously. Note that if you do not supply a full path to the ZIP directory then the current drive root will be used, and if you want to place it in a relative path to the game bundle working directory then you should use the working_directory variable as part of the path (relative paths using "." or ".." will not work as expected so should be avoided). Note too that the zip must be either part of the game bundle (ie: an Included File) or have been downloaded to the storage area using http_get_file().
 * @returns {Real}
 * @param {String} zip_file - The zip file to open
 * @param {String} target_directory - The target directory to extract the files to
 */
declare function zip_unzip_async(zip_file: String,target_directory: String): Real;

/**
 * This function will create a new zip object which files can be added to.
 * @returns {Struct.Zip}
 */
declare function zip_create(): Zip;

/**
 * This function will add a reference to the specified source file with the desired destination path in the specified zip file. The file will be loaded and added to the zip on the call to zip_save().
 * @returns {Real}
 * @param {Struct.Zip} zip_object - The zip object which the file should be added to.
 * @param {String} dest - The destination path within the zip file.
 * @param {String} src - The path to the source file to be added.
 */
declare function zip_add_file(zip_object: Zip,dest: String,src: String): Real;

/**
 * This function will save a zip object to the specified path.
 * @returns {Real}
 * @param {Struct.Zip} zip_object - The zip object to be saved.
 * @param {String} path - The path the zip should be saved to.
 */
declare function zip_save(zip_object: Zip,path: String): Real;

/**
 * This function will creates a directory with the given name in the save area.
 * @returns {Undefined}
 * @param {String} dname - The name of the directory to create.
 */
declare function directory_create(dname: String): Undefined;

/**
 * This function will remove a directory with the given name in the save area.
 * @returns {Undefined}
 * @param {String} dname - The name of the directory to remove.
 */
declare function directory_destroy(dname: String): Undefined;

/**
 * This function will return true if the indicated directory exists or false if it does not. The specified name must include the full path, not a relative path and by default you cannot access any directories from out-with the game bundle as all games are sandboxed (see the section on the File System for more information).
 * @returns {Bool}
 * @param {String} dname - The name of the directory to look for.
 */
declare function directory_exists(dname: String): Bool;

/**
 * This function returns the indicated file name with the extension (including the dot) changed to the new extension. By using an empty string as the new extension you can remove the extension part all together.
 * @returns {String}
 * @param {String} fname - The file to use.
 * @param {String} newext - The new extension to use.
 */
declare function filename_change_ext(fname: String,newext: String): String;

/**
 * This function returns the directory part of the indicated file name, which normally is the same as the path except for the final backslash.
 * @returns {String}
 * @param {String} fname - The file to use.
 */
declare function filename_dir(fname: String): String;

/**
 * This function returns the drive information of the filename.
 * @returns {String}
 * @param {String} fname - The file to use.
 */
declare function filename_drive(fname: String): String;

/**
 * This function returns the extension part of the indicated file name, including the leading dot.
 * @returns {String}
 * @param {String} fname - The file to use.
 */
declare function filename_ext(fname: String): String;

/**
 * Using this function returns the name part of the indicated file, with the extension but without the path
 * @returns {String}
 * @param {String} fname - The file to use.
 */
declare function filename_name(fname: String): String;

/**
 * Using this function returns the path part of the indicated file path, including the final backslash.
 * @returns {String}
 * @param {Any} fname - The file name and path to use.
 */
declare function filename_path(fname: Any): String;

/**
 * You can use this function to check the attributes of a given file. You can add up the following constants to see the type of files you want:
 * @returns {Bool}
 * @param {String} fname - The name of the file to check.
 * @param {Constant.FileAttribute} attr - The attributes to check for.
 */
declare function file_attributes(fname: String,attr: FileAttribute): Bool;

/**
 * This function will copy the specified file, giving it the new name that you choose. If you are copying a file on Android from within your Included Files area (which will be inside your APK) it will copy into memory first, so, be aware that copying very large files from the APK may cause devices to run out of memory. On the HTML5 target, we use the HTML5 Local Storage API for client side saving, and the functions does not support binary file operations, so assumes you are copying a text file.
 * @returns {Undefined}
 * @param {String} fname - The name of the file to copy.
 * @param {String} newname - The name of the new, copied, file.
 */
declare function file_copy(fname: String,newname: String): Undefined;

/**
 * This function will delete the specified file from the system. It should be noted that this function will only delete those files that GameMaker is able to create and parse: ini files, text files and binary files, or those files made to store game created resources like sprites or surfaces. However, it will not delete any other file. The function will also return true if the file has successfully been removed, or false in any other circumstances.
 * @returns {Bool}
 * @param {String} fname - The name of the file to delete.
 */
declare function file_delete(fname: String): Bool;

/**
 * This function will return true if the specified file exists and false if it does not. Note that the function can only be used to check local files, but not any files stored on a remote server.
 * @returns {Bool}
 * @param {String} fname - The name of the file to check for.
 */
declare function file_exists(fname: String): Bool;

/**
 * Must be called after handling files opened using file_find_first() and file_find_next() functions to free memory. The file find functions open handles into the file directory and these take up a minimal amount of memory, which (over time) mounts up. Therefore you should always call this function after you have found the files you require to "close" these handles.
 * @returns {Undefined}
 */
declare function file_find_close(): Undefined;

/**
 * This function will return the name of the first file that satisfies the mask and the attributes. If no such file exists, then an empty string is returned. The mask can contain a path and can contain wildchars, for example 'C:\temp\*.doc'. The attributes give the additional files you want to see, so the normal files are always returned when they satisfy the mask. You can add up the following constants to see the type of files you want (if you do not wish to add any attributes, use 0):
 * @returns {String}
 * @param {String} mask - The mask to use for searching.
 * @param {Constant.FileAttribute} attr - The specific file attribute to look for.
 */
declare function file_find_first(mask: String,attr: FileAttribute): String;

/**
 * This function returns the name of the next file that satisfies the previously given mask and the attributes (defined by file_find_first()). If no such file exists, the empty string is returned.
 * @returns {String}
 */
declare function file_find_next(): String;

/**
 * This function will rename the specified file with the specified name. The function will return true if the file has successfully been renamed, or false in any other circumstances.
 * @returns {Bool}
 * @param {String} oldname - The name of the file to change.
 * @param {String} newname - The new name to give the file.
 */
declare function file_rename(oldname: String,newname: String): Bool;

/**
 * This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form "name1|mask1|name2|mask2|...", where the mask may contain the different options with a semicolon between them and you can also use a "*" to mean any string. For example: "bitmaps|*.bmp;*.wmf", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not open the file itself! It only returns a string with the full name and path of the file. If the user presses "Cancel" an empty string "" is returned.
 * @returns {String}
 * @param {String} filter - The file type filter and/or name.
 * @param {String} fname - The suggested filename to use.
 */
declare function get_open_filename(filter: String,fname: String): String;

/**
 * This function opens a dialogue and asks the player for a filename to open with the given filter. The filter has the form "name1|mask1|name2|mask2|...", where the mask may contain the different options with a semicolon between them and you can also use a "*" to mean any string. For example: "bitmaps|*.bmp;*.wmf", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not open the file itself! It only returns a string with the full name and path of the file. If the user presses "Cancel" an empty string "" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.
 * @returns {String}
 * @param {String} filter - The file type filter and/or name.
 * @param {String} fname - The suggested filename to use.
 * @param {String} directory - The directory to start the search from.
 * @param {String} caption - The caption for the window.
 */
declare function get_open_filename_ext(filter: String,fname: String,directory: String,caption: String): String;

/**
 * This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form "name1|mask1|name2|mask2|...", where the mask may contain the different options with a semicolon between them and you can also use a "*" to mean any string. For example: "bitmaps|*.bmp;*.wmf", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not save the file itself! It only returns a string with the full name and path of the file. If the user presses "Cancel" an empty string "" is returned.
 * @returns {String}
 * @param {String} filter - The file type filter and/or name.
 * @param {String} fname - The suggested filename to use.
 */
declare function get_save_filename(filter: String,fname: String): String;

/**
 * This function opens a dialogue and asks the player for a filename to save to with the given filter. The filter has the form "name1|mask1|name2|mask2|...", where the mask may contain the different options with a semicolon between them and you can also use a "*" to mean any string. For example: "bitmaps|*.bmp;*.wmf", would ask the user to select the name of a bitmap file from the system, but only those that have the two specified extensions (bmp and png). this function does not save the file itself! It only returns a string with the full name and path of the file. If the user presses "Cancel" an empty string "" is returned. You may also add in a directory to start the search from, and a caption to be shown at the top of the window instead of the default one.
 * @returns {String}
 * @param {String} filter - The file type filter and/or name.
 * @param {String} fname - The suggested filename to use.
 * @param {String} directory - The directory to start the search from.
 * @param {String} caption - The caption for the window.
 */
declare function get_save_filename_ext(filter: String,fname: String,directory: String,caption: String): String;

/**
 * This function should be called the moment you are finished reading or writing to any open ini file. If you do not use the function after you have used any of the ini write functions, then nothing will be written to disk, as the file information is held in memory until this function is called, which forces the write. If you try to open an ini without having previously closed another one (or the same one) you will get an error too.
 * @returns {String}
 */
declare function ini_close(): String;

/**
 * With this function you can remove the selected key (and its corresponding value) from an ini file.
 * @returns {Undefined}
 * @param {String} section - The section to delete a key from.
 * @param {String} key - The key to delete.
 */
declare function ini_key_delete(section: String,key: String): Undefined;

/**
 * This function checks to see if a key exists in the currently open ini and will return true if it does or false otherwise. This is not a necessary check to prevent errors as, when a key does not exist, reading from a non-existent key will just return a default value. It can be useful to see if an ini file has saved specific data and a few other things, however.
 * @returns {Bool}
 * @param {String} section - The section in the open .ini file to check a key in.
 * @param {String} key - The key to check for.
 */
declare function ini_key_exists(section: String,key: String): Bool;

/**
 * This opens an ini_file for reading and/writing. If the ini_file does not exist at the location you are checking, GameMaker may create one, but only if you write data to it. If you have only read information from the ini file, then the default values for the read function will be returned, but the ini file will not actually be created.
 * @returns {Undefined}
 * @param {String} name - The filename for the .ini file.
 */
declare function ini_open(name: String): Undefined;

/**
 * This function will create an ini file from a string and open it for reading/writing. The string should be correctly formatted as an ini file (ie: with sections, line breaks keys and values) otherwise the ini file will not be created correctly. Note that this ini file is temporary and will be removed from memory the moment it is closed, losing any information that was stored in it, however the ini_close() function returns a string of the full ini file which can then be saved to a server or to disk.
 * @returns {Undefined}
 * @param {String} string - The string containing all the ini information.
 */
declare function ini_open_from_string(string: String): Undefined;

/**
 * You can use this function to read a number from an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:
 * @returns {Real}
 * @param {String} section - The section of the .ini to read from.
 * @param {String} key - The key within the relevant section of the .ini to read from.
 * @param {Real} default - The value to return if a value is not found in the defined place (or the .ini file does not exist). Must be a real number.
 */
declare function ini_read_real(section: String,key: String,default: Real): Real;

/**
 * You can use this function to read a string (text) from an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:
 * @returns {String}
 * @param {String} section - The section of the .ini to read from.
 * @param {String} key - The key within the relevant section of the .ini to read from.
 * @param {String} default - The string to return if a string is not found in the defined place (or the .ini file does not exist). Must be a string.
 */
declare function ini_read_string(section: String,key: String,default: String): String;

/**
 * With this function you can delete a whole section of an ini file, which will also remove all key-value pairs that are associated with it.
 * @returns {Undefined}
 * @param {String} section - The section to delete.
 */
declare function ini_section_delete(section: String): Undefined;

/**
 * This function checks to see if a section exists in the currently open ini and will return true if it does or false otherwise. This is not a necessary check to prevent errors as, when a section does not exist, reading from a non-existent section will just return a default value, however it can be useful to see if an ini file has saved specific data.
 * @returns {Bool}
 * @param {String} section - The section in the open .ini file to check for.
 */
declare function ini_section_exists(section: String): Bool;

/**
 * You can use this function to write a value (numeric) to an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:
 * @returns {Undefined}
 * @param {String} section - The section of the .ini to write to.
 * @param {String} key - The key within the relevant section of the .ini to write to.
 * @param {Real} value - The real value to write to the relevant destination.
 */
declare function ini_write_real(section: String,key: String,value: Real): Undefined;

/**
 * You can use this function to write a string (text) to an ini data file. Ini Files are split into sections and then each section is subsequently split into key - value pairs. So a typical ini file would look something like this:
 * @returns {Undefined}
 * @param {String} section - The section of the .ini to write to.
 * @param {String} key - The key within the relevant section of the .ini to write to.
 * @param {String} value - The string to write to the relevant destination.
 */
declare function ini_write_string(section: String,key: String,value: String): Undefined;

/**
 * Once you have finished working with a given file (whether reading from it or writing to it), you must close the file again, or else you risk losing the information contained within. This also prevents memory leaks and makes sure that you never go over the file limit by having more than 32 files open.
 * @returns {Undefined}
 * @param {Id.TextFile} fileid - The id of the file to close.
 */
declare function file_text_close(fileid: TextFile): Undefined;

/**
 * This function returns true when the end of a given opened text file has been reached or false if not.
 * @returns {Bool}
 * @param {Id.TextFile} fileid - The id of the file to check.
 */
declare function file_text_eof(fileid: TextFile): Bool;

/**
 * With this function you can get GameMaker to check the currently opened file to see if the line being read has finished. The function returns true if the end of the line has been reached and false otherwise.
 * @returns {Bool}
 * @param {Id.TextFile} fileid - The id of the file to check.
 */
declare function file_text_eoln(fileid: TextFile): Bool;

/**
 * This function opens the text file with the indicated filename for writing (if the file does not exist, it is created), returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. The position within the file for writing to is set to the last line of text that the file contains. Note that if the file can't be created (because of an illegal filename, for example) the function will return -1.
 * @returns {Id.TextFile}
 * @param {String} fname - The name of the file to append to.
 */
declare function file_text_open_append(fname: String): TextFile;

/**
 * This function will create a text file from a string and open it for reading, returning the file "handle" that should be used in all further file function calls to read from this file. Note that this file is temporary and read only, and as such it will be removed from memory the moment it is closed.
 * @returns {Id.TextFile}
 * @param {String} string - The string to create the file from.
 */
declare function file_text_open_from_string(string: String): TextFile;

/**
 * This function opens the text file with the indicated filename for reading only, returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. If the file does not exists then the function will return the value -1.
 * @returns {Id.TextFile}
 * @param {String} fname - The name of the file to read from.
 */
declare function file_text_open_read(fname: String): TextFile;

/**
 * This function opens the text file with the indicated filename for writing only (if the file does not exist, it is created), returning the unique id of the file that which should be stored in a variable as it will be used for all further actions to do with that file. Note that if the file can't be created (because of an illegal filename, for example) the function will return -1.
 * @returns {Id.TextFile}
 * @param {String} fname - The name of the file to write to.
 */
declare function file_text_open_write(fname: String): TextFile;

/**
 * With this function you can skip the remainder of the current line from a given opened text file and move to the start of the next one. The function will also return the full line as a string, making it an easy way to read complete "chunks" of data for parsing later.
 * @returns {String}
 * @param {Id.TextFile} fileid - The id of the file to read from.
 */
declare function file_text_readln(fileid: TextFile): String;

/**
 * With this function you can read a real number value from a text file and the function returns that value to be used or stored in a variable.
 * @returns {Real}
 * @param {Id.TextFile} fileid - The id of the file to read from.
 */
declare function file_text_read_real(fileid: TextFile): Real;

/**
 * With this function you can read a string from a text file and the function returns that value to be used or stored in a variable.
 * @returns {String}
 * @param {Id.TextFile} fileid - The id of the file to read from.
 */
declare function file_text_read_string(fileid: TextFile): String;

/**
 * With this function you can write a new line to an opened text file. In this way you can skip lines or write information on a line by line basis (see example code below).
 * @returns {Real}
 * @param {Id.TextFile} fileid - The id of the file to edit.
 */
declare function file_text_writeln(fileid: TextFile): Real;

/**
 * With this function you can write a number to the previously opened text file. Note that as the value to be written can be a real number, all decimals will be written with a "." point as separator. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the file_text_open_append(). You can also avoid this by using the file_text_readln() function along with the file_text_eof() function to loop through the contents of the file until you get to the end and then start writing.
 * @returns {Real}
 * @param {Id.TextFile} fileid - The id of the file to edit.
 * @param {Real} val - The real value to write to the file.
 */
declare function file_text_write_real(fileid: TextFile,val: Real): Real;

/**
 * With this function you can write a string to a previously opened text file. If the file already contains information, this information will be erased and the string will be written at the beginning of the file, unless you have opened the file with the file_text_open_append(). You can also avoid this by using the file_text_readln() function along with the file_text_eof() function to loop through the contents of the file until you get to the end and then start writing.
 * @returns {Real}
 * @param {Id.TextFile} fileid - The id of the file to edit.
 * @param {String} str - The string to write to the file.
 */
declare function file_text_write_string(fileid: TextFile,str: String): Real;

/**
 * This function returns a value between -1 and 1 depending upon the angle of "tilt" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90░. The image below shows how each if the available functions relates to the device:
 * @returns {Real}
 */
declare function device_get_tilt_x(): Real;

/**
 * This function returns a value between -1 and 1 depending upon the angle of "tilt" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90░. The image below shows how each if the available functions relates to the device:
 * @returns {Real}
 */
declare function device_get_tilt_y(): Real;

/**
 * This function returns a value between -1 and 1 depending upon the angle of "tilt" of the device. The actual correlation between degrees of tilt and the value returned depends on the device and OS that it uses, but generally a value of 1 or -1 is the same as +/-90░. The image below shows how each if the available functions relates to the device:
 * @returns {Real}
 */
declare function device_get_tilt_z(): Real;

/**
 * This does a check of the device for a keypad and if one is available it returns true otherwise it returns false. Please note that this function is mainly for use with Android devices
 * @returns {Bool}
 */
declare function device_is_keypad_open(): Bool;

/**
 * This function returns true or false depending on whether the given mouse button is being held down on the given device. For the mouse button you can supply one of the constants listed on this page.
 * @returns {Bool}
 * @param {Real} device - The device (from 0 - n) that is being checked
 * @param {Constant.MouseButton} button - The button of the device that is being checked.
 */
declare function device_mouse_check_button(device: Real,button: MouseButton): Bool;

/**
 * This function returns true or false depending on whether the device that you specify has been "touched" (clicked) or not. The device argument refers to the touch number, which can be from 0 to n and the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs (most devices will support at least 4 simultaneous touches). This function is only triggered once by the actual pressing action, and the constants listed on this page can be used to check for the mouse buttons. Note that mb_right will only be detected if a double tap touch is detected and held on the second tap (this behavior can be disabled using the function device_mouse_dbclick_enable()).
 * @returns {Bool}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 * @param {Constant.MouseButton} button - The button of the device that is being checked.
 */
declare function device_mouse_check_button_pressed(device: Real,button: MouseButton): Bool;

/**
 * This function returns true or false depending on whether the device touch that you specify has been released or not. The device argument refers to the device touch number, which can be from 0 to n and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs (most devices will support at least 4 simultaneous touches). This function is only triggered once by the actual releasing action, and the constants listed on this page can be used to check for the mouse buttons. Note that mb_right will only have been detected if a double tap touch is detected and held on the second tap before release (this behavior can be disabled using the function device_mouse_dbclick_enable()).
 * @returns {Bool}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 * @param {Constant.MouseButton} button - The button of the device that is being checked.
 */
declare function device_mouse_check_button_released(device: Real,button: MouseButton): Bool;

/**
 * This function can be used to set the device to detect a double tap of the mb_left (left mouse button) as an mb_right (right mouse button) tap or not. By default this is set to true, meaning that every time the user taps the device screen twice quickly and consecutively, the return value is the same as if the right mouse button had been clicked. When this is on, the first tap will be detected as mb_left, and the second as mb_right, so make sure that any code you use takes this into account.
 * @returns {Bool}
 * @param {Bool} bool - Set double-click detection on (true) or off (false).
 */
declare function device_mouse_dbclick_enable(bool: Bool): Bool;

/**
 * This function returns the raw x position of a touch on the device. What this means is that it returns the actual device definition of the x position that is being touched, not the GameMaker one, and as such will ignore things like view position and scaling. Note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs
 * @returns {Real}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 */
declare function device_mouse_raw_x(device: Real): Real;

/**
 * This function returns raw y position of the touch on a device. What this means is that it returns the actual device definition of the y position that is being touched, not the GameMaker one, and as such will ignore things like view position and scaling. Note that the maximum number of device touches that can be detected will depend very much on the device being used and the OS it runs
 * @returns {Real}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 */
declare function device_mouse_raw_y(device: Real): Real;

/**
 * This function returns the x position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs. Also note that on HTML5 only "device 0" will function correctly and other devices may give wrong values.
 * @returns {Real}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 */
declare function device_mouse_x(device: Real): Real;

/**
 * This function returns the x position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution and the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs. Also note that on HTML5 only "device 0" will function correctly and other devices may give wrong values.
 * @returns {Real}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 */
declare function device_mouse_x_to_gui(device: Real): Real;

/**
 * This function returns the y position of a touch on the device. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs. Also note that on HTML5 only "device 0" will function correctly and other devices may give wrong values.
 * @returns {Real}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 */
declare function device_mouse_y(device: Real): Real;

/**
 * This function returns the y position of the touch on the device in relation to the GUI layer. Since the GUI layer can be set to be a different size independently of the screen resolution and the room size, it can sometimes be complicated to get the exact point on the GUI layer that a user has touched the screen. With this function you can get that position based on the actual GUI size, making GUI buttons and HUD elements easier to create and interact with. If you are running this on a the HTML5 or PC and Mac modules then this value is updated constantly, as long as the device (usually a mouse) is plugged in, however for mobile devices, this will only be updated while the screen is being touched, and note that the maximum number of touches that can be detected will depend very much on the device being used and the OS it runs. Also note that on HTML5 only "device 0" will function correctly and other devices may give wrong values.
 * @returns {Real}
 * @param {Real} device - The device (from 0 - n) that is being checked.
 */
declare function device_mouse_y_to_gui(device: Real): Real;

/**
 * This function will return the number of "axis" controls on the device being checked. These controls are the analogue direction "thumbsticks" on most controllers.
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 */
declare function gamepad_axis_count(device: Real): Real;

/**
 * Currently only functional on Android, this function will enumerate gamepads to detect any newly added gamepads and remove any recently removed ones without the need for BLUETOOTH_CONNECT permission.
 * @returns {Undefined}
 */
declare function gamepad_enumerate(): Undefined;

/**
 * You can use this function to get the value of the different axes from a given gamepad slot. You supply the gamepad slot index to check, along with either an axis index constant (as listed here), or an integer value between 0 and gamepad_axis_count()-1. The returned value will be between -1 and 1 for each of the available horizontal and vertical axes.
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Constant.GamepadAxis} axisindex - The axis index to check (see the constants list).
 */
declare function gamepad_axis_value(device: Real,axisindex: GamepadAxis): Real;

/**
 * This function will return true or false depending on whether the given gamepad button is detected as being held down or not. If you are checking an analogue button, then the check will take into consideration the threshold setting and only return true while the raw input value is over the given threshold (you can get this raw value using the function gamepad_button_value()).
 * @returns {Bool}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Constant.GamepadButton} button - Which gamepad button constant to check for.
 */
declare function gamepad_button_check(device: Real,button: GamepadButton): Bool;

/**
 * This function will return true or false depending on whether the given gamepad button is detected as having been pressed or not. Note that this function will only trigger once for the button the first time it is pressed. For it to trigger again the button must first be released and then re-pressed. If you need to check a continuous press of the button you should be using the function gamepad_button_check().
 * @returns {Bool}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Constant.GamepadButton} button - Which gamepad button constant to check for.
 */
declare function gamepad_button_check_pressed(device: Real,button: GamepadButton): Bool;

/**
 * This function will return true or false depending on whether the given gamepad button is detected as having been released or not. Note that this function will only trigger once for the button the moment it has been released. For it to trigger again the button must first be pressed and then released once more. If you are checking an analogue button, then the check will take into consideration the threshold setting and only return true when the raw input value goes under the given threshold (you can get this raw value using the function gamepad_button_value()).
 * @returns {Bool}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Constant.GamepadButton} button - Which gamepad button constant to check for.
 */
declare function gamepad_button_check_released(device: Real,button: GamepadButton): Bool;

/**
 * This function will return the total number of buttons available for the gamepad connected to the given device "slot".
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 */
declare function gamepad_button_count(device: Real): Real;

/**
 * With this function you can get the current value of an analogue button, from 0 to 1, where 0 is no pressure and 1 is full pressure. You supply the gamepad slot index to check, along with either a button constant (as listed here), or an integer value between 0 and gamepad_button_count() -1.
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Constant.GamepadButton} button - Which gamepad button constant to check for.
 */
declare function gamepad_button_value(device: Real,button: GamepadButton): Real;

/**
 * This function can be used to get the "dead zone" value of the joystick axis. You specify the device slot to get, and the function will return a value between 0 to 1, where value reflects the threshold under which the joystick axis is considered to be at 0.
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 */
declare function gamepad_get_axis_deadzone(device: Real): Real;

/**
 * This function can be used to detect the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being "pressed" for games that require them to act as a digital button.
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 */
declare function gamepad_get_button_threshold(device: Real): Real;

/**
 * This function will return a string with the description of the given gamepad, for example, a PS3 controller may return a string similar to "PLAYSTATION(R)3 Controller", or an XBox360 controller could return "Xbox 360 Controller (XInput STANDARD GAMEPAD)". This string is hardware dependant and the returned value will depend on the gamepad plugged into the device "slot" that is being checked.
 * @returns {String}
 * @param {Real} device - Which gamepad "slot" to get the name of.
 */
declare function gamepad_get_description(device: Real): String;

/**
 * This function will tell you one of two things; Either the number of game pads connected, or the number of available "slots" for game pads to be connected to. The actual return value will depend on the platform and the internal configuration of that platform and as such this function should be used in conjunction with the function gamepad_is_connected() to make sure of the exact number of pads connected at any time.
 * @returns {Real}
 */
declare function gamepad_get_device_count(): Real;

/**
 * With this function you can retrieve the GUID for the gamepad connected to the given slot index. You supply the gamepad slot to check (from 0 - 11), and the function will return one of the following strings:
 * @returns {String}
 * @param {Real} index - Which gamepad "slot" index to check
 */
declare function gamepad_get_guid(index: Real): String;

/**
 * This function can be used to retrieve the mapping string for the gamepad. This string will be either:
 * @returns {String}
 * @param {Real} index - Which gamepad index "slot" to get the mapping from.
 */
declare function gamepad_get_mapping(index: Real): String;

/**
 * This function can be used to retrieve the given option value. You supply the gamepad "slot" to check, as well as the option string and the function will return the associated value. The available option string will depend on the platform that the project is being run on, as listed below:
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {String} option_name - The name of the option to get the value from (a string, see the table above)
 */
declare function gamepad_get_option(device: Real,option_name: String): Real;

/**
 * This function will return the total number of hats available for the gamepad connected to the given device "slot". Hats generally refer to up/down/left/right buttons, and note that on the Windows target, hats are only available on DirectInput controllers (so, from slot 4 upwards).
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 */
declare function gamepad_hat_count(device: Real): Real;

/**
 * With this function you can get the current value of a gamepad "hat". Each hat value is a bit-mask for the different directions where:
 * @returns {Real}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Real} hatindex - Which gamepad hat (or hats) to check for.
 */
declare function gamepad_hat_value(device: Real,hatindex: Real): Real;

/**
 * This function will return whether a gamepad is connected to the given "slot" (returns true) or not (returns false). You would normally use this function in conjunction with the gamepad_get_device_count() function to get the correct number of available game pads and/or gamepad "slots". Note that there may be a slight delay between the user connecting the gamepad and GameMaker detecting it as being connected (this is especially the case when dealing with bluetooth connected controllers).
 * @returns {Bool}
 * @param {Real} device - Which gamepad "slot" to check.
 */
declare function gamepad_is_connected(device: Real): Bool;

/**
 * With this function you can find out whether the target platform supports game pads (returns true) or not (returns false).
 * @returns {Bool}
 */
declare function gamepad_is_supported(): Bool;

/**
 * This function can be used to remove the current device mapping from the given gamepad slot index. Once called, the slot index will need to be remapped using the gamepad_test_mapping() function if you want to be able to be able to use the gamepad constants to detect input correctly (direct input can always be retrieved using the gamepad_axis/button/hat_count() and gamepad_axis/button/hat_value() functions together).
 * @returns {Undefined}
 * @param {Real} index - Which gamepad index "slot" to remove the mapping from.
 */
declare function gamepad_remove_mapping(index: Real): Undefined;

/**
 * This function can be used to set the "dead zone" of the joystick axis. You specify the device slot to set, and then set a value from 0 to 1 and if the input amount is lower than the given value, the joystick axis is considered to be at 0. Note that this is a global setting that will affect all axis of all joysticks connected to the device slot specified.
 * @returns {Undefined}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Real} deadzone - The dead zone value from 0 to 1.
 */
declare function gamepad_set_axis_deadzone(device: Real,deadzone: Real): Undefined;

/**
 * This function can be used to set the current threshold setting of the analogue buttons for a given device. The default threshold for all analogue buttons is 0.5, with the range being from 0 to 1. The threshold defines at what point the button is considered as being "pressed" for games that require them to act as a digital button. Note that this function will affect the check, pressed and released states for analogue buttons, but will not affect the value returned by the function gamepad_button_check(), which will always return the raw value for the button.
 * @returns {Undefined}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Real} threshold - The new threshold value (from 0 - 1, default 0.5).
 */
declare function gamepad_set_button_threshold(device: Real,threshold: Real): Undefined;

/**
 * This function can be used to set the colour of the LEDs within a PlayStation controller. You specify the device slot to set, and then give a colour, which can be any of the colour constants or a colour value created using the specific colour functions or a HEX value(like $FFFFFFF).
 * @returns {Undefined}
 * @param {Real} device - Which gamepad device "slot" to set.
 * @param {Constant.Color} colour - The colour to use.
 */
declare function gamepad_set_colour(device: Real,colour: Color): Undefined;

/**
 * This function can be used to set any of the available gamepad options. You supply the gamepad "slot" to set the option on, as well as the option string to set and the value to use. The available option string will depend on the platform that the project is being run on, as listed below:
 * @returns {Undefined}
 * @param {Real} device - Which gamepad device "slot" to set.
 * @param {String} option_name - The name of the option to set (a string, see the table above)
 * @param {Any} value - The value to set the option to (can be boolean, real, integer or string - see the table above)
 */
declare function gamepad_set_option(device: Real,option_name: String,value: Any): Undefined;

/**
 * With this function you can set the vibration of the gamepad motors, with either motor using a value from 0 (no vibration) to 1 (full vibration). Note that there is no time limit on this function, so you will need to use a variable or an alarm to switch off the vibration (set motors to 0) after a given time has passed otherwise the gamepad will continue to vibrate indefinitely.
 * @returns {Undefined}
 * @param {Real} device - Which gamepad device "slot" to check.
 * @param {Real} left_motor - The amount of vibration from the left motor from 0 to 1.
 * @param {Real} right_motor - The amount of vibration from the right motor from 0 to 1.
 */
declare function gamepad_set_vibration(device: Real,left_motor: Real,right_motor: Real): Undefined;

/**
 * This function can be used to set the gamepad mapping on those targets that permit it. You supply the "slot" index for the gamepad to set, and then the map string, which should have been created using the SDL format with the following fields:
 * @returns {Undefined}
 * @param {Real} index - Which gamepad index "slot" to set.
 * @param {String} value - The map string to use (see the description for more information).
 */
declare function gamepad_test_mapping(index: Real,value: String): Undefined;

/**
 * This function is used to set the distance within which you have to touch/click the screen again after a single tap in order to trigger a Double Tap Gesture. The distance is measured in inches and has a default value of 0.1.
 * @returns {Undefined}
 * @param {Real} distance - The distance (in inches) to set for double tap gesture event detection.
 */
declare function gesture_double_tap_distance(distance: Real): Undefined;

/**
 * This function is used to set the time it takes between two touches/clicks to trigger a Double Tap Gesture event. The time is measured in seconds and has a default value of 0.16.
 * @returns {Undefined}
 * @param {Real} time - The time (in seconds) to set for double tap gesture event detection.
 */
declare function gesture_double_tap_time(time: Real): Undefined;

/**
 * This function is used to set the distance it takes for a Dragging Gesture event to be triggered by the movement of a touch or click. The distance is measured in inches and has a default value of 0.1.
 * @returns {Undefined}
 * @param {Real} distance - The distance (in inches) to set for drag gesture event detection.
 */
declare function gesture_drag_distance(distance: Real): Undefined;

/**
 * This function is used to set the time it takes for a Drag Gesture event to be triggered by a touch or click. This time will also affect how the Tap Event is triggered as a touch/click and release before this time is up will be considered a Tap. The time is measured in seconds and has a default value of 0.16.
 * @returns {Undefined}
 * @param {Real} time - The time (in seconds) to set for drag gesture event detection.
 */
declare function gesture_drag_time(time: Real): Undefined;

/**
 * This function is used to set the speed required for a Flick Gesture event to be triggered when a touch or click is released. The speed is measured in inches per second and has a default value of 2.0.
 * @returns {Undefined}
 * @param {Real} speed - The speed (in inches per second) to set for flick gesture event detection.
 */
declare function gesture_flick_speed(speed: Real): Undefined;

/**
 * This function is used to get the distance within which you have to touch/click the screen again after a single tap in order to trigger a Double Tap Gesture. The distance is measured in inches and has a default value of 0.1.
 * @returns {Real}
 */
declare function gesture_get_double_tap_distance(): Real;

/**
 * This function is used to get the time it takes between two touches/clicks to trigger a Double Tap Gesture event. The time is measured in seconds and has a default value of 0.16.
 * @returns {Real}
 */
declare function gesture_get_double_tap_time(): Real;

/**
 * This function is used to get the distance it takes for a Dragging Gesture event to be triggered by the movement of a touch or click. The distance is measured in inches and has a default value of 0.1.
 * @returns {Real}
 */
declare function gesture_get_drag_distance(): Real;

/**
 * This function is used to get the time it takes for a Drag Start Gesture event to be triggered by a touch or click. This time will also affect how the Tap Event is triggered as a touch/click and release before this time is up will be considered a Tap. The time is measured in seconds and has a default value of 0.16.
 * @returns {Real}
 */
declare function gesture_get_drag_time(): Real;

/**
 * This function is used to get the speed required for a Flick Gesture event to be triggered when a touch or click is released. The speed is measured in inches per second and has a default value of 2.0.
 * @returns {Real}
 */
declare function gesture_get_flick_speed(): Real;

/**
 * This function is used to get the angle within which a touch must be moving away from another touch before a Pinch Out Gesture may potentially be started. The angle is measured in degrees and has a default value of 45░.
 * @returns {Real}
 */
declare function gesture_get_pinch_angle_away(): Real;

/**
 * This function is used to get the angle within which a touch must be moving towards another touch before a Pinch In Gesture may potentially be started. The angle is measured in degrees and has a default value of 45░.
 * @returns {Real}
 */
declare function gesture_get_pinch_angle_towards(): Real;

/**
 * This function is used to get the distance within which you have to touch/click the screen and move with two fingers before you trigger a Pinch Gesture. The distance is measured in inches and has a default value of 0.1.
 * @returns {Real}
 */
declare function gesture_get_pinch_distance(): Real;

/**
 * This function is used to get the angle which a pair of touches must exceed in order to trigger a Rotate Start Gesture. The angle is measured in degrees and has a default value of 5░.
 * @returns {Real}
 */
declare function gesture_get_rotate_time(): Real;

/**
 * This function is used to check whether tap counting is enabled or disabled. The function will return true if it is enabled, and false otherwise and you can enable or disable tap counting using the function gesture_tap_count(). When enabled, each tap event will have an additional "tapcount" DS map entry which will have registered the number of taps, and when enabled it means that all tap events will be triggered, ie: two taps will trigger both the single tap event and the double tap event, with the single tap event tap count being 1 and the double tap event tap count being 2. The tap count value will be reset to 0 after the time set for a double-tap detection has passed (see the function gesture_double_tap_time()). If tap counting is disabled, then the initial tap won't be registered until the double-tap time has passed and no second tap has been detected. Note that this is enabled by default.
 * @returns {Bool}
 */
declare function gesture_get_tap_count(): Bool;

/**
 * This function is used to set the angle within which a touch must be moving away from another touch before a Pinch Out Gesture may potentially be started. The angle is measured in degrees and has a default value of 45░.
 * @returns {Real}
 * @param {Undefined} angle - None
 */
declare function gesture_pinch_angle_away(angle: Undefined): Real;

/**
 * This function is used to set the angle within which a touch must be moving towards another touch before a Pinch In Gesture may potentially be started. The angle is measured in degrees and has a default value of 45░.
 * @returns {Real}
 * @param {Undefined} angle - None
 */
declare function gesture_pinch_angle_towards(angle: Undefined): Real;

/**
 * This function is used to set the distance within which you have to touch/click the screen and move with two fingers before you trigger a Pinch Gesture. The distance is measured in inches and has a default value of 0.1.
 * @returns {Real}
 * @param {Undefined} distance - None
 */
declare function gesture_pinch_distance(distance: Undefined): Real;

/**
 * This function is used to set the angle which a pair of touches must exceed in order to trigger a Rotate Start Gesture. The angle is measured in degrees and has a default value of 5░.
 * @returns {Real}
 * @param {Undefined} angle - None
 */
declare function gesture_rotate_angle(angle: Undefined): Real;

/**
 * This function is used to set the time within which a pair of touches must be rotating in a consistent direction for a Rotate Start Gesture to be triggered. The time is measured in seconds and has a default value of 0.16s.
 * @returns {Real}
 * @param {Undefined} time - None
 */
declare function gesture_rotate_time(time: Undefined): Real;

/**
 * This function is used to set whether tap counting is enabled or disabled. When set to true tap counting is enabled, and when set to false it is disabled, although you can check which state it is in using the function gesture_get_tap_count(). When enabled, each tap event will have an additional "tapcount" DS map entry which will have registered the number of taps, and when enabled it means that all tap events will be triggered, ie: two taps will trigger both the single tap event and the double tap event, with the single tap event tap count being 1 and the double tap event tap count being 2. The tap count value will be reset to 0 after the time set for a double-tap detection has passed (see the function gesture_double_tap_time()). If tap counting is disabled, then the initial tap won't be registered until the double-tap time has passed and no second tap has been detected. Note that this is enabled by default.
 * @returns {Undefined}
 * @param {Bool} enable - Enable (set to true) or disable (set to false) tap counting.
 */
declare function gesture_tap_count(enable: Bool): Undefined;

/**
 * This function will clear the current keyboard and mouse states. Note that what happens in the next step after calling this function will depend on what is being checked and the platform it is being checked on. With mouse input, the mouse button will have to be released and pressed again for any further input to be detected, but with the keyboard it's not quite that simple. In general, the keyboard will be cleared only for that step but the next step will again detect the key, however this may not be the same across all platforms and keyboards, and in some cases the function may act like it does for the mouse and require the key to be lifted and pressed again.
 * @returns {Undefined}
 */
declare function io_clear(): Undefined;

/**
 * With this function you can check to see if a key is held down or not. Unlike the keyboard_check_pressed() or keyboard_check_released() functions which are only triggered once when the key is pressed or released, this function is triggered every step that the key is held down for. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Bool}
 * @param {Any} key - The key to check the down state of.
 */
declare function keyboard_check(key: Any): Bool;

/**
 * This function will return true if the key with the particular keycode is pressed, or false if it is not, by checking the hardware directly. It allows for a few more checks, in particular you can use keycodes vk_lshift, vk_lcontrol, vk_lalt, vk_rshift, vk_rcontrol and vk_ralt to check whether the left or right shift, control or alt key is pressed. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Bool}
 * @param {Any} key - The key to check the down state of.
 */
declare function keyboard_check_direct(key: Any): Bool;

/**
 * With this function you can check to see if a key has been pressed or not. Unlike the keyboard_check() function, this function will only run once for every time the key is pressed down, so for it to trigger again, the key must be first released and then pressed again. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Bool}
 * @param {Any} key - The key to check the pressed state of.
 */
declare function keyboard_check_pressed(key: Any): Bool;

/**
 * With this function you can check to see if a key has been released or not. Unlike the keyboard_check() function, this function will only run once for every time the key is lifted, so for it to trigger again, the key must be first pressed and then released again. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Bool}
 * @param {Any} key - The key to check the released state of.
 */
declare function keyboard_check_released(key: Any): Bool;

/**
 * With this function you can clear the current keyboard state, which essentially means that if the key is being held down, it will no longer be recognised until it is released again (which won't trigger the Keyboard Key Released event either on this occasion) and pressed again. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Undefined}
 * @param {Any} key - The key to clear.
 */
declare function keyboard_clear(key: Any): Undefined;

/**
 * Sometimes you may wish to get the ascii code for a mapped key (to see if it is already mapped, for example) which is what this function returns. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Real}
 * @param {Any} key - This is the key that you wish to get the mapped value from
 */
declare function keyboard_get_map(key: Any): Real;

/**
 * You can use this function to find the status of the keypad number lock with true being returned for on, and false returned for off.
 * @returns {Bool}
 */
declare function keyboard_get_numlock(): Bool;

/**
 * With this function you can simulate the press of any key on the keyboard. When used, the key will be flagged as being pressed until the corresponding release function is called (see keyboard_key_release()). The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Undefined}
 * @param {Any} key - The key to simulate a press of.
 */
declare function keyboard_key_press(key: Any): Undefined;

/**
 * With this function you can simulate the release of any key on the keyboard. The function will take a keycode value as returned by the function ord() (only capital letters from A-Z or numbers from 0-9), or any of the vk_* constants listed on the main Keyboard Input page.
 * @returns {Undefined}
 * @param {Any} key - The key to simulate a release of.
 */
declare function keyboard_key_release(key: Any): Undefined;

/**
 * Sometimes when making a game you may wish one key to do the same as another. For example many people use the keys WASD for movement, but then many people also use the arrow keys! So, what to do? Well, you could code the movement system twice, but that is a bit complicated and thankfully redundant as this function permits you to "map" one key to another and so any input from either key will be interpreted as the same. To do this you choose a key that you want to map (key2 - this will be the key that you write the code for) and a key that you want it to be mapped to (key1). After that, keypresses to either key will be interpreted by GameMaker as coming from key2. You can also use this function to design a system where the user can define their own keys for playing by simply mapping the user input key to the key that you have coded into the game.
 * @returns {Bool}
 * @param {Any} key1 - This is the key that key1 is to be mapped to
 * @param {Any} key2 - This is the key that is to be mapped
 */
declare function keyboard_set_map(key1: Any,key2: Any): Bool;

/**
 * You can use this function to switch the keypad number-lock on or off (set to true for on, and false for off).
 * @returns {Undefined}
 * @param {Bool} value - Set this to true for "on" and false for "off"
 */
declare function keyboard_set_numlock(value: Bool): Undefined;

/**
 * With this function you can clear all re-mapped keys so that they return to their default state, ie: all keys to map to themselves.
 * @returns {Undefined}
 */
declare function keyboard_unset_map(): Undefined;

/**
 * This function will return true if the mouse button being checked is held down or false if it is not. You supply the mouse button to check from one of the following constants:
 * @returns {Bool}
 * @param {Constant.MouseButton} numb - Which mouse button constant to check for.
 */
declare function mouse_check_button(numb: MouseButton): Bool;

/**
 * This function will return true if the mouse button being checked has been pressed or false if it has not. This function will only be triggered once for any mouse button when it is first pressed and to trigger it again the button will need to have been released and pressed again. Note that it will be considered triggered for the duration of the step, and for all instances that have any mouse events or that use this same function.
 * @returns {Bool}
 * @param {Constant.MouseButton} numb - Which mouse button constant to check for.
 */
declare function mouse_check_button_pressed(numb: MouseButton): Bool;

/**
 * This function will return true if the mouse button being checked has been released or false if it has not. This function will only be triggered once for any mouse button when it is released and to trigger it again the button will need to have been pressed and released again. You supply the mouse button to check from one of the following constants:
 * @returns {Bool}
 * @param {Constant.MouseButton} numb - Which mouse button constant to check for.
 */
declare function mouse_check_button_released(numb: MouseButton): Bool;

/**
 * This function will clear the current state of the given mouse button. This means that checks for it being held down will not return true until the player releases the button and presses it again (but the release state will still be detected if the clear is done while the mouse button is being held down).
 * @returns {Bool}
 * @param {Constant.MouseButton} button - Which mouse button constant to check for.
 */
declare function mouse_clear(button: MouseButton): Bool;

/**
 * This function returns true if the mouse wheel is being rotated downwards and false otherwise.
 * @returns {Bool}
 */
declare function mouse_wheel_down(): Bool;

/**
 * This function returns true if the mouse wheel is being rotated upwards and false otherwise.
 * @returns {Bool}
 */
declare function mouse_wheel_up(): Bool;

/**
 * This function will return the current height in pixels of the virtual keyboard, based on the size of the display. If the keyboard is not visible, 0 will be returned.
 * @returns {Real}
 */
declare function keyboard_virtual_height(): Real;

/**
 * This function can be used to hide the virtual keyboard on the device running the game. Calling this function will generate a System Asynchronous Event, in which the async_load DS map will be populated with the following key/value pairs:
 * @returns {Undefined}
 */
declare function keyboard_virtual_hide(): Undefined;

/**
 * This function can be used to show the virtual keyboard on the device running the game. When you call this function you need to provide one of the following constants for each of the first three arguments:
 * @returns {Undefined}
 * @param {Constant.VirtualKeyboardType} keyboard_type - Determines the keyset available on the virtual keyboard.
 * @param {Constant.VirtualKeyboardReturnType} return_key_type - Determines what is shown on the return/action key of the virtual keyboard.
 * @param {Constant.VirtualKeyboardAutoCapitalizeType} autocapitalization_type - Determines how/if the words typed via the virtual keyboard will be autocapitalized.
 * @param {Bool} predictive_text_enabled - Set to true/false to enable/disable predictive text input.
 */
declare function keyboard_virtual_show(keyboard_type: VirtualKeyboardType,return_key_type: VirtualKeyboardReturnType,autocapitalization_type: VirtualKeyboardAutoCapitalizeType,predictive_text_enabled: Bool): Undefined;

/**
 * This function can be used to get the status of the virtual keyboard on the device running the game. The function will return true if the OS virtual keyboard is visible/being shown or false if it is hidden/hiding.
 * @returns {Bool}
 */
declare function keyboard_virtual_status(): Bool;

/**
 * This function enables you to map "touches" of a screen area to keyboard events. This means that once you have assigned an area to a virtual key, all touches on that area will trigger the keyboard event corresponding to the key you have mapped to the area. You can assign each virtual key you define to a variable too, which can then be used in the further virtual key functions to show, hide and delete them. These keys are assigned on a per room basis and will be automatically removed by GameMaker when changing rooms.
 * @returns {Real}
 * @param {Real} x - The x coordinate (left side) of the virtual key on the screen
 * @param {Real} y - The y coordinate (top side) of the virtual key on the screen
 * @param {Real} w - The width of the virtual key
 * @param {Real} h - The height of the virtual key
 * @param {Real} keycode - Which keyboard key event should be triggered by touching this area
 */
declare function virtual_key_add(x: Real,y: Real,w: Real,h: Real,keycode: Real): Real;

/**
 * If your game has different rooms or instances to control menus and game-play and other things, then it is probable that you will need to change the position and key maps of your virtual keys at some point. For that you can use this function to delete the old ones before creating the new ones (if necessary). The function requires that you supply the ID of the virtual key to delete - as returned by virtual_key_add().
 * @returns {Undefined}
 * @param {Real} index - The index of the virtual key to delete.
 */
declare function virtual_key_delete(index: Real): Undefined;

/**
 * Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly and for that you would call the function virtual_key_show(). However, you may need to toggle this view on and off, so you can also hide the virtual key with this function, using the index of the virtual key that you want to hide (previously created and stored using virtual_key_add()). Once you are happy with things it is recommended that you create and place your own graphic in its area.
 * @returns {Undefined}
 * @param {Real} index - The index of the virtual key to hide.
 */
declare function virtual_key_hide(index: Real): Undefined;

/**
 * Once you have created your virtual key for your devices, you may need to debug and test that it is correctly positioned and working properly. For that you would call this function, using the index of the virtual key that you want to see (previously created and stored using virtual_key_add()) which will draw a coloured rectangle to represent the key on the screen. Once you are happy with things it is recommended that you create and place your own graphic in its area.
 * @returns {Undefined}
 * @param {Real} index - The index of the virtual key to show.
 */
declare function virtual_key_show(index: Real): Undefined;

/**
 * With this function you can trigger the garbage collector, forcing it to run at the end of the current frame (step). It is worth noting that the garbage collector does not need to be active for this to work. Calling this function after disabling the garbage collector (using the function gc_enable()) will enable the garbage collector for one frame in which all objects that have been flagged for collection will be removed from memory before the garbage collector is disabled again.
 * @returns {Undefined}
 */
declare function gc_collect(): Undefined;

/**
 * With this function you can enable or disable the garbage collector. Calling the function with true as the argument enables it and using false disables it (not recommended). It is enabled by default.
 * @returns {Undefined}
 * @param {Bool} enable - enable (true) or disable (false) the garbage collector.
 */
declare function gc_enable(enable: Bool): Undefined;

/**
 * With this function you can retrieve information about the current state of the garbage collector. The function will return a struct which will have the following member variables (note that "objects" here refers to anything that can be garbage collected and not general object instances as defined in the Asset Browser):
 * @returns {Struct.GCStats}
 */
declare function gc_get_stats(): GCStats;

/**
 * With this function you can retrieve the current target frame value for the garbage collector. The value returned is in microseconds (where 1,000,000 microseconds equals one second) and the default target frame time is 100 microseconds. If you wish to change this value then you should use the function gc_target_frame_time().
 * @returns {Real}
 */
declare function gc_get_target_frame_time(): Real;

/**
 * With this function you can check to see if the garbage collector is enabled or not. The function will return true if it is enabled or false otherwise.
 * @returns {Bool}
 */
declare function gc_is_enabled(): Bool;

/**
 * With this function you can indicate to the garbage collector that it shoulde aim to spend no more than the time specified running each frame. The function takes a time value specified in microseconds (where 1,000,000 microseconds equals one second) and the default target frame time is 100 microseconds.
 * @returns {Undefined}
 * @param {Real} time - The target time - in microseconds -  that the garbage collector should work each frame
 */
declare function gc_target_frame_time(time: Real): Undefined;

/**
 * With this function you can check the weak reference to a struct to see if it is still "alive" or not. You supply the weak reference to check (as returned by the function weak_ref_create()), and the function will return true if the struct is still being referenced somewhere or false if it's not and has been garbage collected. Note that if you supply a value that is not a weak reference, the function will return undefined.
 * @returns {Struct.WeakRef}
 * @param {Struct} struct_to_track - The struct that you want to create a weak reference for
 */
declare function weak_ref_create(struct_to_track: Struct): WeakRef;

/**
 * With this function you can check the weak reference to various structs to see if it they are still "alive" or not. You supply an array of weak references to check (each weak reference should have been created using the function weak_ref_create()), and the function will return true if any of the structs are still being referenced somewhere or false if they are not and have been garbage collected. Note that if you supply an array where any of the values are not a weak references, the function will return undefined.
 * @returns {Bool}
 * @param {Array[Struct.WeakRef]} weak_ref - The weak reference to the struct you want to check.
 * @param {Real} index - OPTIONAL! The index into the array to start checking from
 * @param {Real} length - OPTIONAL! The number of positions from the given index to check
 */
declare function weak_ref_any_alive(weak_ref: Array[WeakRef],index: Real,length: Real): Bool;

/**
 * With this function you can end the game (and the Game End Event will be triggered). This will not happen instantaneously, but rather at the end of the current step, so any code you have in the same step after this function has been called will still run. Please note that this function has the following restrictions:
 * @returns {Undefined}
 * @param {Real} return_code - The return code of the application, will default to 0.
 */
declare function game_end(return_code: Real): Undefined;

/**
 * This function can be used to get the game speed as either the number of game frames to run per second or as the number of micro seconds per game frame. Note that this is not the actual running speed FPS value (for that use the fps_real variable) but rather the number of game frames (FPS) that the game will attempt to maintain each second, or the length of each game frame in microseconds that the game will try to maintain (MPF). When you use this function you need to give one of the following constants which will determine the type of the return value:
 * @returns {Real}
 * @param {Constant.GameSpeed} type - The type of method used to get the game speed (see the constants above).
 */
declare function game_get_speed(type: GameSpeed): Real;

/**
 * With this function you can load a game that has been previously saved using game_save(). Note that it will restore the version of the game that was used to create the save, so any updates made after it will not be visible. For more info, read the page on game_save().
 * @returns {Undefined}
 * @param {String} filename - The name of the file to load.
 */
declare function game_load(filename: String): Undefined;

/**
 * With this function you can load a game state that has been saved previously. The game is loaded from a previously created "grow" buffer (see Buffers) and the buffer must have had a game state saved to it using game_save_buffer() function.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The buffer id to load from.
 */
declare function game_load_buffer(buffer: Buffer): Undefined;

/**
 * With this function you can restart the game. This is essentially the same as running the game for the first time and so the Game Start Event will be triggered, as well as the Game End Event.
 * @returns {Undefined}
 */
declare function game_restart(): Undefined;

/**
 * This is a legacy function that can be used to save the current state of the game, and is not recommended for use anymore. Use the File functions instead to create a custom save system where you only save and load specific game data.
 * @returns {Undefined}
 * @param {String} filename - The name of the file to save the game to.
 */
declare function game_save(filename: String): Undefined;

/**
 * This is a variant of the game_save() function, so please read its page first as it contains important information related to its use and to this function's as well.
 * @returns {Undefined}
 * @param {Id.Buffer} buffer - The buffer id to save to.
 */
declare function game_save_buffer(buffer: Buffer): Undefined;

/**
 * This function can be used to set the game speed. You can set this in one of two ways - as either game frames per second (FPS) or as microseconds per game frame (MPF) - using one of the following two constants:
 * @returns {Undefined}
 * @param {Real} speed - The new game speed (as either FPS or MPF).
 * @param {Constant.GameSpeed} type - The type of method used to set the game speed (see the constants above).
 */
declare function game_set_speed(speed: Real,type: GameSpeed): Undefined;

/**
 * This function allows you to close the currently running title and launch another title, it will only work in VM and on certain platforms it will only work in a package build and not in run\debug. 
 * @returns {Undefined}
 * @param {String} working_directory - The directory in which the new game will launch.
 * @param {String} launch_parameters - Command line parameters to be passed to the new game.
 */
declare function game_change(working_directory: String,launch_parameters: String): Undefined;

/**
 * With this function you can add a name and a score to the internal global high score list. There is no need to check the value to see if it is high enough to enter into the score list as GameMaker will only store those values that are greater than the tenth position stored.
 * @returns {Undefined}
 * @param {String} str - The string (name) to attribute the score to
 * @param {Real} numb - The number (score) to add.
 */
declare function highscore_add(str: String,numb: Real): Undefined;

/**
 * With this function you can retrieve the score value that has been stored in the high score list at the given position. If no score has been entered, the function will return 0.
 * @returns {Real}
 * @param {Real} place - The place on the table (1-10).
 */
declare function highscore_value(place: Real): Real;

/**
 * With this function you can retrieve the name string that has been stored in the high score list at the given position. If no name has been entered, the string "Unknown" will be returned.
 * @returns {String}
 * @param {Real} place - The place on the table (1-10).
 */
declare function highscore_name(place: Real): String;

/**
 * This function will return the smallest angle difference between two angles as a value between -180 and 180 degrees (where a positive angle is anti-clockwise and a negative angle clockwise).
 * @returns {Real}
 * @param {Real} ang1 - The first angle to use.
 * @param {Real} ang2 - The second angle to use.
 */
declare function angle_difference(ang1: Real,ang2: Real): Real;

/**
 * Returns the inverse cosine of x, in that if cos(val)=n, arccos(n)=val, and the resulting number will be between pi and 0.
 * @returns {Real}
 * @param {Real} x - The angle (in radians) to return the inverse cosine of.
 */
declare function arccos(x: Real): Real;

/**
 * Returns the inverse sine of x, in that if sin(x)=n, arcsin(n)=x, and the resulting number will be between -pi/2 and pi/2.
 * @returns {Real}
 * @param {Real} x - The value to return the inverse sine of.
 */
declare function arcsin(x: Real): Real;

/**
 * Returns the inverse tangent of x. This will accept any number as, unlike tan(), arctan() asymptotes are on the y axis so it just means you'll never get returned a number greater than pi/2 or less than -pi/2.
 * @returns {Real}
 * @param {Real} x - The angle (in radians) to return the inverse tangent of.
 */
declare function arctan(x: Real): Real;

/**
 * This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike arctan() the function arctan2(y, x) is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.
 * @returns {Real}
 * @param {Real} y - The y coordinate to calculate.
 * @param {Real} x - The x coordinate to calculate.
 */
declare function arctan2(y: Real,x: Real): Real;

/**
 * In a right angled triangle cos(val) = Adjacent / Hypotenuse where val is one of the three angles. This function will always return a number between 1 and -1.
 * @returns {Real}
 * @param {Real} val - The angle (in radians) to return the cosine of.
 */
declare function cos(val: Real): Real;

/**
 * Returns the inverse cosine of x, in that if dcos(val)=n, darccos(n)=val, and the resulting number will be between 180 and 0.
 * @returns {Real}
 * @param {Real} x - The value to return the inverse cosine of.
 */
declare function darccos(x: Real): Real;

/**
 * Returns the inverse sine of x, in that if dsin(x)=n, darcsin(n)=x, and the resulting number will be between -90 and 90.
 * @returns {Real}
 * @param {Real} val - The value to return the inverse sine of.
 */
declare function darcsin(val: Real): Real;

/**
 * Returns the inverse tangent of x. This will accept any number as, unlike dtan(), darctan() asymptotes are on the y axis so it just means you'll never get returned a number greater than 90 or less than -90.
 * @returns {Real}
 * @param {Real} val - The value to return the inverse tangent of.
 */
declare function darctan(val: Real): Real;

/**
 * This function returns the inverse tangent of an angle y/x, where y = Opposite side of triangle and x = Adjacent side of triangle. Unlike darctan() the function darctan2() is valid for all angles and so may be used to convert a vector to an angle without risking division by zero, and it also returns a result in the correct quadrant.
 * @returns {Real}
 * @param {Real} y - The y coordinate to calculate.
 * @param {Real} x - The x coordinate to calculate.
 */
declare function darctan2(y: Real,x: Real): Real;

/**
 * In a right angled triangle cos(val) = Adjacent / Hypotenuse where val is one of the three angles. This function will always return a number between 1 and -1.
 * @returns {Real}
 * @param {Real} val - The angle (in degrees) to return the cosine of.
 */
declare function dcos(val: Real): Real;

/**
 * In GM all the trigonometric functions work in radians, but most people work in degrees and this means that to convert your degrees into radians you need to use this function. For example, degtorad(180) returns 3.14159265 radians. This function translates degrees into radians using the formula:
 * @returns {Real}
 * @param {Real} deg - The degrees to convert.
 */
declare function degtorad(deg: Real): Real;

/**
 * This function calculates the distance from the edge of the bounding box of the calling instance to the nearest edge of the nearest instance of the object specified. The object can be an object index or a specific instance ID as well as the keyword other, and the distance is returned in pixels. Note that if either of the objects have no sprite or no mask defined, the results will be incorrect.
 * @returns {Real}
 * @param {Any} obj - The object to check for.
 */
declare function distance_to_object(obj: Any): Real;

/**
 * This function checks a sphere of radius r at position x,y,z against the current view frustum. Returns true if the sphere intersects or is contained in the view frustum and false if the sphere is completely outside the view frustum.
 * @returns {Bool}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 * @param {Real} z - The z position to check.
 * @param {Real} r - The radius of the sphere to check.
 */
declare function sphere_is_visible(x: Real,y: Real,z: Real,r: Real): Bool;

/**
 * This function calculates the distance from the edge of the bounding box of the calling instance to the specified x/y position in the room, with the return value being in pixels. Note that if the calling object have no sprite or no mask defined, the results will be incorrect.
 * @returns {Real}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 */
declare function distance_to_point(x: Real,y: Real): Real;

/**
 * The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name "dot product" is derived from the centered dot "╖" that is often used to designate this operation (the alternative name "scalar product" emphasizes the scalar rather than vector nature of the result).
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first vector.
 * @param {Real} y1 - The y coordinate of the first vector.
 * @param {Real} x2 - The x coordinate of the second vector.
 * @param {Real} y2 - The y coordinate of the second vector.
 */
declare function dot_product(x1: Real,y1: Real,x2: Real,y2: Real): Real;

/**
 * The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name "dot product" is derived from the centered dot "╖" that is often used to designate this operation (the alternative name "scalar product" emphasizes the scalar rather than vector nature of the result).
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first vector.
 * @param {Real} y1 - The y coordinate of the first vector.
 * @param {Real} z1 - The z coordinate of the first vector.
 * @param {Real} x2 - The x coordinate of the second vector.
 * @param {Real} y2 - The y coordinate of the second vector.
 * @param {Real} z2 - The z coordinate of the second vector.
 */
declare function dot_product_3d(x1: Real,y1: Real,z1: Real,x2: Real,y2: Real,z2: Real): Real;

/**
 * The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name "dot product" is derived from the centered dot "╖" that is often used to designate this operation (the alternative name "scalar product" emphasizes the scalar rather than vector nature of the result).
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first vector.
 * @param {Real} y1 - The y coordinate of the first vector.
 * @param {Real} z1 - The z coordinate of the first vector.
 * @param {Real} x2 - The x coordinate of the second vector.
 * @param {Real} y2 - The y coordinate of the second vector.
 * @param {Real} z2 - The z coordinate of the second vector.
 */
declare function dot_product_3d_normalised(x1: Real,y1: Real,z1: Real,x2: Real,y2: Real,z2: Real): Real;

/**
 * The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name "dot product" is derived from the centered dot "╖" that is often used to designate this operation (the alternative name "scalar product" emphasizes the scalar rather than vector nature of the result).
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first vector.
 * @param {Real} y1 - The y coordinate of the first vector.
 * @param {Real} x2 - The x coordinate of the second vector.
 * @param {Real} y2 - The y coordinate of the second vector.
 */
declare function dot_product_normalised(x1: Real,y1: Real,x2: Real,y2: Real): Real;

/**
 * In a right angled triangle dsin(val) = Opposite / Hypotenuse where "val" is one of the three angles.
 * @returns {Real}
 * @param {Real} val - The angle (in degrees) to return the sine of.
 */
declare function dsin(val: Real): Real;

/**
 * In a right angled triangle dtan(val) = Opposite / Adjacent where "val" is one of the three angles.
 * @returns {Real}
 * @param {Real} val - The angle (in degrees) to return the tangent of.
 */
declare function dtan(val: Real): Real;

/**
 * This function is used to get the x component of a position "len" pixels from the starting point and in direction "dir". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move to that point we need to move the object so many pixels in that direction... so this function (when used with lengthdir_y()) gets the position of that point on the circle to be used in code by the instance. See the image below for details:
 * @returns {Real}
 * @param {Real} len - The length away of the point to return.
 * @param {Real} dir - The direction of the point to return.
 */
declare function lengthdir_x(len: Real,dir: Real): Real;

/**
 * This function is used to get the y component of a position "len" pixels from the starting point and in direction "dir". If you imagine a circle around your instance, and then imagine a point anywhere on that circle, to move to that point we need to move the object so many pixels in that direction... so this function (when used with lengthdir_x()) gets the position of that point on the circle to be used in code by the instance. See the image below for details:
 * @returns {Real}
 * @param {Real} len - The length away of the point to return.
 * @param {Real} dir - The direction of the point to return.
 */
declare function lengthdir_y(len: Real,dir: Real): Real;

/**
 * This function returns the direction of a vector formed by the specified components [x1,y1] and [x2,y2] in relation to the fixed x/y coordinates of the room. For example, in the image below if we want to get the direction from the player ship position to the enemy position so that we can fire a missile at the enemy then we would use this function (the exact code is in the example below the image):
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first component of the vector
 * @param {Real} y1 - The y coordinate of the first component of the vector
 * @param {Real} x2 - The x coordinate of the second component of the vector
 * @param {Real} y2 - The y coordinate of the second component of the vector
 */
declare function point_direction(x1: Real,y1: Real,x2: Real,y2: Real): Real;

/**
 * This function returns the length of a vector formed by the specified components [x1,y1] and [x2,y2]. For example, in the image below if we want to get the distance between the player ship position and the enemy position so that we can calculate if the enemy is close enough to shoot at then we would use this function (the exact code is in the example below the image):
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first component of the vector
 * @param {Real} y1 - The y coordinate of the first component of the vector
 * @param {Real} x2 - The x coordinate of the second component of the vector
 * @param {Real} y2 - The y coordinate of the second component of the vector
 */
declare function point_distance(x1: Real,y1: Real,x2: Real,y2: Real): Real;

/**
 * This function takes the supplied components of the vector and returns the length (distance) of the vector. It works in exactly the same way as point_distance() but with the addition of factoring in the z value (depth) for use in 3D space.
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first component of the vector
 * @param {Real} y1 - The y coordinate of the first component of the vector
 * @param {Real} z1 - The z coordinate of the first component of the vector
 * @param {Real} x2 - The x coordinate of the second component of the vector
 * @param {Real} y2 - The y coordinate of the second component of the vector
 * @param {Real} z2 - The z coordinate of the second component of the vector
 */
declare function point_distance_3d(x1: Real,y1: Real,z1: Real,x2: Real,y2: Real,z2: Real): Real;

/**
 * Once you have done your calculations using sin, or cos etc... the result is in radians. This may not always be what you want and so to turn the radians into degrees we use this function. For example, radtodeg(sin(180)) will return -45 degrees. This function translates radians into degrees using the formula:
 * @returns {Real}
 * @param {Real} rad - The radians to convert.
 */
declare function radtodeg(rad: Real): Real;

/**
 * In a right angled triangle sin(val) = Opposite / Hypotenuse where val is one of the three angles.
 * @returns {Real}
 * @param {Real} val - The angle (in radians) to return the sine of.
 */
declare function sin(val: Real): Real;

/**
 * In a right angled triangle tan(val) = Opposite / Adjacent where val is one of the three angles.
 * @returns {Real}
 * @param {Real} val - The angle (in radians) to return the tangent of.
 */
declare function tan(val: Real): Real;

/**
 * With this function you can check two dates to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 0 if both dates are the same, and 1 if date1 is later.
 * @returns {Real}
 * @param {Real} date1 - The first date.
 * @param {Real} date2 - The date to compare it to.
 */
declare function date_compare_date(date1: Real,date2: Real): Real;

/**
 * With this function you can check two dates and times to see which one is the earlier or later than the other. The function returns -1 if date1 is earlier, 1 if date1 is later and 0 if they are the same, although since this takes time into account as well, a 0 for matching is very rare (it literally has to be the same second of the same day of the same month of the same year to return a 0).
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_compare_datetime(date1: Real,date2: Real): Real;

/**
 * With this function you can check two dates and times to see which one has the time component earlier or later than the other. The function returns -1 if datetime1 is earlier, 1 if datetime1 is later and 0 if they are the same, and it ignores the date, so literally just which of the times is further through its given day.
 * @returns {Real}
 * @param {Real} datetime1 - The first datetime.
 * @param {Real} datetime2 - The datetime to compare the first one to.
 */
declare function date_compare_time(datetime1: Real,datetime2: Real): Real;

/**
 * This function will create a datetime value from the component given as the arguments.
 * @returns {Real}
 * @param {Real} year - The year to set.
 * @param {Real} month - The month to set.
 * @param {Real} day - The day to set.
 * @param {Real} hour - The hour to set.
 * @param {Real} minute - The minute to set.
 * @param {Real} second - The second to set.
 */
declare function date_create_datetime(year: Real,month: Real,day: Real,hour: Real,minute: Real,second: Real): Real;

/**
 * Returns the date-time value of the current moment. The time returned is based on the default time zone for the system (ie: local time). You can change the base time zone to use with the function date_set_timezone()
 * @returns {Real}
 */
declare function date_current_datetime(): Real;

/**
 * With this function you can create a string containing the given datetime, formatted for the system or device that is running the game when the function is called.
 * @returns {String}
 * @param {Real} date - The date to use.
 */
declare function date_datetime_string(date: Real): String;

/**
 * Returns the date value of the given datetime.
 * @returns {Real}
 * @param {Real} date - The datetime to extract the date from.
 */
declare function date_date_of(date: Real): Real;

/**
 * With this function you can create a string containing the given date, formatted as day/month/year.
 * @returns {String}
 * @param {Real} date - The date to use.
 */
declare function date_date_string(date: Real): String;

/**
 * With this function you can get the number of days that the given month has, either 28, 29, 30 or 31.
 * @returns {Real}
 * @param {Real} date - The date to use.
 */
declare function date_days_in_month(date: Real): Real;

/**
 * With this function you can get the number of days that the given year has, returning 365 for a normal year, and 366 for a leap year.
 * @returns {Real}
 * @param {Real} date - The date to use.
 */
declare function date_days_in_year(date: Real): Real;

/**
 * With this function you can get the number of days between two dates. This value is always positive, and incomplete days will be returned as a fraction.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_day_span(date1: Real,date2: Real): Real;

/**
 * This function returns the day (from 1 to 31) of the given datetime.
 * @returns {Real}
 * @param {Real} date - The date to check.
 */
declare function date_get_day(date: Real): Real;

/**
 * This function returns the day (from 1 to 366) within the year of the given datetime.
 * @returns {Real}
 * @param {Real} date - The date to check.
 */
declare function date_get_day_of_year(date: Real): Real;

/**
 * This function returns the hour of the given datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_hour(date: Real): Real;

/**
 * This function returns the hour of the given datetime value within the year (from the total number of hours for the year, taking into account leap years).
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_hour_of_year(date: Real): Real;

/**
 * This function returns the minute of the given datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_minute(date: Real): Real;

/**
 * This function returns the minute of the given datetime value within the year (from the total number of minutes for the year, taking into account leap years).
 * @returns {Real}
 * @param {Real} date - The date to check.
 */
declare function date_get_minute_of_year(date: Real): Real;

/**
 * This function returns the month of the given datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_month(date: Real): Real;

/**
 * This function returns the second of the given datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_second(date: Real): Real;

/**
 * This function returns the second of the given datetime value within the year (from the total number of seconds for the year, taking into account leap years).
 * @returns {Real}
 * @param {Real} date - The date to check.
 */
declare function date_get_second_of_year(date: Real): Real;

/**
 * Gets the base time zone being used for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and the function will return one of the following constants:
 * @returns {Real}
 */
declare function date_get_timezone(): Real;

/**
 * This function returns the week of the given datetime value within the year.
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_week(date: Real): Real;

/**
 * This function returns the week day value of the given datetime. This will be a value from 0 to 6.
 * @returns {Real}
 * @param {Real} date - The date to check.
 */
declare function date_get_weekday(date: Real): Real;

/**
 * This function returns the year of the given datetime.
 * @returns {Real}
 * @param {Real} date - The datetime to check.
 */
declare function date_get_year(date: Real): Real;

/**
 * With this function you can get the number of hours between two dates. This value is always positive, and incomplete hours will be returned as a fraction.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare the first one to.
 */
declare function date_hour_span(date1: Real,date2: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of days, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to.
 * @param {Real} amount - The number of days (must be an integer) to add.
 */
declare function date_inc_day(date: Real,amount: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of hours, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to.
 * @param {Real} amount - The number of hours (must be an integer) to add.
 */
declare function date_inc_hour(date: Real,amount: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of minutes, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to.
 * @param {Real} amount - The number of minutes (must be an integer) to add.
 */
declare function date_inc_minute(date: Real,amount: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of months, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to.
 * @param {Real} amount - The number of months (must be an integer) to add.
 */
declare function date_inc_month(date: Real,amount: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of seconds, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to.
 * @param {Real} amount - The number of seconds (must be an integer) to add.
 */
declare function date_inc_second(date: Real,amount: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of weeks, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to.
 * @param {Real} amount - The number of weeks (must be an integer) to add.
 */
declare function date_inc_week(date: Real,amount: Real): Real;

/**
 * With this function you can increment a given datetime value by a specific number of years, and it will return the new datetime value.
 * @returns {Real}
 * @param {Real} date - The datetime to add to
 * @param {Real} amount - The number of years (must be an integer) to add.
 */
declare function date_inc_year(date: Real,amount: Real): Real;

/**
 * This function will return true if the given datetime value is the day it is being checked on (ie: today), or false otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking seasonal content. Note that this function will be affected by the time zone set (default is local time) which you can change using the date_set_timezone() function.
 * @returns {Bool}
 * @param {Real} date - The datetime to use.
 */
declare function date_is_today(date: Real): Bool;

/**
 * This function will return true if the year component of the given datetime value is a leap year or false otherwise. This can be a handy function for things like Easter Eggs in your games, or for unlocking special content.
 * @returns {Bool}
 * @param {Real} date - The datetime to use.
 */
declare function date_leap_year(date: Real): Bool;

/**
 * With this function you can get the number of minutes between two dates. This value is always positive, and incomplete minutes will be returned as a fraction.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_minute_span(date1: Real,date2: Real): Real;

/**
 * With this function you can get the number of months between two dates. This value is always positive, and incomplete months will be returned as a fraction.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_month_span(date1: Real,date2: Real): Real;

/**
 * With this function you can get the number of seconds between two dates. The return value is always positive and will be a whole number.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_second_span(date1: Real,date2: Real): Real;

/**
 * Sets the base time zone to use for all the rest of the date and time functions. This time zone can either be local (as set by the system) or UTC, and you would use one of the following constants to define which is being used (by default this is local time):
 * @returns {Undefined}
 * @param {Real} timezone - The time zone to use for the base time.
 */
declare function date_set_timezone(timezone: Real): Undefined;

/**
 * Returns the time value of the given datetime. The time returned ignores Daylight Saving Time (and so is Universal Time) and would normally be used in conjunction with another date/time handling function.
 * @returns {Real}
 * @param {Real} date - The datetime to extract the time from.
 */
declare function date_time_of(date: Real): Real;

/**
 * With this function you can create a string containing the given time, formatted for the system or device that is running the game when the function is called.
 * @returns {String}
 * @param {Real} date - The datetime to use.
 */
declare function date_time_string(date: Real): String;

/**
 * With this function you can check a datetime value to see if it is valid (returns true) or not (returns false). Note that this function will only consider a valid datetime as being after 1/1/1970 and anything before that will return false, so the earliest you can check would be:
 * @returns {Bool}
 * @param {Real} year - The year to check.
 * @param {Real} month - The month to check.
 * @param {Real} day - The day to check.
 * @param {Real} hour - The hour to check.
 * @param {Real} minute - The minute to check.
 * @param {Real} second - The second to check.
 */
declare function date_valid_datetime(year: Real,month: Real,day: Real,hour: Real,minute: Real,second: Real): Bool;

/**
 * With this function you can get the number of weeks between two dates. This value is always positive, and incomplete weeks will be returned as a fraction.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_week_span(date1: Real,date2: Real): Real;

/**
 * With this function you can get the number of years between two dates. This value is always positive, and incomplete years will be returned as a fraction.
 * @returns {Real}
 * @param {Real} date1 - The first datetime.
 * @param {Real} date2 - The datetime to compare it to.
 */
declare function date_year_span(date1: Real,date2: Real): Real;

/**
 * This function returns the time that your game has been running on the chosen platform in microseconds (there are 1 million microseconds per second).
 * @returns {Real}
 */
declare function get_timer(): Real;

/**
 * This function can be used to create your own custom matrix and will return an index value for this new matrix which should be stored in a variable for future reference and use. The matrix itself is created as 16 value array where the first 4 elements are row 1, the second 4 elements are row 2 etc... of a 4x4 matrix.
 * @returns {Array[Real]}
 * @param {Real} x - The x component of the translation vector.
 * @param {Real} y - The y component of the translation vector.
 * @param {Real} z - The z component of the translation vector.
 * @param {Real} xrotation - The angle to rotate around the x-axis (in degrees ░).
 * @param {Real} yrotation - The angle to rotate around the y-axis (in degrees ░).
 * @param {Real} zrotation - The angle to rotate around the z-axis (in degrees ░).
 * @param {Real} xscale - The x scale amount.
 * @param {Real} yscale - The y scale amount.
 * @param {Real} zscale - The z scale amount.
 */
declare function matrix_build(x: Real,y: Real,z: Real,xrotation: Real,yrotation: Real,zrotation: Real,xscale: Real,yscale: Real,zscale: Real): Array[Real];

/**
 * This will build a 4x4 identity matrix with the following structure:
 * @returns {Array[Real]}
 */
declare function matrix_build_identity(): Array[Real];

/**
 * This function builds a "look-at" (view) matrix based on the specified parameters listed below. Since this function modifies the view matrix and not the projection matrix, you should first initialize the projection matrix using the other matrix function matrix_build_projection_perspective(), then use this function to move the view camera around within the projection.
 * @returns {Array[Real]}
 * @param {Real} xfrom - The x coordinate of the position to look from.
 * @param {Real} yfrom - The y coordinate of the position to look from.
 * @param {Real} zfrom - The z coordinate of the position to look from.
 * @param {Real} xto - The x coordinate of the position to look to.
 * @param {Real} yto - The y coordinate of the position to look to.
 * @param {Real} zto - The z coordinate of the position to look to.
 * @param {Real} xup - The x coordinate of the "up" vector.
 * @param {Real} yup - The y coordinate of the "up" vector.
 * @param {Real} zup - The z coordinate of the "up" vector.
 */
declare function matrix_build_lookat(xfrom: Real,yfrom: Real,zfrom: Real,xto: Real,yto: Real,zto: Real,xup: Real,yup: Real,zup: Real): Array[Real];

/**
 * This function builds an orthographic projection matrix based on the specified parameters listed below (this is the default projection method used when you create a room in GameMaker without changing anything). Sometimes you need to switch from a perspective projection to an orthographic projection which is what this function is for. It is typically used to draw an overlay, for example, to show the score or other aspects as this gives a "flat" view of the elements drawn (ie: no perspective) in a 3D game. See the image below to get an idea of the difference between orthographic and perspective views.
 * @returns {Array[Real]}
 * @param {Real} w - The width of the projection.
 * @param {Real} h - The height of the projection.
 * @param {Real} znear - The near clipping plane.
 * @param {Real} zfar - The far clipping plane.
 */
declare function matrix_build_projection_ortho(w: Real,h: Real,znear: Real,zfar: Real): Array[Real];

/**
 * This function builds a perspective projection matrix based on the dimensions of the near clipping plane, using the specified parameters listed below.
 * @returns {Array[Real]}
 * @param {Real} w - The width of the projection at the near Z position.
 * @param {Real} h - The height of the projection at the near Z position.
 * @param {Real} znear - The near clipping plane.
 * @param {Real} zfar - The far clipping plane.
 */
declare function matrix_build_projection_perspective(w: Real,h: Real,znear: Real,zfar: Real): Array[Real];

/**
 * This function builds a perspective projection matrix matrix based on field of view, using the specified parameters listed below.
 * @returns {Array[Real]}
 * @param {Real} fov - The angle of the field of view.
 * @param {Real} aspect - The aspect ratio of the field of view.
 * @param {Real} znear - The near clipping plane.
 * @param {Real} zfar - The far clipping plane.
 */
declare function matrix_build_projection_perspective_fov(fov: Real,aspect: Real,znear: Real,zfar: Real): Array[Real];

/**
 * This function returns an array of 16 values, corresponding to the given 4x4 matrix type, where row 1 is elements [0 - 3], row 2 is elements [4 -7], etc... (see the image on the main page). The available matrices are view, projection and world, for which you would use one of the following constants:
 * @returns {Array[Real]}
 * @param {Constant.MatrixType} type - The type of matrix to get the values of (see the constants listed above)
 */
declare function matrix_get(type: MatrixType): Array[Real];

/**
 * With this function you can multiply two matrix arrays together to create a new transform matrix. The function will return the new matrix index which should be stored in a variable for future use.
 * @returns {Array[Real]}
 * @param {Array[Real]} matrix1 - The first matrix index to use.
 * @param {Array[Real]} matrix2 - The second matrix index to use.
 * @param {Array[Real]} result_matrix - Optionally you can pass in the matrix in which you would like the result to be stored. This can provide better performance.
 */
declare function matrix_multiply(matrix1: Array[Real],matrix2: Array[Real],result_matrix: Array[Real]): Array[Real];

/**
 * With this function you can get the inverse of the specified matrix. The function will return the new matrix which should be stored in a variable for future use, or it will return undefined if the inverse can't be calculated.
 * @returns {Array[Real]}
 * @param {Array[Real]} matrix - The matrix to get the inverse of.
 */
declare function matrix_inverse(matrix: Array[Real]): Array[Real];

/**
 * This function takes an array of 16 values, corresponding to a given 4x4 matrix type, where elements [0 - 3] would be row 1, elements [4 -7] would be row 2, etc... (see the image on the main page). You can create such a matrix using the matrix_build() or matrix_get() functions or simply building the array yourself and passing that into the function. The available matrix types are view, projection and world, for which you would use one of the following constants:
 * @returns {Undefined}
 * @param {Constant.MatrixType} type - The type of matrix to get the values of (see the constants listed above)
 * @param {Array[Real]} matrix - The matrix data as an array
 */
declare function matrix_set(type: MatrixType,matrix: Array[Real]): Undefined;

/**
 * This function clears the matrix stack.
 * @returns {Undefined}
 */
declare function matrix_stack_clear(): Undefined;

/**
 * This function can be used to check whether the matrix stack is empty (returns true) or not (returns false).
 * @returns {Bool}
 */
declare function matrix_stack_is_empty(): Bool;

/**
 * This function pops the current top matrix off the stack.
 * @returns {Undefined}
 */
declare function matrix_stack_pop(): Undefined;

/**
 * This function pushes the specified matrix onto the matrix stack.
 * @returns {Undefined}
 * @param {Array} matrix - The matrix index to use.
 */
declare function matrix_stack_push(matrix: Array): Undefined;

/**
 * This function overwrites the current top of the matrix stack with the specified matrix.
 * @returns {Undefined}
 * @param {Array} matrix - The matrix index to use.
 */
declare function matrix_stack_set(matrix: Array): Undefined;

/**
 * This function returns the current top matrix of the stack, but does not remove it (for that use matrix_stack_pop()).
 * @returns {Array[Real]}
 */
declare function matrix_stack_top(): Array[Real];

/**
 * This function transforms a vector by a matrix. You supply the transform matrix ID (as returned by the function matrix build()), as well as the x, y and z values for the vector to transform. Optionally a 4th w parameter can be passed in. The function will return an array of 3 (or 4 if a w is given) elements where:
            * array[0] = x
            * array[1] = y
            * array[2] = z
            * array[3] = w (if x, y, z and w are provided).
            
 * @returns {Array[Real]}
 * @param {Array[Real]} matrix - The matrix to use
 * @param {Real} x - The x component of the transform vector
 * @param {Real} y - The y component of the transform vector
 * @param {Real} z - The z component of the transform vector
 * @param {Real} w - The w component of the transform vector
 */
declare function matrix_transform_vertex(matrix: Array[Real],x: Real,y: Real,z: Real,w: Real): Array[Real];

/**
 * This function returns the absolute value of the input argument, so if it's a positive value then it will remain the same, but if it's negative it will be multiplied by -1 to make it positive.
 * @returns {Real}
 * @param {Real} val - The number to turn absolute.
 */
declare function abs(val: Real): Real;

/**
 * This function takes any real number and rounds it up to the nearest integer. Care should be taken with this function as one common mistake is to use it round up a random value and expect it always to be greater than 1, ie:
 * @returns {Real}
 * @param {Real} x - The number to change.
 */
declare function ceil(x: Real): Real;

/**
 * Sometimes you want to specify something other than numbers for a random selection, or the numbers you want are not in any real order or within any set range. In these cases you would use choose() to generate a random result. For example, say you want to create an object with a random sprite at the start, then you could use this function to set the sprite index to one of a set of given sprites. Note that you can have as many as you require (note that more arguments will mean that the function will be slower to parse).
 * @returns {ArgumentIdentity}
 * @param {ArgumentIdentity} val1 - An input value that can be string, integer, variable or constant.
 * @param {ArgumentIdentity} ... - An input value that can be string, integer, variable or constant.
 */
declare function choose(val1: ArgumentIdentity,...: ArgumentIdentity): ArgumentIdentity;

/**
 * With this function you can maintain an input value between a specified range.
 * @returns {Real}
 * @param {Real} val - The value to clamp.
 * @param {Real} min - The minimum value to clamp between.
 * @param {Real} max - The maximum value to clamp between.
 */
declare function clamp(val: Real,min: Real,max: Real): Real;

/**
 * This is the function power(e,n), where e is approximately 2.718281828 (also known as Euler's Number), and n is the number of times it should be multiplied by itself. This basically says "how much growth do I get after n units of time (and 100% continuous growth)?". So exp(3) would return 20.08, which means that after 3 time units we have 20.08 times the amount we started with.
 * @returns {Real}
 * @param {Real} n - The power of e.
 */
declare function exp(n: Real): Real;

/**
 * Returns the floor of n, that is, n rounded down to an integer. This is similar to the round() function, but it only rounds down, no matter what the decimal value, so floor(5.99999) will return 5, as will floor(5.2), floor(5.6457) etc...
 * @returns {Real}
 * @param {Real} n - The number to floor.
 */
declare function floor(n: Real): Real;

/**
 * This function returns the fractional part of n, that is, the part behind the decimal dot. It will return only the decimals behind the dot of a value, so frac(3.125) will return 0.125, frac(6.921) will return 0.921, etc...
 * @returns {Real}
 * @param {Real} n - The number to change.
 */
declare function frac(n: Real): Real;

/**
 * This very useful function only returns integers (whole numbers). So, for example, to get a random number from 0 to 9 you can use irandom(9) and it will return a number from 0 to 9 inclusive. Note that floats can also be used but the upper value after the point will be excluded, so irandom(9.7) will return a value from 0 to 9 only. The function has an upper bound of $7fffffffffffffffLL, so care should be taken if using very large numbers.
 * @returns {Real}
 * @param {Real} n - The upper range from which the random number will be selected.
 */
declare function irandom(n: Real): Real;

/**
 * This function is similar to random_range() only with integer values as the input. You supply the low value for the range as well as the high value, and the function will return a random integer value within (and including) the given range. For example, irandom_range(10, 35) will return an integer between 10 and 35 inclusive.
 * @returns {Real}
 * @param {Real} n1 - The low end of the range from which the random number will be selected.
 * @param {Real} n2 - The high end of the range from which the random number will be selected.
 */
declare function irandom_range(n1: Real,n2: Real): Real;

/**
 * With this function you can find the value that equates to the position between two other values for a given percentage. So if you do, for example:
 * @returns {Real}
 * @param {Real} a - The first value.
 * @param {Real} b - The second value.
 * @param {Real} amt - The amount to interpolate.
 */
declare function lerp(a: Real,b: Real,amt: Real): Real;

/**
 * The natural logarithm ln(n) is the amount of time needed to reach a certain level of continuous growth, where n is the level reached. So if we want to find out how many time units we need to get 20 growth we would use ln(20) which returns 2.99 units of time to get that amount of growth.
 * @returns {Real}
 * @param {Real} n - The input value.
 */
declare function ln(n: Real): Real;

/**
 * This function is similar to the log2(n) function, only that log10(n) gets the number of 10's that we need to multiply together to get n. So log10(100) returns 2, as multiplying 10 by itself gives 100, log10(1000) returns 3 as 10x10x10=1000 etc... The number does not have to be divisible by ten, however, but this will still return an appropriate value, for example if we have log10(101) we get 2.00432137... which is how many times you could divide 101 by 10.
 * @returns {Real}
 * @param {Real} n - The input value.
 */
declare function log10(n: Real): Real;

/**
 * This function basically asks "how many 2's do you need to multiply to get n?". A common example of use in programming would be to calculate the number of bits that are needed to represent a number. To do this we calculate the log2(x) of the number, round it down and add 1 - for example log2(100) returns 6.643856, which rounded down is 6, to which we add one and it gives us 7. So we need 7 bits to represent 100. It can also be used for describing exponential growth or decay, and is often called a binary logarithm.
 * @returns {Real}
 * @param {Real} n - The input value.
 */
declare function log2(n: Real): Real;

/**
 * This function is similar to the log2(n) and log10(n) functions, only you stipulate the log base value. For example, logn(5,25) will return how many 5's we need to multiply to get 25 (which is 2).
 * @returns {Real}
 * @param {Real} n - The log base.
 * @param {Real} val - The input value.
 */
declare function logn(n: Real,val: Real): Real;

/**
 * This function will return the current epsilon value for the target platform. For more information on epsilon, please see the function math_set_epsilon().
 * @returns {Real}
 */
declare function math_get_epsilon(): Real;

/**
 * Epsilon is a value used to determine whether two numbers subject to rounding error are close enough to be considered "equal". It is useful when dealing with floating point maths as it can reduce the "rounding errors" that make certain operations return values that appear incorrect or contrary to what we expect. For example, we may have added a value to the image index of a sprite and expect the result to be a single integer, but due to the nature of floating point maths, the actual final value ends up being something like 5.0000002, so when we have the following check:
 * @returns {Real}
 * @param {Real} epsilon - The new epsilon value (from 0 to 0.999999999).
 */
declare function math_set_epsilon(epsilon: Real): Real;

/**
 * This function returns the maximum of the input values, of which it can have up to 16. For example max(12, 96, 32, 75) will return 96 as that is the highest of all the input values.
 * @returns {Real}
 * @param {Real} val0 - The first value to compare.
 * @param {Real} ... - The following values.
 */
declare function max(val0: Real,...: Real): Real;

/**
 * This function works by adding up all the input values and then dividing them by their own number. You can have as many arguments as you require (note that more arguments will mean that the function will be slower to parse). So, mean(2, 6, 9, 32) returns 12.25 as 2+6+9+32=49 and 49/4=12.25.
 * @returns {Real}
 * @param {Real} val0 - The first value to use in computation.
 * @param {Real} ... - The following values.
 */
declare function mean(val0: Real,...: Real): Real;

/**
 * This function returns the median of the input values, that is, the middle value. When the number of arguments is even, the smaller of the two middle values is returned and the function can have as many arguments as required (note that more arguments will mean that the function will be slower to parse) which must all be real values. This means that, for example, median(43, 12, 25, 19, 6) would return 19 as it is the middle value between all the rest.
 * @returns {Real}
 * @param {Real} val0 - The first value to use in computation.
 * @param {Real} ... - The following values.
 */
declare function median(val0: Real,...: Real): Real;

/**
 * This function returns the minimum of the input values, of which it can have as many as you require (note that more arguments will mean that the function will be slower to parse). For example min(12, 96, 32, 75) will return 12 as that is the lowest of all the input values.
 * @returns {Real}
 * @param {Real} val0 - The first value to compare.
 * @param {Real} ... - The following values.
 */
declare function min(val0: Real,...: Real): Real;

/**
 * This will return the value of a number multiplied by itself "n" number of times. For example, power(5,3) will multiply 5 by itself 3 times and return 125, which is the same as saying 5*5*5=125. Please note that the "x" value (the number to change) cannot be a negative value.
 * @returns {Real}
 * @param {Real} x - The number to change.
 * @param {Real} n - How many times to multiply x by itself.
 */
declare function power(x: Real,n: Real): Real;

/**
 * This function is good for probabilities where returning an integer (whole number) is not necessary. For example, random(100) will return a value from 0 to 99, but that value can be 22.56473! You can also use real numbers and not integers in this function like this - random(0.5), which will return a value between 0 and 0.4999999.
 * @returns {Real}
 * @param {Real} n - The upper range from which the random number will be selected.
 */
declare function random(n: Real): Real;

/**
 * This function sets the seed to a random value. Should you need to keep a consistent value over a number of runs of a game, you should be using random_set_seed(). Please note, that when using the random number functions in GameMaker the initial seed is always the same, as this makes tracing errors and debugging far easier. Should you wish to test with true random, you should call this function at the start of your game. The function will return the new randomised seed value (an unsigned 32bit integer).
 * @returns {Real}
 */
declare function randomise(): Real;

/**
 * To generate a random number GameMaker starts with a random seed number. With this function you can retrieve that seed, which can then be stored to reproduce a specific series of random events. For example, say you have a procedurally generated game, but want the player to be able to go back to previously discovered areas. Well, at the start of each area, you can store the random seed with this function and so every time you need to go back there, you can use random_set_seed() to set the seed to what it was previously and so force GameMaker to reproduce the same set of "random" functions that it used previously.
 * @returns {Real}
 */
declare function random_get_seed(): Real;

/**
 * This function returns a random number between the specified range, and this return value does not need to be an integer. For example, random_range(20,50) will return a random number from 20 to 50, but the value may be a real number like 38.65265. Real numbers can also be used as input arguments.
 * @returns {Real}
 * @param {Real} n1 - The low end of the range from which the random number will be selected.
 * @param {Real} n2 - The high end of the range from which the random number will be selected.
 */
declare function random_range(n1: Real,n2: Real): Real;

/**
 * To generate a random number GameMaker starts with a random seed number. With this function you can set that seed to a known value and so "force" the outcome of all random events afterwards to be the same every time the program is run. For example, this function can be used in conjunction with random_get_seed() to create procedurally generated content and save the results without having huge savegames (you save the seed only, no need for anything else). Should you need truly random results for everything, you should be using the randomise() function.
 * @returns {Undefined}
 * @param {Real} val - The seed to set.
 */
declare function random_set_seed(val: Real): Undefined;

/**
 * Just as it says, round() takes a real number and rounds it up or down to the nearest integer. In the special case where the number supplied is exactly a half-integer (1.5, 17.5, -2.5, etc), the number will be rounded to the nearest even value, for example, 2.5 would be rounded to 2, while 3.5 will be rounded to 4. This type of rounding is called bankers rounding and over large numbers of iterations or when using floating point maths, it gives a statistically better rounding than the more traditional "round up if over .5 and round down otherwise" approach.
 * @returns {Real}
 * @param {Real} n - The number to round.
 */
declare function round(n: Real): Real;

/**
 * This function returns whether a number is positive, negative or neither and returns 1, -1, 0 respectively. For example - sign(458) will return 1, sign(-5) will return -1 and sign(0) will return 0.
 * @returns {Real}
 * @param {Real} n - The number to get the sign of.
 */
declare function sign(n: Real): Real;

/**
 * Multiplies a number by itself and so returns the square of that number. EG: sqr(5) would return 25 since 5*5=25.
 * @returns {Real}
 * @param {Real} val - The number to square.
 */
declare function sqr(val: Real): Real;

/**
 * If you multiply a number with itself, you get the square of that number, but sometimes you want to do the reverse and get the square root of a number. So to find what number has been multiplied with itself to get any given positive value we use this function. For example: sqrt(9) will return 3 since 3*3=9.
 * @returns {Real}
 * @param {Real} val - The number to get the square root of.
 */
declare function sqrt(val: Real): Real;

/**
 * Collision_circle creates a circular zone of the radius given by the user around the points x1,y1 and then checks that zone for a collision with any instance of the object specified by the argument "obj". This check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for must also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:
 * @returns {Id.Instance}
 * @param {Real} x1 - The x coordinate of the center of the circle to check.
 * @param {Real} y1 - The y coordinate of the center of the circle to check.
 * @param {Real} rad - The radius (distance in pixels from its center to its edge).
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 */
declare function collision_circle(x1: Real,y1: Real,rad: Real,obj: Any,prec: Bool,notme: Bool): Instance;

/**
 * This function is the same as the collision_circle() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the center of the circular area to check along with the radius and the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the center of the circle to check.
 * @param {Real} y1 - The y coordinate of the center of the circle to check.
 * @param {Real} rad - The radius (distance in pixels from its center to its edge).
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function collision_circle_list(x1: Real,y1: Real,rad: Real,obj: Any,prec: Bool,notme: Bool,list: DsList,ordered: Bool): Real;

/**
 * Collision_ellipse uses the first four arguments (x1,y1,x2,y2) to define the width and height of an ellipse within the current room and then checks to see if any object that is defined by the "obj" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:
 * @returns {Id.Instance}
 * @param {Real} x1 - The x coordinate of the left side of the ellipse to check.
 * @param {Real} y1 - The y coordinate of the top side of the ellipse to check.
 * @param {Real} x2 - The x coordinate of the right side of the ellipse to check.
 * @param {Real} y2 - The y coordinate of the bottom side of the ellipse to check.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 */
declare function collision_ellipse(x1: Real,y1: Real,x2: Real,y2: Real,obj: Any,prec: Bool,notme: Bool): Instance;

/**
 * This function is the same as the collision_ellipse() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the top left and bottom right of the elliptical area to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the left side of the ellipse to check.
 * @param {Real} y1 - The y coordinate of the top side of the ellipse to check.
 * @param {Real} x2 - The x coordinate of the right side of the ellipse to check.
 * @param {Real} y2 - The y coordinate of the bottom side of the ellipse to check.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function collision_ellipse_list(x1: Real,y1: Real,x2: Real,y2: Real,obj: Any,prec: Bool,notme: Bool,list: DsList,ordered: Bool): Real;

/**
 * Collision_line checks along a line from point x1,y1 to point x2,y2 for a collision with any instance of the object specified by the argument "obj". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for must also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:
 * @returns {Id.Instance}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 */
declare function collision_line(x1: Real,y1: Real,x2: Real,y2: Real,obj: Any,prec: Bool,notme: Bool): Instance;

/**
 * This function is the same as the collision_line() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the start and end of the line to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function collision_line_list(x1: Real,y1: Real,x2: Real,y2: Real,obj: Any,prec: Bool,notme: Bool,list: DsList,ordered: Bool): Real;

/**
 * Collision_point checks the point specified by the arguments x,y for a collision with any instance of the object specified by the argument "obj". this check can be either precise or not, but for precise collisions to be enabled, the object or instance that you are checking for must also have precise collisions enabled for their sprite. If not, the default check is based on bounding boxes. The following image illustrates how this works:
 * @returns {Id.Instance}
 * @param {Real} x - The x coordinate of the point to check.
 * @param {Real} y - The y coordinate of the point to check.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 */
declare function collision_point(x: Real,y: Real,obj: Any,prec: Bool,notme: Bool): Instance;

/**
 * This function is the same as the collision_point() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y position of the point to check and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.
 * @returns {Real}
 * @param {Real} x - The x coordinate of the point to check.
 * @param {Real} y - The y coordinate of the point to check.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function collision_point_list(x: Real,y: Real,obj: Any,prec: Bool,notme: Bool,list: DsList,ordered: Bool): Real;

/**
 * Collision_rectangle uses the first four arguments (x1,y1,x2,y2) to define an area within the current room and then checks to see if any object that is defined by the "obj" argument is in collision with that area. This collision can be checked as precise or not, and you may also choose to check for the instance running the code itself or not. Consider this image:
 * @returns {Id.Instance}
 * @param {Real} x1 - The x coordinate of the left side of the rectangle to check.
 * @param {Real} y1 - The y coordinate of the top side of the rectangle to check.
 * @param {Real} x2 - The x coordinate of the right side of the rectangle to check.
 * @param {Real} y2 - The y coordinate of the bottom side of the rectangle to check.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 */
declare function collision_rectangle(x1: Real,y1: Real,x2: Real,y2: Real,obj: Any,prec: Bool,notme: Bool): Instance;

/**
 * This function is the same as the collision_rectangle() function, only instead of just detecting one instance in collision at a time, it will detect multiple instances. You supply the x/y positions of the top left and bottom right of the area to check along with the object to check for, and you can set the check to be precise (in which case all instances being checked will need to have precise collision masks) and whether the check should include the calling instance or not.
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the left side of the rectangle to check.
 * @param {Real} y1 - The y coordinate of the top side of the rectangle to check.
 * @param {Real} x2 - The x coordinate of the right side of the rectangle to check.
 * @param {Real} y2 - The y coordinate of the bottom side of the rectangle to check.
 * @param {Any} obj - The object to check for instance collisions.
 * @param {Bool} prec - Whether the check is based on precise collisions (true, which is slower) or its bounding box in general (false, faster).
 * @param {Bool} notme - Whether the calling instance, if relevant, should be excluded (true) or not (false).
 * @param {Id.DsList} list - The DS list to use to store the IDs of colliding instances.
 * @param {Bool} ordered - Whether the list should be ordered by distance (true) or not (false).
 */
declare function collision_rectangle_list(x1: Real,y1: Real,x2: Real,y2: Real,obj: Any,prec: Bool,notme: Bool,list: DsList,ordered: Bool): Real;

/**
 * You can use this function to check and see if the calling instance would collide with any other instance of an object or all instances in your game. For this to collision to resolve correctly, the instance running the code must have a valid collision mask (either for the sprite itself, or through the mask_index) and it will only register collisions with those instances that also have a valid mask.
 * @returns {Bool}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 * @param {Any} object_id - Optional! The object to check against.
 */
declare function place_empty(x: Real,y: Real,object_id: Any): Bool;

/**
 * You can use this function to check and see if the calling instance would collide with any instance flagged as solid in your game. Now, it should be noted that for this to work, the instance running the code must have a valid collision mask (either for the sprite itself, or through the mask_index) and it will only register collisions with those solid flagged instances that also have a valid mask.
 * @returns {Bool}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 */
declare function place_free(x: Real,y: Real): Bool;

/**
 * With this function you can check a position for a collision with another instance or all instances of an object using the collision mask of the instance that runs the code for the check. When you use this you are effectively asking GameMaker to move the instance to the new position, check for a collision, move back and tell you if a collision was found or not. This will work for precise collisions, but only if both the instance and the object being checked for have precise collision masks selected otherwise only bounding box collisions are applied. This function also accepts the special keywords all and other. Please note that should you need to get the unique instance id of the object being collided with, you should use instance_place().
 * @returns {Bool}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 * @param {Any} obj - The instance or object to check for.
 */
declare function place_meeting(x: Real,y: Real,obj: Any): Bool;

/**
 * When using this function, you define a circular area and GameMaker will work out whether the given point falls within its bounds or not. If the point falls within the defined circle the function will return true otherwise the function will return false.
 * @returns {Bool}
 * @param {Real} px - The x coordinate of the point to check.
 * @param {Real} py - The y coordinate of the point to check.
 * @param {Real} x1 - The x coordinate of the circle centre.
 * @param {Real} y1 - The y coordinate of the circle centre.
 * @param {Real} rad - The radius of the circle.
 */
declare function point_in_circle(px: Real,py: Real,x1: Real,y1: Real,rad: Real): Bool;

/**
 * When using this function, you define a rectangular area and GameMaker will work out whether the given point falls within its bounds or not. If the point falls within the defined rectangle the function will return true otherwise the function will return false.
 * @returns {Bool}
 * @param {Real} px - The x coordinate of the point to check.
 * @param {Real} py - The y coordinate of the point to check.
 * @param {Real} x1 - The x coordinate of the left side of the rectangle to check.
 * @param {Real} y1 - The y coordinate of the top side of the rectangle to check.
 * @param {Real} x2 - The x coordinate of the right side of the rectangle to check.
 * @param {Real} y2 - The y coordinate of the bottom side of the rectangle to check.
 */
declare function point_in_rectangle(px: Real,py: Real,x1: Real,y1: Real,x2: Real,y2: Real): Bool;

/**
 * When using this function, you define a triangular area and GameMaker will work out whether the given point falls within its bounds or not. If the point falls within the defined triangle the function will return true otherwise the function will return false.
 * @returns {Bool}
 * @param {Real} px - The x coordinate of the point to check.
 * @param {Real} py - The y coordinate of the point to check.
 * @param {Real} x1 - The x coordinate of the first corner of the triangle to check.
 * @param {Real} y1 - The y coordinate of the first corner of the triangle to check.
 * @param {Real} x2 - The x coordinate of the second corner of the triangle to check.
 * @param {Real} y2 - The y coordinate of the second corner of the triangle to check.
 * @param {Real} x3 - The x coordinate of the third corner of the triangle to check.
 * @param {Real} y3 - The y coordinate of the third corner of the triangle to check.
 */
declare function point_in_triangle(px: Real,py: Real,x1: Real,y1: Real,x2: Real,y2: Real,x3: Real,y3: Real): Bool;

/**
 * This function will check a position for a collision with any instances at the given point, and if there is one, it will change all instances in collision to be instances of the chosen object. You can set the "perf" argument to true which will force GameMaker to perform the Destroy and Clean Up events of the found instance as well as the Create event of the new instance, or false to not perform any of these events. Please note, that if you choose not to perform the Destroy, Clean Up and Create events, any instance created that uses a variable normally defined in the create event will crash the game as that variable will no longer exist.
 * @returns {Undefined}
 * @param {Id.Instance} x - The x coordinate of where to change colliding instances.
 * @param {Id.Instance} y - The y coordinate of where to change colliding instances.
 * @param {Asset.GMObject} obj - The new object the calling object will change into.
 * @param {Bool} perf - Whether to perform that new object's Create event (true) or not (false).
 */
declare function position_change(x: Instance,y: Instance,obj: GMObject,perf: Bool): Undefined;

/**
 * This function simply destroys all instances that are found to be in collision with the specified position. Collisions are based on the mask of the instances, and if any part of the mask over-laps with the target point it then the function will destroy that instance. Instances destroyed in this way will trigger their Destroy and Clean Up events.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of where to destroy colliding instances.
 * @param {Real} y - The y coordinate of where to destroy colliding instances.
 */
declare function position_destroy(x: Real,y: Real): Undefined;

/**
 * This function will check to see if a given position enters into collision with any instance with a valid collision mask at the given position.
 * @returns {Bool}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 */
declare function position_empty(x: Real,y: Real): Bool;

/**
 * With this function you can check a position for a collision with another instance or all instances of an object. When you use this you are checking a single point in the room for an instance or an object. This check will be done against the bounding box of the instance or against the mask of the instance if that instance has precise collisions checked. If you need to get the unique instance id if the object being collided with you should use instance_position(). This function also accepts the special keywords all and other.
 * @returns {Bool}
 * @param {Real} x - The x position to check.
 * @param {Real} y - The y position to check.
 * @param {Any} obj - The object (or instance id, or the keywords "all" or "other") to check for a collision with.
 */
declare function position_meeting(x: Real,y: Real,obj: Any): Bool;

/**
 * This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined circular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:
 * @returns {Real}
 * @param {Real} sx1 - The x coordinate of the left side of the source rectangle.
 * @param {Real} sy1 - The y coordinate of the top side of the source rectangle.
 * @param {Real} sx2 - The x coordinate of the right side of the source rectangle.
 * @param {Real} sy2 - The y coordinate of the bottom side of the source rectangle.
 * @param {Real} x - The x coordinate of the centre of the circle
 * @param {Real} y - The y coordinate of the centre of the circle.
 * @param {Real} rad - The radius around the center point in which to check for a collision.
 */
declare function rectangle_in_circle(sx1: Real,sy1: Real,sx2: Real,sy2: Real,x: Real,y: Real,rad: Real): Real;

/**
 * This function will check two rectangular areas that you define to see if the source rectangle is either not in collision, completely within the destination rectangles bounds, or if they are simply touching. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:
 * @returns {Real}
 * @param {Real} sx1 - The x coordinate of the left side of the source rectangle.
 * @param {Real} sy1 - The y coordinate of the top side of the source rectangle.
 * @param {Real} sx2 - The x coordinate of the right side of the source rectangle.
 * @param {Real} sy2 - The y coordinate of the bottom side of the source rectangle.
 * @param {Real} dx1 - The x coordinate of the left side of the destination rectangle to check against.
 * @param {Real} dy1 - The y coordinate of the top side of the destination rectangle to check against.
 * @param {Real} dx2 - The x coordinate of the right side of the destination rectangle to check against.
 * @param {Real} dy2 - The y coordinate of the bottom side of the destination rectangle to check against.
 */
declare function rectangle_in_rectangle(sx1: Real,sy1: Real,sx2: Real,sy2: Real,dx1: Real,dy1: Real,dx2: Real,dy2: Real): Real;

/**
 * This function will check a rectangular area that you define to see if it is either not in collision, completely within the destination bounds, or if it is simply touching, a defined triangular area. If they are not touching at all the function will return 0, if the source is completely within the destination it will return 1, and if they are simply overlapping then it will return 2. The image below illustrates this:
 * @returns {Real}
 * @param {Real} sx1 - The x coordinate of the left side of the source rectangle.
 * @param {Real} sy1 - The y coordinate of the top side of the source rectangle.
 * @param {Real} sx2 - The x coordinate of the right side of the source rectangle.
 * @param {Real} sy2 - The y coordinate of the bottom side of the source rectangle.
 * @param {Real} x1 - The x coordinate of the first side of the triangle to check.
 * @param {Real} y1 - The y coordinate of the first side of the triangle to check.
 * @param {Real} x2 - The x coordinate of the second side of the triangle to check.
 * @param {Real} y2 - The y coordinate of the second side of the triangle to check.
 * @param {Real} x3 - The x coordinate of the third side of the triangle to check.
 * @param {Real} y3 - The y coordinate of the third side of the triangle to check.
 */
declare function rectangle_in_triangle(sx1: Real,sy1: Real,sx2: Real,sy2: Real,x1: Real,y1: Real,x2: Real,y2: Real,x3: Real,y3: Real): Real;

/**
 * With this function we can mark individual cells within the given MP grid as being "forbidden" meaning that the path finding functions will not ever cross them. Now, normally you work in x/y room coordinates, and not in MP grid cell coordinates. So let's consider the following image which shows how the two can correlate:
 * @returns {Undefined}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Real} h - Horizontal position of the cell in the grid
 * @param {Real} v - Vertical position of the cell in the grid
 */
declare function mp_grid_add_cell(id: MpGrid,h: Real,v: Real): Undefined;

/**
 * This function uses the instance collision mask (decided by the sprite properties or the mask index of the calling instance) to mark cells as forbidden or not in an MP grid, where forbidden cells cannot be crossed by any of the pathfinding functions. You can specify in the function whether to consider precise collisions or not and the forbidden cells marked will change depending on this setting. This image illustrates this behaviour:
 * @returns {Undefined}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Any} obj - Object index, or instance id, of the instances to be added into the mp_grid
 * @param {Bool} prec - Whether the check is based on pixel-perfect collisions (true = slow) or its bounding box in general (false = fast).
 */
declare function mp_grid_add_instances(id: MpGrid,obj: Any,prec: Bool): Undefined;

/**
 * This function asks you to define a rectangle within the room, and then it marks all MP grid cells "touch" that rectangle as being forbidden, meaning that the path-finding functions cannot cross them. The image below illustrates how this works:
 * @returns {Undefined}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Real} x1 - The x coordinate of the left side of the rectangle to check.
 * @param {Real} y1 - The y coordinate of the top side of the rectangle to check.
 * @param {Real} x2 - The x coordinate of the right side of the rectangle to check.
 * @param {Real} y2 - The x coordinate of the bottom side of the rectangle to check.
 */
declare function mp_grid_add_rectangle(id: MpGrid,x1: Real,y1: Real,x2: Real,y2: Real): Undefined;

/**
 * With this function you can clear an MP grid of all "forbidden" cells.
 * @returns {Bool}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 */
declare function mp_grid_clear_all(id: MpGrid): Bool;

/**
 * This function can be used to clear a specific "cell" of an MP grid. Cells are not calculated as room coordinates, but rather as grid coordinates, where (0,0) is the top let corner of the grid. this means that to clear a cell at a specific position in the room, we must change the x and y coordinates into cell coordinate dividing them by the resolution of the MP grid. The code example below shows how this works.
 * @returns {Bool}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Real} h - Horizontal position of the cell to clear
 * @param {Real} v - vertical position of the cell to clear
 */
declare function mp_grid_clear_cell(id: MpGrid,h: Real,v: Real): Bool;

/**
 * With this function you can define an area in room coordinates which will then clear the corresponding cells in the specified MP grid. Even if a cell partially falls within the defined rectangular region it will be cleared.
 * @returns {Bool}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Real} x1 - The x coordinate of the left side of the rectangle to check.
 * @param {Real} y1 - The y coordinate of the top side of the rectangle to check.
 * @param {Real} x2 - The x coordinate of the right side of the rectangle to check.
 * @param {Real} y2 - The x coordinate of the bottom side of the rectangle to check.
 */
declare function mp_grid_clear_rectangle(id: MpGrid,x1: Real,y1: Real,x2: Real,y2: Real): Bool;

/**
 * With this function you can create an mp_grid for the motion planning functions. It returns an index that should be stored in a variable for use in all the other MP grid function calls. The x and y coordinates indicate the position of the top-left corner of the grid, hcells and vcells indicate the number of horizontal and vertical cells to be created within the grid, and cell width and cell height indicate the size of the cells in pixels. You can create and maintain multiple grid structures at the same moment if you need them for different things, but be aware that each grid will require memeory, and the more cells they have the more memory they will require. Also note that the MP functions are quite processor heavy to use so the more often you call them and the higher the cell resolution then the more likely you are to have a drop in performance.
 * @returns {Id.MpGrid}
 * @param {Real} left - Starting x coordinate of the mp_grid in the room
 * @param {Real} top - Starting y coordinate of the mp_grid in the room
 * @param {Real} hcells - Number of horizontal cells that the mp_grid will contain
 * @param {Real} vcells - Number of vertical cells that the mp_grid will contain
 * @param {Real} cellwidth - The width (in pixels) of each individual cell of the mp_grid
 * @param {Real} cellheight - The height (in pixels) of each individual cell of the mp_grid
 */
declare function mp_grid_create(left: Real,top: Real,hcells: Real,vcells: Real,cellwidth: Real,cellheight: Real): MpGrid;

/**
 * You can use this function to destroy the indicated mp_grid (as defined by the function mp_grid_create()) and free up the memory allocated it. It is essential that you call this whenever the MP grid is finished with or you could potentially get a memory leak, meaning that your game will slow down over time and eventually crash.
 * @returns {Undefined}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be destroyed
 */
declare function mp_grid_destroy(id: MpGrid): Undefined;

/**
 * This function will draw the specified MP grid (as defined by mp_grid_create()), marking free cells as green and forbidden cells as red. This function is essential as a debug tool but it should be noted that it is very slow and only works when used in the draw event of the instance, and that you can set the draw alpha to change the opacity of the grid, permitting you to draw it as an overlay and see what is actually in the room at the same time.
 * @returns {Bool}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be drawn
 */
declare function mp_grid_draw(id: MpGrid): Bool;

/**
 * With this function you can check any given cell of the mp_grid to see if it has been flagged as occupied or not, giving the index of the (previously created) mp_grid and the x an y coordinates of the cell to check. If it has been occupied or the position being checked is out of the grids bounds then the function will return -1 otherwise it will return 0.
 * @returns {Real}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Real} x1 - The x coordinate of the grid to check.
 * @param {Real} y1 - The y coordinate of the grid to check.
 */
declare function mp_grid_get_cell(id: MpGrid,x1: Real,y1: Real): Real;

/**
 * With this function you can create a path that will navigate from a start point to a finish point using an mp_grid that you have previously defined, avoiding any obstacles that have already been added into the grid. The xstart and ystart arguments indicate the start of the path in room coordinates, while xgoal, ygoal arguments indicate the destination. You can also select either horizontal/vertical movement only, or allow full diagonal movements by specifying true in the allowdiag argument. The function returns either true (it succeeded in finding a path) or false (it failed) as well as setting the chosen path. In the following image, you can see how this all works together:
 * @returns {Bool}
 * @param {Id.MpGrid} id - Index of the mp_grid that is to be used
 * @param {Asset.GMPath} path - index of the path that is to be used by the function
 * @param {Real} x start - Starting x coordinate of the new path
 * @param {Real} y start - Starting y coordinate of the new path
 * @param {Real} xgoal - Finishing x coordinate of the new path
 * @param {Real} ygoal - Finishing y coordinate of the new path
 * @param {Bool} allowdiag - Indicates whether diagonal moves are allowed instead of just horizontal or vertical
 */
declare function mp_grid_path(id: MpGrid,path: GMPath,x start: Real,y start: Real,xgoal: Real,ygoal: Real,allowdiag: Bool): Bool;

/**
 * With this function you can copy the given MP grid into a DS grid. The DS grid should be the same size as the MP grid, although it doesn't have to be (data will be lost if it is smaller, and if it is larger all extra grid cells will be 0). The DS grid cells will contain the value -1 if the MP grid cell was flagged as occupied, or it will be 0 if not.
 * @returns {Bool}
 * @param {Id.MpGrid} source - Index of the mp_grid that is to be used
 * @param {Id.DsGrid} destination - Index of the ds_grid that is to be used to copy the grid data to.
 */
declare function mp_grid_to_ds_grid(source: MpGrid,destination: DsGrid): Bool;

/**
 * This function computes a straight line path from the current instance position to the point specified by the "xgoal" and "ygoal" values. It uses the indicated step size, the same as in the function mp_linear_step(). The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). If false is returned then a path is still generated, but it will only run up to the position where the path was blocked.
 * @returns {Bool}
 * @param {Asset.GMPath} path - The index of the path to be used.
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Bool} checkall - Whether to check for collisions with all instances (true) or just solid ones (false).
 */
declare function mp_linear_path(path: GMPath,xgoal: Real,ygoal: Real,stepsize: Real,checkall: Bool): Bool;

/**
 * This function computes a straight line path from the current instance position to the point specified by the "xgoal" and "ygoal" values. It uses the indicated step size, the same as in the function mp_linear_step(). The indicated path must already exist and will be overwritten by the new path and the function will return if a complete path was found (true) or not (false). A full path is only found there was no collision with the specified object or instance and if false is returned then a path is still generated, but it will only run up to the position where the path was blocked.
 * @returns {Bool}
 * @param {Asset.GMPath} path - The index of the path to be used
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Any} obj - The object that is to block the path. Can be an object index, an instance id or the special keyword ,all
 */
declare function mp_linear_path_object(path: GMPath,xgoal: Real,ygoal: Real,stepsize: Real,obj: Any): Bool;

/**
 * With this function you tell an instance to take a "step" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like move_towards_point(). The stepsize is also the distance "ahead" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with any instance or only those that are flagged as solid. The function will return whether it has reached the goal position (true) or if it has failed (false).
 * @returns {Bool}
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Real} checkall - Whether to check all instances (true) or just solid ones (false).
 */
declare function mp_linear_step(xgoal: Real,ygoal: Real,stepsize: Real,checkall: Real): Bool;

/**
 * With this function you tell an instance to take a "step" towards a specific point, specified by the xgoal and ygoal values. The size of the step (which is how many pixels the instance should move each step) is indicated by the stepsize, and if the instance is already at the position it will stop and not move any further, contrary to other, simpler functions like move_towards_point(). The stepsize is also the distance "ahead" that the object will check each step for a collision, and you can choose whether the instance stops at a collision with an object or instance of your choice.
 * @returns {Bool}
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Any} obj - The object that is to block the path. Can be an object index, an instance id or the special keyword, all
 */
declare function mp_linear_step_object(xgoal: Real,ygoal: Real,stepsize: Real,obj: Any): Bool;

/**
 * This function computes a path for the instance from its current position and orientation to the position specified by the xgoal,ygoal arguments. It uses the indicated step size while trying to avoid collision with either all instances or only those flagged as solid. Like in the function mp_potential_step() it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function mp_potential_settings(). The indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).
 * @returns {Bool}
 * @param {Asset.GMPath} path - index of the path that is to be used by the function
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Real} factor - This number is used to prevent an infinite loop. It should be larger than 1. See the function description for more information.
 * @param {Bool} checkall - Whether to check all instances (true) or just solid ones (false).
 */
declare function mp_potential_path(path: GMPath,xgoal: Real,ygoal: Real,stepsize: Real,factor: Real,checkall: Bool): Bool;

/**
 * This function computes a path for the instance from its current position and orientation to the position specified by the xgoal, ygoal arguments. It uses the indicated step size while trying to avoid collision with instances of the object specified by the "obj" argument. Like in the function mp_potential_step() it uses potential field steps to accomplish this and the manner in which it does this can be modified through the function mp_potential_settings(). The indicated path must already exist and it will be overwritten by the new path. The function will return whether a path was found (true) or not (false).
 * @returns {Bool}
 * @param {Asset.GMPath} path - index of the path that is to be used by the function
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Real} factor - This number is used to prevent an infinite loop. It should be larger than 1. See the function description for more information.
 * @param {Any} obj - The object that is to block the path. Can be an object index, an instance id or the special keyword ,all
 */
declare function mp_potential_path_object(path: GMPath,xgoal: Real,ygoal: Real,stepsize: Real,factor: Real,obj: Any): Bool;

/**
 * The mp_potential_ functions do their work using a number of parameters that can be changed using this function. Globally the method works as follows: it first tries to move straight towards the goal, looking a number of steps ahead which can be set with the parameter "ahead" (default value is 3). Reducing this value means that the instance will start changing direction later as it doesn't "see" as far ahead, and increasing it means it will start changing direction earlier. If this check leads to a collision then it starts looking at directions more to the left and to the right of the ideal, straight-line direction. It does this in steps of size "rotstep" (default value is 10), and reducing this gives the instance more movement possibilities but will be slower as it needs more processing power.
 * @returns {Undefined}
 * @param {Real} maxrot - The number of degrees either side of the current direction that the instance can rotate in a step
 * @param {Real} rotstep - The number of degrees either side of the current direction that the instance can check for a collision
 * @param {Real} ahead - The number of steps ahead that the instance can check for a collision. Larger values are slower than lower ones.
 * @param {Bool} onspot - Use this to allow the instance to rotate on the spot when no path is found (true) or not (false)
 */
declare function mp_potential_settings(maxrot: Real,rotstep: Real,ahead: Real,onspot: Bool): Undefined;

/**
 * This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into a solid instance (or any instance when checkall is true) it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.
 * @returns {Bool}
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Bool} checkall - Whether to check all instances (true) or just solid ones (false).
 */
declare function mp_potential_step(xgoal: Real,ygoal: Real,stepsize: Real,checkall: Bool): Bool;

/**
 * This function lets the instance take a step towards a particular position defined by xgoal/ygoal, all the while trying to avoid obstacles. When the instance would run into an instance of the object specified by the "obj" argument it will change the direction of motion to try to avoid that instance and move around it. This approach is not guaranteed to work but in most easy cases it will effectively move the instance towards the goal. The function returns whether the goal was reached or not.
 * @returns {Bool}
 * @param {Real} xgoal - The target x position.
 * @param {Real} ygoal - The target y position.
 * @param {Real} stepsize - The speed the instance moves in pixels per step.
 * @param {Any} obj - The object that is to block the path of the instance running the function. Can be an object index, an instance id or the special keyword ,all.
 */
declare function mp_potential_step_object(xgoal: Real,ygoal: Real,stepsize: Real,obj: Any): Bool;

/**
 * This function will modify the current direction and speed of the instance running the code, combining the values given with the current values. If you wish to simply change these values, you should be using the function motion_set().
 * @returns {Undefined}
 * @param {Real} dir - The added direction.
 * @param {Real} speed - The added speed.
 */
declare function motion_add(dir: Real,speed: Real): Undefined;

/**
 * This function sets a new direction of movement and a new speed to the instance running the code. Note that this does not add to the instances current speed and direction (for that you would use motion_add()) but rather forces it to the new settings.
 * @returns {Undefined}
 * @param {Real} dir - The new direction.
 * @param {Real} speed - The new speed.`
 */
declare function motion_set(dir: Real,speed: Real): Undefined;

/**
 * With this function you can command an instance to bounce off all instances within the room, with the only exception being those that have no sprite or mask index assigned to them. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too, as illustrated by the code example below.
 * @returns {Undefined}
 * @param {Bool} adv - Whether to enable advanced bouncing (true) or not (false).
 */
declare function move_bounce_all(adv: Bool): Undefined;

/**
 * With this function you can command an instance to bounce off only those instances marked as solid within the room. You can also tell it to use precise collision checking when enabled, but be aware that this requires all instances to have precise masks enabled and will greatly slow down your game when many instances are involved due to the amount of processing that has to be done. This should normally go in the step event of an instance, but can be used selectively in a collision event too.
 * @returns {Undefined}
 * @param {Bool} adv - Whether to enable advanced bouncing (true) or not (false).
 */
declare function move_bounce_solid(adv: Bool): Undefined;

/**
 * This function will move the instance running the code a set number of pixels in the specified direction until it meets any other instance with a valid mask. You can use -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.
 * @returns {Undefined}
 * @param {Real} dir - The direction to move in.
 * @param {Real} maxdist - The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels).
 */
declare function move_contact_all(dir: Real,maxdist: Real): Undefined;

/**
 * This function will move the instance running the code a set number of pixels in the specified direction until it meets an instance with solid flagged as true. You can use -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.
 * @returns {Undefined}
 * @param {Real} dir - The direction to move in.
 * @param {Real} maxdist - The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels).
 */
declare function move_contact_solid(dir: Real,maxdist: Real): Undefined;

/**
 * With this function you can tell an instance to move out of a collision in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.
 * @returns {Undefined}
 * @param {Real} dir - The direction to move in.
 * @param {Real} maxdist - The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels).
 */
declare function move_outside_all(dir: Real,maxdist: Real): Undefined;

/**
 * With this function you can tell an instance to move in a direction, resolving collisions on the way and specify a direction in which the instance will attempt to move to get past obstacles, thus allowing traversal of slopes or small steps. Returns an array of instances that it has collided with.
 * @returns {Array}
 * @param {Real} dx - The x component of direction to move in.
 * @param {Real} dy - The y component of direction to move in.
 * @param {Any} obj - The object to check for collisions with.
 * @param {Any} num_iterations - The number of steps the motion will be broken down into to resolve collisions, defaults to 4
 * @param {Any} xoff - The x component of direction to move to attempt to avoid obstacles. If not specified the perpendicular to the direction of movement is used.
 * @param {Any} yoff - The y component of direction to move to attempt to avoid obstacles. If not specified the perpendicular to the direction of movement is used.
 * @param {Real} max_x_distance - The maximum distance in the x direction the instance will move. If less than or equal to 0 no clamping is performed.
 * @param {Real} max_y_distance - The maximum distance in the y direction the instance will move. If less than or equal to 0 no clamping is performed.
 */
declare function move_and_collide(dx: Real,dy: Real,obj: Any,num_iterations: Any,xoff: Any,yoff: Any,max_x_distance: Real,max_y_distance: Real): Array;

/**
 * With this function you can tell an instance to move out of a collision with any instance flagged as solid in any direction and any number of pixels each step, with a value of -1 or 0 for the maxdist being a default 1000px, ie: GameMaker will move the instance continually up 1000 pixels until it is out of collision.
 * @returns {Undefined}
 * @param {Real} dir - The direction to move in.
 * @param {Real} maxdist - The maximum distance the object can travel (-1 or 0 a default value of 1000 pixels).
 */
declare function move_outside_solid(dir: Real,maxdist: Real): Undefined;

/**
 * With this function you can set the instance to a position anywhere in the room, but aligned to an "invisible" grid. So a value of 32 for the hsnap and vsnap will set the instance to a random position that is aligned to a grid of 32x32 squares. you can set these values to 1 to get a position anywhere in the room.
 * @returns {Undefined}
 * @param {Real} hsnap - The horizontal snapping (the size in pixels between 'cells').
 * @param {Real} vsnap - The vertical snapping (the size in pixels between 'cells').
 */
declare function move_random(hsnap: Real,vsnap: Real): Undefined;

/**
 * This function is used to "snap" the instance to a grid of a given size. It will be snapped to the nearest corresponding position on the "invisible" grid that the hsnap and vsnap values define.
 * @returns {Undefined}
 * @param {Real} hsnap - The horizontal snapping (the size in pixels between 'cells').
 * @param {Real} vsnap - The vertical snapping (the size in pixels between 'cells').
 */
declare function move_snap(hsnap: Real,vsnap: Real): Undefined;

/**
 * This function simply tells the instance running the code to move towards a set point at a set speed. Bear in mind that it is up to you to tell it what to do once it gets there, as it won't just stop by itself. This means that you can get a "vibrating" instance as it moves (for example) 3 pixels forward, overshoots the x/y target position by 2, then moves 3 pixels back again, overshooting the target point by one and so on... There are a number of ways that this can be avoided, for example using distance_to_point() to see how far from the specified location the instance is before moving.
 * @returns {Undefined}
 * @param {Real} x - The x position of the point to move towards.
 * @param {Real} y - The y position of the point to move towards.
 * @param {Real} sp - The speed to move at in pixels per step.
 */
declare function move_towards_point(x: Real,y: Real,sp: Real): Undefined;

/**
 * This function will automatically "wrap" an instance that has left the room on either the horizontal or vertical (or both) axis. You can specify a margin outside the edges of the room for this to occur, and when the instance has travelled outside of that margin GameMaker will automatically wrap it back into the room at the other side. Note that the instance must have a speed for wrapping to work, because the direction of wrapping is based on the direction of the motion.
 * @returns {Undefined}
 * @param {Bool} hor - Whether to wrap horizontally (true) or not (false).
 * @param {Bool} vert - Whether to wrap vertically (true) or not (false).
 * @param {Real} margin - How far outside the room, in pixels, the object must be to initiate wrapping.
 */
declare function move_wrap(hor: Bool,vert: Bool,margin: Real): Undefined;

/**
 * With this function you can check and see if the origin of an instance (its x and y position) is aligned to a grid with the hsnap and vsnap values specified by you.
 * @returns {Bool}
 * @param {Real} hsnap - The horizontal snapping to check.
 * @param {Real} vsnap - The vertical snapping to check.
 */
declare function place_snapped(hsnap: Real,vsnap: Real): Bool;

/**
 * With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only GameMaker games connect to each other, however if you need to connect to a server that is not a GameMaker game, you can use network_connect_raw(). Note that by default the function is synchronous, meaning that your game may appear to "hang" as the connection is made. You can set a timeout value for connection, or alternatively make the creation asynchronous, using the function network_set_config(), or alternatively use the function network_connect_async() instead.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {String} url - The URL or IP to connect to (a string).
 * @param {Real} port - The port to connect to.
 */
declare function network_connect(socket: Socket,url: String,port: Real): Real;

/**
 * With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The connection uses a special protocol that ensures only GameMaker games connect to each other, however if you need to connect to a server that is not a GameMaker game, you can use network_connect_async_raw(). Note that this function is asynchronous, generating an Asynchronous Networking event of the type network_type_non_blocking_connect.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {String} url - The URL or IP to connect to (a string).
 * @param {Real} port - The port to connect to.
 */
declare function network_connect_async(socket: Socket,url: String,port: Real): Real;

/**
 * With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and network_connect() is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that by default the function is synchronous, meaning that your game may appear to "hang" as the connection is made. You can set a timeout value for connection, or alternatively make the creation asynchronous, using the function network_set_config(), or alternatively use the function network_connect_async_raw() instead.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {String} url - The URL or IP to connect to (a string).
 * @param {Real} port - The port to connect to.
 */
declare function network_connect_raw(socket: Socket,url: String,port: Real): Real;

/**
 * With this function you can send a request to connect to a server. The function takes the socket id to connect through (see network_create_socket()) and requires you to give the IP address to connect to (a string) as well as the port to connect through, and if the connection fails a value of less than 0 will be returned. The difference between this function and network_connect_async()is that this function can connect to any server and does nothing to the raw data, meaning that you have to implement the protocols yourself at the server end. Note that this function is asynchronous, generating an Asynchronous Networking event of the type network_type_non_blocking_connect.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {String} url - The URL or IP to connect to (a string).
 * @param {Real} port - The port to connect to.
 */
declare function network_connect_raw_async(socket: Socket,url: String,port: Real): Real;

/**
 * This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.
 * @returns {Real}
 * @param {Constant.SocketType} type - The type of server to create (see the constants listed below).
 * @param {Real} port - The port that the server will use.
 * @param {Real} max_client - The maximum number of clients that can connect at once.
 */
declare function network_create_server(type: SocketType,port: Real,max_client: Real): Real;

/**
 * This function is used to create a new network server for your game, using one of the permitted connection protocols (see the constants listed below). You supply the server type, then give it a port to use, and finally the number of maximum connections that should be permitted at any one time to the server (note that this number is up to you, but too many connected clients will saturate the network or the device CPU won't be able to handle the processing of that number of players, so use with care). The function returns a unique id which should be used stored in a variable and used to identify the server in all further network functions, or a value of less than 0 if the connection fails.
 * @returns {Real}
 * @param {Constant.SocketType} type - The type of server to create (see the constants listed below).
 * @param {Real} port - The port that the server will use.
 * @param {Real} max_client - The maximum number of clients that can connect at once.
 */
declare function network_create_server_raw(type: SocketType,port: Real,max_client: Real): Real;

/**
 * This function is used to create a new client socket for your game to communicate over the network. You must define the socket type (see the list of constants below) and the function will return a unique id for that socket, which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.
 * @returns {Id.Socket}
 * @param {Constant.SocketType} type - The type of socket connection to create (see the constants listed below).
 */
declare function network_create_socket(type: SocketType): Socket;

/**
 * This function is used to create a new client socket for your game to communicate over the network. You must define the socket protocol (see the list of constants below) and give a port to use, and the function will return a unique id which should be used in all further function calls for that socket, or a value of less than 0 if the connection fails.
 * @returns {Id.Socket}
 * @param {Constant.SocketType} protocol - The network protocol to use
 * @param {Real} port - The port to use
 */
declare function network_create_socket_ext(protocol: SocketType,port: Real): Socket;

/**
 * With this function you can remove a network socket connection from your game.
 * @returns {Undefined}
 * @param {Id.Socket} socket - The id of the socket to remove.
 */
declare function network_destroy(socket: Socket): Undefined;

/**
 * This function will return the IP address of the given URL.
 * @returns {String}
 * @param {String} url - The URL to get the IP of (a string).
 */
declare function network_resolve(url: String): String;

/**
 * With this function you can broadcast the data from a buffer locally to a range of IP addresses (for more information on buffers see Reference - Buffers). The range is limited to that of the device running the server, such that if the device has an IP of 92.168.11.130, then the data will be broadcast over the range 92.168.11.*. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {Real} port - The port that the server will use.
 * @param {Id.Buffer} buffer - The id of the buffer to get the data from.
 * @param {Real} size - The size (in bytes) of the data.
 */
declare function network_send_broadcast(socket: Socket,port: Real,buffer: Buffer,size: Real): Real;

/**
 * With this function you can send a data "packet" through the network. The function takes the socket id to connect through and then you must supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data packet. Packets sent with this function are formatted such that the GameMaker game receiving the data can "split" the packets correctly, and the function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {Id.Buffer} buffer - The id of the buffer to get the data from.
 * @param {Real} size - The size (in bytes) of the data.
 */
declare function network_send_packet(socket: Socket,buffer: Buffer,size: Real): Real;

/**
 * With this function you can send a "raw" data packet through the network. The function takes the socket id to connect through and then you must supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data packet. The data sent is not formatted by GameMaker in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {Id.Buffer} buffer - The id of the buffer to get the data from.
 * @param {Real} size - The size (in bytes) of the data.
 * @param {Real} options - Optional flags to affect how the data is sent.
 */
declare function network_send_raw(socket: Socket,buffer: Buffer,size: Real,options: Real): Real;

/**
 * With this function you can send data over the network using UDP to a server. The function takes the socket id to connect through, the URL to connect to and the port to use. You must then supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data. UDP is "connectionless" in that you don't actually do a connect, you just send a packet directly to an IP, and the server gets incoming data from an IP address and has to deal with it "as is". The function will return the number of bytes of data sent, or a number less than 0 if the send has failed. It is worth noting that the final size of the data being sent that is returned by this function will also include the GameMaker header information, which is an additional 12 bytes.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {String} url - The url or IP to connect to (a string).
 * @param {Real} port - The port to connect to.
 * @param {Id.Buffer} buffer - The id of the buffer to get the data from.
 * @param {Real} size - The size (in bytes) of the data.
 */
declare function network_send_udp(socket: Socket,url: String,port: Real,buffer: Buffer,size: Real): Real;

/**
 * With this function you can send data over the network using UDP to a server. The function takes the socket id to connect through, the URL to connect to and the port to use. You must then supply the buffer id which contains the data to be sent (for more information on buffers see Reference - Buffers) and finally the size (in bytes) of the data. UDP is "connectionless" in that you don't actually do a connect, you just send a packet directly to an IP, and the server gets incoming data from an IP address and has to deal with it "as is". The data sent is not formatted by GameMaker in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.
 * @returns {Real}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {String} url - The url or IP to connect to (a string).
 * @param {Real} port - The port to connect to.
 * @param {Id.Buffer} buffer - The id of the buffer to get the data from.
 * @param {Real} size - The size (in bytes) of the data.
 */
declare function network_send_udp_raw(socket: Socket,url: String,port: Real,buffer: Buffer,size: Real): Real;

/**
 * With this function you can set different network configurations.
 * @returns {String}
 * @param {Constant.NetworkConfig} config_value - The config constant to set (refer to the table at the top of this page).
 * @param {Any} setting - The setting of the config value.
 */
declare function network_set_config(config_value: NetworkConfig,setting: Any): String;

/**
 * With this function you can set the timeout for reading and writing data to/from a server through the given socket. Note that the timeout does not generate any type of event, so you will need to deal with timeouts yourself using alarms (for example). Note that this value only affects the sending and receiving of data, and should you wish to change the connection timeout value then you should be using the function network_set_config().
 * @returns {Undefined}
 * @param {Id.Socket} socket - The id of the socket to use.
 * @param {Real} read_timeout - The milliseconds in which a transfer from a server will timeout.
 * @param {Real} write_timeout - The milliseconds in which a transfer to a server will timeout.
 */
declare function network_set_timeout(socket: Socket,read_timeout: Real,write_timeout: Real): Undefined;

/**
 * This function returns the value (a string) of the environment variable with the given name (also a string). You can get the available environment variables on macOS and Ubuntu (Linux) by typing "env" into the terminal app, and for information on Windows environment variables, if you are using the command prompt then type "echo %PATH%", and using PowerShell it's "ls env". Note that on both macOS and Ubuntu (Linux) the "HOME" environment variable will return the "~/" path which maps to "/Users/<username>" on macOS and "/home/<username>" on Ubuntu (Linux).
 * @returns {String}
 * @param {String} name - The name (a string) of the environment variable to check.
 */
declare function environment_get_variable(name: String): String;

/**
 * If you have created an external function call to a dll or dylib using external_define(), you can use this function to then call it. You supply the name of the previously defined function as well as each of the arguments it requires (each argument must be of the correct type, either real or string) and the function returns the result of the external call.
 * @returns {Any}
 * @param {Id.ExternalCall} id - The name of the function that you want to call
 * @param {Any} ... - The different arguments that you want to pass through to the external function
 */
declare function external_call(id: ExternalCall,...: Any): Any;

/**
 * This function can be used to define an external function call to a specific dll (for Windows) or dylib (for Mac). This file can be either an included file or part of an extension. You supply the name (and path) of the file, then the name of the function that you wish to define. Next you need to define the calling convention to be used (see the constants list below) as well as the type of result to be expected (also a constant, as listed below). Finally you must give the number arguments that the function can take (from 0 to 15) and for each of the arguments you must specify its type too. Please note that for functions with 4 or more arguments, all of them must be of type ty_real.
 * @returns {Id.ExternalCall}
 * @param {String} dll - The name of the dll file (string)
 * @param {String} name - The name of the function (string)
 * @param {Constant.ExternalCallType} calltype - The calling convention used
 * @param {Constant.ExternalArgumentType} restype - The type of the result to expect
 * @param {Real} argnumb - The number of arguments (0 - 10)
 * @param {Constant.ExternalArgumentType} ... - The different types of arguments being used
 */
declare function external_define(dll: String,name: String,calltype: ExternalCallType,restype: ExternalArgumentType,argnumb: Real,...: ExternalArgumentType): ExternalCall;

/**
 * This function frees the memory associated with the dll or dylib with the given name. This should be done whenever the file in question is no longer needed in the game, normally (for example) in a Game End event.
 * @returns {Undefined}
 * @param {String} id - The name of the dll or dylib that you want to free
 */
declare function external_free(id: String): Undefined;

/**
 * The gml_pragma function affects how the given target compiles your code and should be called with the different commands to further optimise the final compilation of your project. These commands are effectively pre-processed before the game is compiled and so the function can be placed anywhere in your project and it will still be processed before the game is fully compiled. The available commands are as follows:
 * @returns {Undefined}
 * @param {String} command - A string with one of the commands listed below.
 * @param {Any} optional - Some of the available commands require an optional argument or arguments. These are explained below for each command.
 */
declare function gml_pragma(command: String,optional: Any): Undefined;

/**
 * When your game is compiled, it also includes certain internal functions to error check while running. These internal checks cover many aspects of a games code, including ranges, parameters and some general aspects of the internal GML compiler and are what spawn the final error messages in many cases. However this function can be used to switch these internal checks off (ie: remove them completely from the compiled game), giving a speed boost to your final project.
 * @returns {Undefined}
 * @param {Bool} flag - Either true to set release mode or false for general development.
 */
declare function gml_release_mode(flag: Bool): Undefined;

/**
 * With this function you can check to see if a specific permission has been granted to the game by the user. You supply the permission to check as a string using the format "android.permission.<permission>". See Android documentation for the permissions that can be requested. Returns one of os_permission_granted, os_permission_denied, os_permission_denied_dont_request
 * @returns {Real}
 * @param {String} permission - The permission to request (a string)
 */
declare function os_check_permission(permission: String): Real;

/**
 * This function returns the name (as a string) of the currently selected configuration for your game. For more information on configurations please see the section Configurations.
 * @returns {String}
 */
declare function os_get_config(): String;

/**
 * This function returns a DS Map with detailed information about the OS that the game is running on. The exact information returned will depend on the OS and the device, so it is recommended that you test this function on all platforms that you wish to target and output the returned values using a function like show_debug_message(). Note that the DS map is not automatically cleared from memory and you should use the ds_map_destroy() function when you no longer need it.
 * @returns {Id.DsMap}
 */
declare function os_get_info(): DsMap;

/**
 * This function returns a string with the two letter Language Code for the OS that is running the game, as set by the ISO639 standard. If the information is not available, it will hold simply an empty string "", or "en" for "English" language. Note that some languages also have a relevant Regional Code too, so to distinguish between different regions of the same country use the function os_get_region().
 * @returns {String}
 */
declare function os_get_language(): String;

/**
 * This function returns a string with the two or three letter Regional Code for the OS that is running the game, as set by the ISO3166-1 standard. If the information is not available, it will hold simply an empty string "".
 * @returns {String}
 */
declare function os_get_region(): String;

/**
 * With this function you can check and see if your device currently has an internet connection and it will return true if it does, or false if it does not, and depending on the OS, it may attempt to make a connection before returning a value.
 * @returns {Bool}
 * @param {Constant.NetworkConnectType} attempt_connection - OPTIONAL! For Nintendo Switch Target only. Set to true to attempt an OS level connection when called.
 */
declare function os_is_network_connected(attempt_connection: NetworkConnectType): Bool;

/**
 * When developing for mobile devices, you need to have a way to check that the device is still focused on your game or not, especially as if your game is on an iOS, Android or Windows Phone device then it can be interrupted by phone calls and other apps. You can use this function to check if the device is paused or not.
 * @returns {Bool}
 */
declare function os_is_paused(): Bool;

/**
 * With this function you can "lock" your device to the current orientation until such time as you "free" it to allow all Game Options enabled orientations again for that target platform. Note that you likely want to confirm the orientation is as desired before locking.
 * @returns {Undefined}
 * @param {Bool} flag - Set to true or false to enable or disable orientation locking.
 */
declare function os_lock_orientation(flag: Bool): Undefined;

/**
 * With this function you can "lock" your device to the current orientation until such time as you "free" it to allow all Game Options enabled orientations again for that target platform. Note that you likely want to confirm the orientation is as desired before locking.
 * @returns {Undefined}
 * @param {Bool} landscape_enable - true if landscape orientation is allowed, false otherwise
 * @param {Bool} portrait_enable - true if portait orientation is allowed, false otherwise
 */
declare function os_set_orientation_lock(landscape_enable: Bool,portrait_enable: Bool): Undefined;

/**
 * With this function you can turn on or off the power saving features of the device. This is important as certain games (for example those that use the tilt functions) may not generate events that the OS can interpret as being user input and so shut down the screen or exit the game. By setting this function to false you can disable the power saving features and ensure that the screen (and game) are always functioning.
 * @returns {Undefined}
 * @param {Bool} flag - Set to true or false to enable or disable powersave functions.
 */
declare function os_powersave_enable(flag: Bool): Undefined;

/**
 * Command-line parameters are those extra commands that you can add to an exe to change how the program is run. You can find the number of parameters for the current game using this function, where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.
 * @returns {Real}
 */
declare function parameter_count(): Real;

/**
 * Command-line parameters are those extra commands that you can add to an exe to change how the program is run and with this function you can get the chosen command-line parameter as a string. You can find the number of parameters for the current game using the function parameter_count(), where the first parameter has index 1 and the last one has the index returned by the function (a value of 0 is special on that it is the filename of the game executable, including the path). It should be noted that this function will work for on the HTML5 platform, retrieving the url parameters.
 * @returns {String}
 * @param {Real} n - None
 */
declare function parameter_string(n: Real): String;

/**
 * This function is used to retrieve the resolution of the Windows thread scheduler in milliseconds. If the scheduler's resolution is set to the default value (as set by Windows), the function will return -1.
 * @returns {Real}
 */
declare function scheduler_resolution_get(): Real;

/**
 * This function is used to change the resolution of the Windows thread scheduler. The resolution value supplied in the argument needs to be in milliseconds.
 * @returns {Undefined}
 * @param {Real} milliseconds - The new resolution value (in milliseconds) or -1 for default
 */
declare function scheduler_resolution_set(milliseconds: Real): Undefined;

/**
 * This function is used to toggle physics debug messages and errors.
 * @returns {Undefined}
 * @param {Bool} enable - Enable or Disable errors and messages
 */
declare function physics_debug(enable: Bool): Undefined;

/**
 * This function checks the physics fixtures of the objects given against the ray specified, it will return an array of structures that will give the hitPointX, hitPointY (the room coordinates of the intersection), normalX, normalY (the normal of the intersection), fraction (the normalised distance down the ray of the intersection) 
 * @returns {Array}
 * @param {Real} xStart - x position of the start of the ray.
 * @param {Real} yStart - y position of the start of the ray.
 * @param {Real} xEnd - x position of the start of the ray.
 * @param {Real} yEnd - y position of the start of the ray.
 * @param {Asset.GMObject|Id.Instance|Array[Id.Instance]|Array[Asset.GMObject]} ids - instance or object id (or an array of instance or object ids) to check the ray against, these should have physics fixtures
 * @param {Bool} all_hits - set to true if you want all hits returned, false if you want the closest hit only - defaults to false
 * @param {Real} max_fraction - proportion of the ray to check, defaults to 1.0, can be set to be smaller or larger
 */
declare function physics_raycast(xStart: Real,yStart: Real,xEnd: Real,yEnd: Real,ids: GMObject|Instance|Array[Instance]|Array[GMObject],all_hits: Bool,max_fraction: Real): Array;

/**
 * This function can be used to set custom mass and inertia values for a physics enabled instance. Normally the mass, center of mass, and inertia for an instance is calculated using a combination the surface area of the bound fixtures and their density. However in very special occasions you may need to offset the center of mass or change the inertia and that is when you would use this function. Bear in mind that the mass is calculated in real world weight (ie:kilograms) and you should always try and keep values realistic for what you are modelling. So if your physics object is meant to represent a person, their mass would be approximately 70 kilos.
 * @returns {Undefined}
 * @param {Real} mass - The new mass that you want the fixture to have.
 * @param {Real} local_center_x - The local x coordinate of the new center of mass.
 * @param {Real} local_center_y - The local y coordinate of the new center of mass.
 * @param {Real} inertia - Set the inertia for the fixture.
 */
declare function physics_mass_properties(mass: Real,local_center_x: Real,local_center_y: Real,inertia: Real): Undefined;

/**
 * This function can be used to check and see if a physical body (ie: the fixture of an instance) overlaps, or will overlap, when rotated and placed at a given position in the room. the "angle" argument is the angle of rotation that the calling instance has (or will have) at the position to be checked, and the "obj" argument can be either a single instance id, and object index or the keywords all or other.
 * @returns {Bool}
 * @param {Real} xpos - The x position in the room to check
 * @param {Real} ypos - The y position in the room to check
 * @param {Real} angle - The angle to check (of the calling instance)
 * @param {Asset.GMObject} obj - The object to check for
 */
declare function physics_test_overlap(xpos: Real,ypos: Real,angle: Real,obj: GMObject): Bool;

/**
 * This function defines the points of a polygon which has previously been set to the fixture using either physics_fixture_set_polygon_shape() or it can be used to add points to a chain of edge fixtures using the function physics_fixture_set_chain_shape(). For a polygon shape, the points are relative to the origin of the fixture, with the 0,0 position of the x/y axis being the centre, and the subsequent coordinates being calculated as usual in GameMaker with down/right being +x,+y and up/left being -x,-y. Here is an illustration to help you visualise this process:
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} xpos - the x position of the point (relative to the fixture origin for polygon shapes)
 * @param {Real} ypos - the y position of the point (relative to the fixture origin for polygon shapes)
 */
declare function physics_fixture_add_point(fixture: PhysicsIndex,xpos: Real,ypos: Real): Undefined;

/**
 * Once we have defined our fixture it has to be bound to an instance. This means that its properties are transferred to the selected instance, not the actual fixture itself, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords other and all. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.
 * @returns {Real}
 * @param {Id.PhysicsIndex} fixture - the fixture that is to be bound
 * @param {Any} target - the target instance that is to receive the fixture (can be an instance id, an object id, other, or all)
 */
declare function physics_fixture_bind(fixture: PhysicsIndex,target: Any): Real;

/**
 * Once we have defined our fixture it has to be bound to an instance. This means that its properties are transferred to the selected instance, not the actual fixture itself, so that one fixture can be bound to multiple instances if all are to have the same properties. You can specify an object index for the target and all instances present in the room at the time will receive that fixtures properties (but not any new instances of the object created later), or you can use the special keywords other and all. You can even specify a parent object and all children instances with that parent will also receive the fixture. Once the fixture has been bound to all the instances that you need, it can be deleted if no longer necessary and the instances with that fixtures properties will not be affected and maintain those properties.
 * @returns {Real}
 * @param {Id.PhysicsIndex} fixture - the fixture that is to be bound
 * @param {Any} target - the target instance that is to receive the fixture (can be an instance id, an object id, other, or all)
 * @param {Real} xoffset - the offset along the x-axis
 * @param {Real} yoffset - the offset along the y-axis
 */
declare function physics_fixture_bind_ext(fixture: PhysicsIndex,target: Any,xoffset: Real,yoffset: Real): Real;

/**
 * The first step in setting up a fixture is creating it with this function. The returning index should be stored in a variable to be used in all further functions that are used to define and use this fixture.
 * @returns {Id.PhysicsIndex}
 */
declare function physics_fixture_create(): PhysicsIndex;

/**
 * Since once a fixture has been bound to an instance that instance maintains the fixtures properties, we can remove the fixture from memory with this function, particularly if we no longer plan to use it again. Please note that failure to remove fixtures after they are no longer needed may cause a memory leak which will slow down and eventually crash your game, so you should take care to clean up properly after defining and binding fixtures.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the fixture that is to be deleted from memory
 */
declare function physics_fixture_delete(fixture: PhysicsIndex): Undefined;

/**
 * If you think about any rotating object in the "real world", unless it has a motor or is in space, it slows down over time due to the influence of external forces (like friction with the air around it). We can use the function physics_fixture_set_angular_damping() in GameMaker to simulate this effect and reduce the velocity of rotation of instances in the physics world, as, without it, any rotating instance would continue to rotate infinitely. Damping parameters should be between 0 and infinity, with 0 meaning no damping, and infinity meaning full damping. Normally you will use a damping value between 0 and 1, but you can use any non-negative value if required.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} damping - the angular damping of the fixture, usually between 0 and 1
 */
declare function physics_fixture_set_angular_damping(fixture: PhysicsIndex,damping: Real): Undefined;

/**
 * When you start a room with physics, or bind fixtures to instances, the fixtures are always considered to be "awake"... that is to say, they are processing events and interacting with the surrounding instances. However this can sometimes lead to problems, especially if you have a number of instances with fixtures that are side by side when a room starts (think of a tower made of various instances with fixtures) as with them being "awake" they will move and possibly change position due to the sudden start of gravity and collisions affecting them. In these cases you can use this function to flag the fixture as been "asleep", in which case it will not be processing anything when it is first created in the room.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the id of the bound fixture
 * @param {Bool} flag - whether a fixture is awake (true) or not (false)
 */
declare function physics_fixture_set_awake(fixture: PhysicsIndex,flag: Bool): Undefined;

/**
 * This function defines a box shape for your fixture. It takes the half width and height as the physics world uses this value far more than whole width/height values to determine things like collisions.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} halfwidth - the half width of the box
 * @param {Real} halfheight - the half height of the box
 */
declare function physics_fixture_set_box_shape(fixture: PhysicsIndex,halfwidth: Real,halfheight: Real): Undefined;

/**
 * This function defines a "chain" fixture shape. A chain fixture is comprised of a number of points, which are then connected together using edge shapes to join them. The function itself takes the index (ID) of the fixture and can tell the fixture to loop or not. Setting this to true will connect the last point to the first point with an edge, while setting it to false will not. Note that this function on prepares the fixture to accept the points required to make the chain, and these should be added after calling this function using physics_fixture_add_point(), much as you would when building a polygon fixture.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - The index of the fixture
 * @param {Bool} loop - Whether to close the chain (true) or not (false).
 */
declare function physics_fixture_set_chain_shape(fixture: PhysicsIndex,loop: Bool): Undefined;

/**
 * This function defines a circle shape for your fixture with a radius defined by the argument "rad".
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} rad - radius of the circle
 */
declare function physics_fixture_set_circle_shape(fixture: PhysicsIndex,rad: Real): Undefined;

/**
 * Once you have created your fixture you can define it as being part of a collision group. This means that you can tell instances with that fixture to always collide or never collide with other instance that have fixtures bound to them with the same collision group. The values that can be assigned are based on positive or negative numbers, with 0 being the default value (meaning that the instance with this fixture setting is ignored unless a collision event is created for it). Here is an image to help explain:
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the fixture that is to be bound
 * @param {Real} group - the group that this fixture is assigned to (either a positive value, 0, or a negative value)
 */
declare function physics_fixture_set_collision_group(fixture: PhysicsIndex,group: Real): Undefined;

/**
 * The density of something is defined as its mass per unit volume, which basically means how much mass is crammed into the space it takes up in the world. So, a balloon would have a low density as it has little mass that occupies a large space, while a lead bar would have a high density as it has a great mass, yet occupies little space.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} density - the density of the fixture calculated as kg/m▓
 */
declare function physics_fixture_set_density(fixture: PhysicsIndex,density: Real): Undefined;

/**
 * This function defines an "edge" fixture shape. An edge shape is simply a line that will generate a collision when other fixtures over lap it, and can be very useful for generating (for example) terrain, or for creating borders around a room. The position of the edge is defined using local space, ie: the x/y position of the instance is considered (0,0), so this should be taken into consideration when creating them (in the code example below, the instance would have been placed at (0,0) in the room to avoid complications).
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} local_x1 - start x position for the edge
 * @param {Real} local_y1 - start y position for the edge
 * @param {Real} local_x2 - end x position for the edge
 * @param {Real} local_y2 - end y position for the edge
 */
declare function physics_fixture_set_edge_shape(fixture: PhysicsIndex,local_x1: Real,local_y1: Real,local_x2: Real,local_y2: Real): Undefined;

/**
 * Friction is the force that resists the relative motion of material elements sliding against each other, which in the GameMaker physics world, translates as the loss of momentum caused by the collision of two instances with fixtures bound to them. So, when two instances collide, their motion is affected by this value, with a high friction causing a larger loss of momentum than a lower value. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative value if required.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} friction - the friction of the fixture
 */
declare function physics_fixture_set_friction(fixture: PhysicsIndex,friction: Real): Undefined;

/**
 * There will be certain instances in a physics based game which you want to move around but do not wish to be acted on by forces such as gravity, nor forces incurred by collisions with dynamic objects (think of moving platforms in a platform game, for example). For such objects simply setting the density of a fixture to 0 will mean that the physics will assume that the object is intended to be static. However, should you set the phy_speed_x, phy_speed_y or phy_angular_velocity variables for an instance that has had such a fixture bound to it, it will be converted into a kinematic object and begin movement. Change the instance from static to kinematic mid-simulation can be expensive in terms of processing (depending on the state of the instances in the physics world) and therefore it is recommended to set the fixture to be kinematic using this function prior to binding it to an instance, so that it will be unaffected by collisions and forces (such as gravity) but may move with constant linear and/or angular velocity.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 */
declare function physics_fixture_set_kinematic(fixture: PhysicsIndex): Undefined;

/**
 * Damping is used to reduce the physics world velocity of instances, and differs from friction in that friction only occurs when two instances with fixtures are in contact. Damping is also much cheaper to simulate than friction, but please note that damping is not a replacement for friction; the two effects can, and should, be used together. Here is an image to illustrate damping:
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Real} damping - the damping of the fixture, usually between 0 and 1
 */
declare function physics_fixture_set_linear_damping(fixture: PhysicsIndex,damping: Real): Undefined;

/**
 * This function sets a polygon shape for your fixture, but you will need to use physics_fixture_add_point() to actually define the shape of this polygon relative to the origin of the fixture. The polygon is closed when the fixture is bound to an instance. You should note too that this function must be called before defining any points, and you must also have at least three points defined for your polygon before binding it to an instance or you will get an error.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 */
declare function physics_fixture_set_polygon_shape(fixture: PhysicsIndex): Undefined;

/**
 * In physics, restitution is defined as "the return of an object or system to its original state after elastic deformation", but as the fixtures in the GameMaker are really rigid bodies and cannot be deformed, restitution is really a way of saying how "bouncy" the fixture is. This setting will affect how much an object "bounces" when it collides with other objects and is co-dependent on other forces that act on the instance like gravity and friction, and is usually a value between 0 and 1 (higher values can be used but may give unpredictable results). Here is an illustration of how it works:
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - The index of the fixture
 * @param {Real} restitution - The restitution of the fixture (usually between 0 and 1)
 */
declare function physics_fixture_set_restitution(fixture: PhysicsIndex,restitution: Real): Undefined;

/**
 * Some times you will want your game to detect and recognise when two instances with fixtures collide, but not have any physical reaction to the collision. This can be done by converting the fixture into a sensor, which basically means that they will generate a collision event but with no physical response so that you can use these instances as "triggers" for other events to happen in the game room. Any fixture can be flagged as a sensor, and it makes no difference if the instance it is bound to is static or in movement.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the index of the fixture
 * @param {Bool} state - whether a fixture is a sensor (true) or not (false)
 */
declare function physics_fixture_set_sensor(fixture: PhysicsIndex,state: Bool): Undefined;

/**
 * When you bind a fixture to an instance using physics_fixture_bind() this returns an "id" for the bound fixture. You can use this id to get the density value of the bound fixture (not the "base" fixture) at any time using this function.
 * @returns {Real}
 * @param {Id.PhysicsIndex} fixture - the id of the bound fixture
 */
declare function physics_get_density(fixture: PhysicsIndex): Real;

/**
 * When you bind a fixture to an instance using physics_fixture_bind() this returns an "id" for the bound fixture. You can use this id to get the restitution (the "bounciness" property) value of the bound fixture, not the "base" fixture, at any time using this function.
 * @returns {Real}
 * @param {Id.PhysicsIndex} fixture - the id of the bound fixture
 */
declare function physics_get_restitution(fixture: PhysicsIndex): Real;

/**
 * This function removes (or "un-binds") a fixture from an instance or instances. It requires the unique "id" of the bound fixture (as returned by the function physics_fixture_bind() and it will remove all the currently defined physics properties for the instance, permitting you to redefine a new fixture and bind that to the instance. In this way you can change the instances physical properties without having to destroy and re-create it.
 * @returns {Undefined}
 * @param {Id.Instance} id - The ID of the instance to remove the fixture from
 * @param {Id.PhysicsIndex} fixture - The ID of the fixture that is to be removed from the instance
 */
declare function physics_remove_fixture(id: Instance,fixture: PhysicsIndex): Undefined;

/**
 * When you bind a fixture to an instance using physics_fixture_bind() this returns an "id" for the bound fixture. You can use this id to set the density value of the bound fixture, not the "base" fixture, at any time using this function.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the id of the bound fixture
 * @param {Real} density - the new density value to apply
 */
declare function physics_set_density(fixture: PhysicsIndex,density: Real): Undefined;

/**
 * When you bind a fixture to an instance using physics_fixture_bind() this returns an "id" for the bound fixture. You can use this id to set the friction value of the bound fixture, not the "base" fixture, at any time using this function. Note that the friction is usually set to a value between 0 and 1, but you can use any non-negative value if required.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the id of the bound fixture
 * @param {Real} friction - the new friction value to apply
 */
declare function physics_set_friction(fixture: PhysicsIndex,friction: Real): Undefined;

/**
 * When you bind a fixture to an instance using physics_fixture_bind() this returns an "id" for the bound fixture. You can use this id to set the restitution value of the bound fixture, not the "base" fixture, at any time using this function. Restitution is usually set as a value between 0 and 1, but you can use higher values if required, although the results may be unpredictable.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} fixture - the id of the bound fixture
 * @param {Real} restitution - the new restitution value to apply
 */
declare function physics_set_restitution(fixture: PhysicsIndex,restitution: Real): Undefined;

/**
 * This function will give an angular impulse to a physics enabled instance. This impulse will set the angular rotation by the amount given, ignoring the current torque, essentially setting the amount of "spin" that a fixture has. If you wish to apply an angular force to an instance using torque, then you should be using the function physics_apply_torque().
 * @returns {Undefined}
 * @param {Real} impulse - The impulse (in Newton metres) to be applied
 */
declare function physics_apply_angular_impulse(impulse: Real): Undefined;

/**
 * When working with physics you need to apply not only gravity to objects, but forces as well. A force is any influence that causes an object to undergo a change in speed, a change in direction, or a change in shape, and is defined in the GameMaker physics world the same as we define gravity, by getting the vector from the two xforce/yforce components. It should be noted that forces are not applied to the center of mass of the object, but rather at a point in the room and they will change the direction and speed as well as the torque (spin) dependant on any other forces that are working on the object (like gravity). Here is an example image to help illustrate:
 * @returns {Undefined}
 * @param {Real} xpos - The x coordinate in the room where the force will be applied
 * @param {Real} ypos - The y coordinate in the room where the force will be applied
 * @param {Real} xforce - the x component of the force vector
 * @param {Real} yforce - the y component of the force vector
 */
declare function physics_apply_force(xpos: Real,ypos: Real,xforce: Real,yforce: Real): Undefined;

/**
 * Not only can you apply force and gravity to an object with the physics in GameMaker but you can also apply an impulse. This is slightly different to a force in that when it is applied it will immediately affect the speed, and, potentially the torque (or "spin") of the object, particularly if the point chosen to apply the impulse is not aligned with the center of mass (note: the center of mass is not necessarily the same as the origin!). Here is an illustration:
 * @returns {Undefined}
 * @param {Real} xpos - The x coordinate in the room where the impulse will be applied
 * @param {Real} ypos - The y coordinate in the room where the impulse will be applied
 * @param {Real} ximpulse - the x component of the impulse vector
 * @param {Real} yimpulse - the y component of the impulse vector
 */
declare function physics_apply_impulse(xpos: Real,ypos: Real,ximpulse: Real,yimpulse: Real): Undefined;

/**
 * Another way to use force in the physics world is to apply it locally to an instance. What this means is that the strength and direction of the force are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. It should be noted that with this function, forces are not applied to the center of mass of the object, but rather at a point relative to the instance and they will not be instantly applied as they are dependent on any other forces that are working on the object (like gravity). This illustration demonstrates how a local force works:
 * @returns {Undefined}
 * @param {Real} xlocal - The x coordinate relative to the origin where the force will be applied
 * @param {Real} ylocal - The y coordinate relative to the origin where the force will be applied
 * @param {Real} xforce - the x component of the force vector
 * @param {Real} yforce - the y component of the force vector
 */
declare function physics_apply_local_force(xlocal: Real,ylocal: Real,xforce: Real,yforce: Real): Undefined;

/**
 * Not only can you apply force and gravity to an object with the physics in GameMaker but you can also apply an impulse. This is slightly different to a force in that when it is applied it will immediately affect the speed, and, potentially the torque (or "spin") of the object, particularly if the point chosen to apply the impulse has a vector that is not aligned with the centre of mass (note: the center of mass is not necessarily the same as the origin!). This function applies an impulse locally to an instance. What this means is that the strength and direction of the impulse are calculated based on the origin (or the position if it has no sprite) of the instance, without taking into consideration the direction or rotation it may have in the game room or physics world. Here is an illustration:
 * @returns {Undefined}
 * @param {Real} xpos - The x coordinate relative to the origin where the impulse will be applied
 * @param {Real} ypos - The y coordinate relative to the origin where the impulse will be applied
 * @param {Real} ximpulse - the x component of the impulse vector (relative to the xpos coordinate)
 * @param {Real} yimpulse - the y component of the impulse vector (relative to the ypos coordinate)
 */
declare function physics_apply_local_impulse(xpos: Real,ypos: Real,ximpulse: Real,yimpulse: Real): Undefined;

/**
 * When we talk about torque, we are generally talking about the tendency of a force or impulse to rotate an instance about its centre of mass, but in GameMaker you can also apply torque independently to an instance, causing it to rotate in a given direction. How much torque you apply to get the desired rotation all depends on the size and density of the fixture you assign to your instance, as both these properties go towards defining its mass, which defines its inertia, which affects torque! The general rule of thumb is that if an instance has a lot of inertia, you will need a lot of torque to get it to start rotating. It should also be noted that other factors like gravity and collisions can also affect the torque of an instance. Here is an image to help explain:
 * @returns {Undefined}
 * @param {Real} torque - The torque (in Newton metres) to be applied
 */
declare function physics_apply_torque(torque: Real): Undefined;

/**
 * Once two instances with physics representations have been bound by a joint, this can be deleted again at any time. Normally this will happen automatically when one of the two instances is destroyed, or when the room ends, but there are times when you may wish to do this manually. In those cases you would use this function.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} joint - The index of the joint that you wish to delete
 */
declare function physics_joint_delete(joint: PhysicsIndex): Undefined;

/**
 * One of the simplest joint is a distance joint which says that the distance between two points on two instances must be constant. When you specify a distance joint the two instances should already be created and have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance between these points imply the length of the distance constrain. The image below shows how this works:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} w_anchor1_x - The first x coordinate for the joint, within the game world
 * @param {Real} w_anchor1_y - The first y coordinate for the joint, within the game world
 * @param {Real} w_anchor2_x - The second x coordinate for the joint, within the game world
 * @param {Real} w_anchor2_y - the second y coordinate for the joint, within the game world
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_distance_create(inst1: Instance,inst2: Instance,w_anchor1_x: Real,w_anchor1_y: Real,w_anchor2_x: Real,w_anchor2_y: Real,col: Bool): PhysicsIndex;

/**
 * When you have a joint with a motor (prismatic or revolute), you may want to be able to switch the motor on or off depending on variables and conditions within the game. For this, you need to have stored the index of the joint previously in a variable and then you can switch the motor on or off by using this function and setting the "motor" argument to true or false.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} joint - The joint that you wish to enable or disable the motor on
 * @param {Bool} motor - Whether you wish to turn the motor on (true) or off (false)
 */
declare function physics_joint_enable_motor(joint: PhysicsIndex,motor: Bool): Undefined;

/**
 * The friction joint is a bit different to all other joints in the physics simulation in that the connection created will not constrain the instances position or movement, but rather its speed and rotation. This works by taking the maximum input values for force and torque and applying those to the second fixture to bring the speed and angular momentum down to the same values as that of the first instance. So, if you have a stationary instance and a moving instance then connect them with a friction joint, the moving instance will gradually slow down until it too is stationary. If both instances were moving then the second instance will have its movement speed modified to match that of the first instance.
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} anchor_x - The x coordinate for the joint, within the game world
 * @param {Real} anchor_y - The y coordinate for the joint, within the game world
 * @param {Real} max_force - The maximum frictional force that will be applied
 * @param {Real} max_torque - The maximum rotational force that will be applied
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_friction_create(inst1: Instance,inst2: Instance,anchor_x: Real,anchor_y: Real,max_force: Real,max_torque: Real,col: Bool): PhysicsIndex;

/**
 * If you want to create a sophisticated mechanical contraption you might want to use gears. In principle you can create gears in GameMaker by using compounding instances to model gear teeth, but this is not very efficient and might be tedious to author! Thankfully there is a simpler method, and that is to use a gear joint. To make one you need to have previously defined your fixtures and created the two basic joints that are going to comprise your gear - these must be made up of one revolute joint and either a prismatic joint or another revolute joint. The image below shows how a gear would typically be created in a game:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Id.PhysicsIndex} joint_1 - A previously defined revolute joint
 * @param {Id.PhysicsIndex} joint_2 - A previously defined revolute or prismatic joint
 * @param {Real} ratio - Set the velocity ratio between the two joints
 */
declare function physics_joint_gear_create(inst1: Instance,inst2: Instance,joint_1: PhysicsIndex,joint_2: PhysicsIndex,ratio: Real): PhysicsIndex;

/**
 * By using a series of predefined constants, you can ask GameMaker to tell you a number of things about the state of any given joint. This is very useful as it gives you the ability to delete joints or change an instances behaviour depending on whatever your needs are at the time. There are a number of constants that can be used in this function and they can be found here: Physics Joint Constants, but be aware that complex calculations are done when you call these, so they should be used with care and only when necessary and note that many are unique to a specific type of joint.
 * @returns {Real}
 * @param {Id.PhysicsIndex} joint - The index of the joint that you wish to test
 * @param {Constant.PhysicsJointProperty} value - The constant for the joint property that you wish to test
 */
declare function physics_joint_get_value(joint: PhysicsIndex,value: PhysicsJointProperty): Real;

/**
 * Like a revolute joint, the prismatic joint only has one degree of freedom, but with this joint it is directional relative to an axis rather than rotational and actually prevents any form of rotation. Here is an image to help you visualise how this works:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} w_anchor_x - The x coordinate where the joint is anchored, within the game world
 * @param {Real} w_anchor_y - The y coordinate where the joint is anchored, within the game world
 * @param {Real} w_axis_x - The x component of the axis vector
 * @param {Real} w_axis_y - The y component of the axis vector
 * @param {Real} lower_trans_limit - The lower permitted limit for the joint movement
 * @param {Real} upper_trans_limit - The lower permitted limit for the joint movement
 * @param {Bool} limit - Whether to limit the movement of the joint (true) or not (false)
 * @param {Real} max_motor_force - Sets the maximum movement speed for the motor
 * @param {Real} motor_speed - This is the speed at which the motor should move
 * @param {Bool} motor - Whether the motor should be active (true) or not (false)
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_prismatic_create(inst1: Instance,inst2: Instance,w_anchor_x: Real,w_anchor_y: Real,w_axis_x: Real,w_axis_y: Real,lower_trans_limit: Real,upper_trans_limit: Real,limit: Bool,max_motor_force: Real,motor_speed: Real,motor: Bool,col: Bool): PhysicsIndex;

/**
 * The pulley joint is used to connect two instances within the physics world in such a way that moving one will directly influence the movement of the other. These joints are first anchored in the world space at two points, each one connected to an instance at its center of mass. This can be changed by setting the local anchor x/y coordinates relative to the origin of the instance, meaning that the actual connection from the instance to the physics world anchor point can be offset somewhere other than its origin. The following image illustrates this:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} w_anchor1_x - The x coordinate where the first part of joint is anchored, within the game world
 * @param {Real} w_anchor1_y - The y coordinate where the first part of the joint is anchored, within the game world
 * @param {Real} w_anchor2_x - The x coordinate where the second part of the joint is anchored, within the game world
 * @param {Real} w_anchor2_y - The y coordinate where the second part of the joint is anchored, within the game world
 * @param {Id.Instance} l_anchor1_x - The local x coordinate where joint 1 is anchored to the first instance
 * @param {Id.Instance} l_anchor1_y - The local y coordinate where joint 1 is anchored to the first instance
 * @param {Id.Instance} l_anchor2_x - The local x coordinate where joint 2 is anchored to the second instance
 * @param {Id.Instance} l_anchor2_y - The local y coordinate where joint 2 is anchored to the second instance
 * @param {Id.Instance} ratio - Set the velocity ratio between two instances
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_pulley_create(inst1: Instance,inst2: Instance,w_anchor1_x: Real,w_anchor1_y: Real,w_anchor2_x: Real,w_anchor2_y: Real,l_anchor1_x: Instance,l_anchor1_y: Instance,l_anchor2_x: Instance,l_anchor2_y: Instance,ratio: Instance,col: Bool): PhysicsIndex;

/**
 * A revolute joint forces two bodies to share a common anchor point (often called a hinge point) and the joint has a single degree of freedom - the relative rotation of the two bodies around this point. To specify a revolute you need to provide two instances and a single anchor point in the room, as you can see in the image provided:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} w_anchor_x - The x coordinate for the joint, within the game world
 * @param {Real} w_anchor_y - The y coordinate for the joint, within the game world
 * @param {Real} ang_min_limit - The lower permitted limit for the joint angle
 * @param {Real} ang_max_limit - The upper permitted limit for the joint angle
 * @param {Bool} ang_limit - Whether the to limit the angle of the joint (true) or not (false)
 * @param {Real} max_motor_torque - Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)
 * @param {Real} motor_speed - This is the speed at which the motor should rotate
 * @param {Bool} motor - Whether the motor should be active (true) or not (false)
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_revolute_create(inst1: Instance,inst2: Instance,w_anchor_x: Real,w_anchor_y: Real,ang_min_limit: Real,ang_max_limit: Real,ang_limit: Bool,max_motor_torque: Real,motor_speed: Real,motor: Bool,col: Bool): PhysicsIndex;

/**
 * A rope joint is one which is used to join two instances that you want to keep a constant distance apart, no matter what other forces are acting on it. With a distance joint, you can get "joint stretching" where the two fixtures will separate and behave strangely should too much stress be put on the joint, however the rope joint does not do this and will not stretch any further than the maximum defined length. When you create a rope joint the two instances should already be created and have a fixture assigned, then you define the two anchor points in room coordinates. The first anchor point is connected to instance 1, the second anchor point is connected to instance 2 and the distance and the maxlength argument sets the maximum length constraint on the joint. The image below shows how this works:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} w_anchor1_x - The first x coordinate for the joint, within the game world
 * @param {Real} w_anchor1_y - The first y coordinate for the joint, within the game world
 * @param {Real} w_anchor2_x - The second x coordinate for the joint, within the game world
 * @param {Real} w_anchor2_y - the second y coordinate for the joint, within the game world
 * @param {Real} maxlength - The maximum length that the joint can "stretch"
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_rope_create(inst1: Instance,inst2: Instance,w_anchor1_x: Real,w_anchor1_y: Real,w_anchor2_x: Real,w_anchor2_y: Real,maxlength: Real,col: Bool): PhysicsIndex;

/**
 * Certain joint properties can be changed and set even after the creation of the joint. There are a number of constants that can be used in this function and they can be found here: Physics Joint Constants.
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} joint - The index of the joint that you wish to change
 * @param {Constant.PhysicsJointProperty} field - The constant for the joint property that you wish to change
 * @param {Any} value - The new value for the joint property
 */
declare function physics_joint_set_value(joint: PhysicsIndex,field: PhysicsJointProperty,value: Any): Undefined;

/**
 * The weld joint is designed to attach two fixtures together in a strong, yet flexible bond. The weld joint will permit flexing between the two joined fixtures but without the stretching associated with, for example, a distance joint, and will always try to "spring" back to the reference angle when put under any stress or load. You define the point in the room where the joint should be created, as well as the angle that you wish the joint to try and maintain at all times, as shown in the image below:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} anchor_x - The x coordinate for the joint, within the game world
 * @param {Real} anchor_y - The y coordinate for the joint, within the game world
 * @param {Real} ref_angle - The joint angle to maintain
 * @param {Real} freq_hz - This is the oscillation frequency for the joint, in hertz
 * @param {Real} damping_ratio - This damping ratio for the joint
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_weld_create(inst1: Instance,inst2: Instance,anchor_x: Real,anchor_y: Real,ref_angle: Real,freq_hz: Real,damping_ratio: Real,col: Bool): PhysicsIndex;

/**
 * A wheel joint simply combines a piston and a revolute joint, like a wheel mounted on the shock absorber of a car. You specify the anchor point for the joint well as the two physics enabled instances to joint, and the first instance will act as the "body" for the joint, while the second will be the "wheel", and be permitted to move freely around the joint axis. You can also set an axis vector, which is the imaginary line along which the joint will act as a "spring" permitting the wheel to bounce up and down along it as it encounters obstacles (much like the piston joint). The following image illustrates this:
 * @returns {Id.PhysicsIndex}
 * @param {Id.Instance} inst1 - The first instance to connect with the joint
 * @param {Id.Instance} inst2 - The second instance to connect with the joint
 * @param {Real} anchor_x - The x coordinate where the joint is anchored, within the game world
 * @param {Real} anchor_y - The y coordinate where the joint is anchored, within the game world
 * @param {Real} axis_x - The x component of the wheel axis vector
 * @param {Real} axis_y - The y component of the wheel axis vector
 * @param {Bool} enablemotor - Whether the motor should be active (true) or not (false)
 * @param {Real} max_motor_torque - Sets the maximum motor torque used to achieve the desired motor speed (in Newtons per meter)
 * @param {Real} motor_speed - This is the speed at which the motor should rotate
 * @param {Real} freq_hz - This is the oscillation frequency for the joint, in hertz
 * @param {Real} damping_ratio - This damping ratio for the joint
 * @param {Bool} col - Whether the two instances can collide (true) or not (false)
 */
declare function physics_joint_wheel_create(inst1: Instance,inst2: Instance,anchor_x: Real,anchor_y: Real,axis_x: Real,axis_y: Real,enablemotor: Bool,max_motor_torque: Real,motor_speed: Real,freq_hz: Real,damping_ratio: Real,col: Bool): PhysicsIndex;

/**
 * This function will return the number of particles that are active in a physics enabled room.
 * @returns {Real}
 */
declare function physics_particle_count(): Real;

/**
 * With this function you can create a single particle anywhere within your game room, setting certain flags and properties. The "flags" are the return value of a combination of the following constants:
 * @returns {Id.PhysicsIndex}
 * @param {Constant.PhysicsParticleFlag} flags - The flags to set on the particle.
 * @param {Real} x - The x position to create the particle at.
 * @param {Real} y - The y position to create the particle at.
 * @param {Real} xv - The initial horizontal velocity.
 * @param {Real} yv - The initial vertical velocity.
 * @param {Constant.Color} col - The base colour to use for the particle.
 * @param {Real} alpha - The base alpha to use for the particle.
 * @param {Real} category - The user defined category to which the particle belongs.
 */
declare function physics_particle_create(flags: PhysicsParticleFlag,x: Real,y: Real,xv: Real,yv: Real,col: Color,alpha: Real,category: Real): PhysicsIndex;

/**
 * With this function you can delete (remove) a particle from the physics simulation in the current room. The function takes the unique ID of the particle to delete, as returned by the function physics_particle_create().
 * @returns {Undefined}
 * @param {Id.PhysicsIndex} ind - The index (ID) of the particle to delete.
 */
declare function physics_particle_delete(ind: PhysicsIndex): Undefined;

/**
 * With this function you can delete (remove) all the particles that fall within the bounds of the defined rectangular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well as the half width and height of the rectangle (in pixels) which defines the area.
 * @returns {Undefined}
 * @param {Real} x - The x position of the center of the area to delete.
 * @param {Real} y - The y position of the center of the area to delete.
 * @param {Real} halfwidth - The half width of the rectangle.
 * @param {Real} halfheight - The half height of the rectangle.
 */
declare function physics_particle_delete_region_box(x: Real,y: Real,halfwidth: Real,halfheight: Real): Undefined;

/**
 * With this function you can delete (remove) all the particles that fall within the bounds of the defined circular area from the physics simulation in the current room. The function takes the x and y position for the center of the area to delete as well as the radius (in pixels) which defines the circular area.
 * @returns {Undefined}
 * @param {Real} x - The x position of the center of the area to delete.
 * @param {Real} y - The y position of the center of the area to delete.
 * @param {Real} radius - The radius (in pixels) of the circular area to delete.
 */
declare function physics_particle_delete_region_circle(x: Real,y: Real,radius: Real): Undefined;

/**
 * With this function you can delete (remove) all the particles that fall within the bounds of the defined polygonal area from the physics simulation in the current room. The function takes a (previously created) ds_list() containing the x/y position of each point of the polygon, with the even numbered positions in the list being the x coordinates, and odd numbered positions the y coordinates, ie: for a triangle, your list would have six entries, with entry 0, 2, and 4 being the x coordinates and 1, 3, and 5 being the y coordinates. The polygon will then be used to delete all the particles that fall within the defined area.
 * @returns {Undefined}
 * @param {Id.DsList} pointlist - A ds_list of points to use to create the polygon.
 */
declare function physics_particle_delete_region_poly(pointlist: DsList): Undefined;

/**
 * This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the flags when creating the particle (see the function physics_particle_create() for an example), ie: using the bitwise or "|" to mask off the appropriate bits for each flag.
 * @returns {Undefined}
 * @param {Real} typemask - The mask to compare the particles flags with.
 * @param {Real} category - The user defined category to draw (use 0 to draw all categories).
 * @param {Asset.GMSprite} sprite - The sprite to use for each particle.
 * @param {Real} subimg - The image_index of the sprite to draw.
 */
declare function physics_particle_draw(typemask: Real,category: Real,sprite: GMSprite,subimg: Real): Undefined;

/**
 * This function will draw a sprite at the position of all the particles that share the same user defined category value, and that have flags which coincide with those set for the mask. The mask value is defined in the same way as you would define the flags when creating the particles (see the functions physics_particle_create() for an example), ie: using the bitwise or "|" to mask off the appropriate bits for each flag.
 * @returns {Undefined}
 * @param {Real} typemask - The mask to compare the particles flags with.
 * @param {Real} category - The user defined category to draw (use 0 to draw all categories).
 * @param {Asset.GMSprite} sprite - The sprite to use for each particle.
 * @param {Real} subimg - The image_index of the sprite to draw.
 * @param {Real} xscale - The scale factor to apply to the sprite along the x axis.
 * @param {Real} yscale - The scale factor to apply to the sprite along the y axis.
 * @param {Real} ang - The angle (in degrees) to draw the sprite at.
 * @param {Constant.Color} col - The colour to blend with the sprite (default is c_white).
 * @param {Real} alpha - The alpha value to use when drawing (0 - 1).
 */
declare function physics_particle_draw_ext(typemask: Real,category: Real,sprite: GMSprite,subimg: Real,xscale: Real,yscale: Real,ang: Real,col: Color,alpha: Real): Undefined;

/**
 * With this function you can find out what the current linear damping is for particles in the physics simulation (you can set this value using physics_particle_set_damping()).
 * @returns {Real}
 */
declare function physics_particle_get_damping(): Real;

/**
 * This function returns various pieces of information about each particle in the physics simulation using the given flags checked. The buffer used must have been created previously using the function buffer_create(), and should be of the "grow" type, with the size being approximately that of the expected return data. The flags are set using any of the constants given below, and you would use the bitwise or "|" to create a single flag value to get the desired information.
 * @returns {Id.Buffer}
 * @param {Id.Buffer} buffer - The (previously created) buffer to use to store the data.
 * @param {Real} flags - The flags to use to extract data about specific particle types.
 */
declare function physics_particle_get_data(buffer: Buffer,flags: Real): Buffer;

/**
 * This function returns various pieces of information about a single particle in the physics simulation using the given flags checked. The particle index (its ID) is that which was returned by the function physics_particle_create(), and the buffer used must have been created previously using the function buffer_create(). It should be of the "grow" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or "|" to create a single flag value to get the desired information.
 * @returns {Id.Buffer}
 * @param {Real} ind - The index (ID) of the particle to get the data from.
 * @param {Id.Buffer} buffer - The (previously created) buffer to use to store the data.
 * @param {Real} flags - The flags to use to extract data about specific particle types.
 */
declare function physics_particle_get_data_particle(ind: Real,buffer: Buffer,flags: Real): Buffer;

/**
 * With this function you can find out what the current density is for particles in the physics simulation (you can set this value using physics_particle_set_density()).
 * @returns {Real}
 */
declare function physics_particle_get_density(): Real;

/**
 * With this function you can find out what the current gravity scale factor is for particles in the physics simulation (you can set this value using physics_particle_set_gravity_scale()).
 * @returns {Real}
 */
declare function physics_particle_get_gravity_scale(): Real;

/**
 * With this function you can retrieve the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Real} group - The particle group to get.
 */
declare function physics_particle_get_group_flags(group: Real): Real;

/**
 * With this function you can find out what the current cap value is on particles permitted in the physics simulation (you can set this value using physics_particle_set_max_count()).
 * @returns {Real}
 */
declare function physics_particle_get_max_count(): Real;

/**
 * With this function you can find out what the current radius (in pixels) is for particles in the physics simulation (you can set this value using physics_particle_set_radius()).
 * @returns {Real}
 */
declare function physics_particle_get_radius(): Real;

/**
 * This function sets a point in the room to define the shape of a polygon which will be used to create a group of soft body particles. You must have previously signaled to GameMaker that you are going define a polygon shape using the function physics_particle_group_polygon() and then use this function to define the individual points of the polygon. You must give at least three points when defining the polygon shape, but can give up to eight, and the function will permit the definition of concave polygons. However, if you generate a polygon with any cavities, the points within will be ignored and a convex shape will be created for the particle group.
 * @returns {Undefined}
 * @param {Real} x - The x position in the room for the point.
 * @param {Real} y - The y position in the room for the point.
 */
declare function physics_particle_group_add_point(x: Real,y: Real): Undefined;

/**
 * below).
 * @returns {Undefined}
 * @param {Constant.PhysicsParticleFlag} flags - The flags to set on the particle.
 * @param {Constant.PhysicsParticleGroupFlag} groupflags - The group flags to set on the particle (see Description below).
 * @param {Real} x - The x position to create the particle group at.
 * @param {Real} y - The y position to create the particle group at.
 * @param {Real} ang - The angle (in degrees) to rotate the group to on create.
 * @param {Real} xv - The initial horizontal velocity.
 * @param {Real} yv - The initial vertical velocity.
 * @param {Real} ang_velocity - The initial angular velocity.
 * @param {Constant.Color} col - The base colour to use for the particle group.
 * @param {Real} alpha - The base alpha to use for the particle group.
 * @param {Real} strength - Set the cohesion strength between particles in the group.
 * @param {Real} category - The user defined category to which the group belongs.
 */
declare function physics_particle_group_begin(flags: PhysicsParticleFlag,groupflags: PhysicsParticleGroupFlag,x: Real,y: Real,ang: Real,xv: Real,yv: Real,ang_velocity: Real,col: Color,alpha: Real,strength: Real,category: Real): Undefined;

/**
 * This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function physics_particle_group_begin(), and then you would use this function to set the approximate half width and half height of the group in pixels - approximate because the exact width and height will depend on the size of the base particles, as defined by the physics_particle_set_radius() function, as the physics simulation tries to "fit" as many of the particles as possible into the defined shape. Finally you need to call physics_particle_group_end() to create the group of particles in the room.
 * @returns {Undefined}
 * @param {Real} halfwidth - The half width of the box.
 * @param {Real} halfheight - The half height of the box.
 */
declare function physics_particle_group_box(halfwidth: Real,halfheight: Real): Undefined;

/**
 * This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function physics_particle_group_begin(), and then you would use this function to set the approximate radius of the group in pixels - approximate because the exact radius will depend on the size of the base particles, as defined by the physics_particle_set_radius() function, as the physics simulation tries to "fit" as many of the particles as possible into the defined shape. Finally you need to call physics_particle_group_end() to create the group of particles in the room.
 * @returns {Undefined}
 * @param {Real} radius - The radius (in pixels) of the circle to create.
 */
declare function physics_particle_group_circle(radius: Real): Undefined;

/**
 * This function will return the number of particles that are active in a single group. The group index (ID) is the value that is returned when you call the function physics_particle_group_end().
 * @returns {Real}
 * @param {Real} group - The group index (ID) of the particle group to count.
 */
declare function physics_particle_group_count(group: Real): Real;

/**
 * With this function you can delete (remove) a particle group from the physics simulation in the current room. The function takes the unique group ID of the group to delete, as returned by the function physics_particle_group_end().
 * @returns {Undefined}
 * @param {Real} ind - The index (ID) of the particle group to delete.
 */
declare function physics_particle_group_delete(ind: Real): Undefined;

/**
 * This function is used to end the definition of a particle group shape. Calling this function will create the particles within the given shape parameters, and also return an ID value which can be stored and used in further functions for interactions with the particle group.
 * @returns {Id.PhysicsParticleGroup}
 */
declare function physics_particle_group_end(): PhysicsParticleGroup;

/**
 * With this function you can retrieve the rotation (angle) in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_angle(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the angular velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_ang_vel(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the x component of the center of mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_centre_x(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the y component of the center of mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_centre_y(group: PhysicsParticleGroup): Real;

/**
 * This function returns various pieces of information about a group of particles in the physics simulation using the given flags checked. The group index (its ID) is that which was returned by the function physics_particle_group_end(), and the buffer used must have been created previously using the function buffer_create(). It should be of the "grow" type, with the size being approximately that of the expected return data. The flags themselves are set using the constants given below, and you would use the bitwise or "|" to create a single flag value to get the desired information.
 * @returns {Id.Buffer}
 * @param {Id.PhysicsParticleGroup} group - The group index (ID) of the particle group to get the data from.
 * @param {Id.Buffer} buffer - The (previously created) buffer to use to store the data.
 * @param {Real} flags - The flags to use to extract data about specific particle types.
 */
declare function physics_particle_group_get_data(group: PhysicsParticleGroup,buffer: Buffer,flags: Real): Buffer;

/**
 * With this function you can retrieve the inertia of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_inertia(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the horizontal velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_vel_x(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the vertical velocity of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_vel_y(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the x position in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_x(group: PhysicsParticleGroup): Real;

/**
 * With this function you can retrieve the y position in the room of a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), and the function will return a value which is the combined value of the currently set flags.
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - The particle group to get.
 */
declare function physics_particle_group_get_y(group: PhysicsParticleGroup): Real;

/**
 * With this function you can join two particle groups together, and the joined groups will then behave as if they were both part of a single entity. The groups should have been created with over-lapping edges, as, if they are not already touching, they will not be joined. The function takes the unique group IDs of the groups to join, as returned by the function physics_particle_group_end(), and you can use the function any number of times for a single group to join various soft bodies together.
 * @returns {Undefined}
 * @param {Id.PhysicsParticleGroup} to - The first particle group to join.
 * @param {Id.PhysicsParticleGroup} from - The second particle group to join.
 */
declare function physics_particle_group_join(to: PhysicsParticleGroup,from: PhysicsParticleGroup): Undefined;

/**
 * This function will set the shape of the particle group that is being created. You must first have begun the group definition using the function physics_particle_group_begin(), and then you would use this function to tell GameMaker that you are going to add in the approximate points that will be used to define the polygon shape - approximate because the exact shape will depend on the size of the base particles, as defined by the physics_particle_set_radius() function, as the physics simulation tries to "fit" as many of the particles as possible into the defined shape.
 * @returns {Undefined}
 */
declare function physics_particle_group_polygon(): Undefined;

/**
 * With this function you can change the particle flags for a category of particles. The category value is that which you defined in the function physics_particle_create() or (if you created a group) physics_particle_group_begin(), while the flags are the return value of a combination of the following constants:
 * @returns {Undefined}
 * @param {Real} category - The particle category to set.
 * @param {Real} flags - The flags to set on the particle.
 */
declare function physics_particle_set_category_flags(category: Real,flags: Real): Undefined;

/**
 * With this function you can set the linear damping of particles in the simulation. Damping is used to reduce the physics simulation velocity of instances over time, much like air resistance in the real world. This function is global in scope, in that it will change the damping not just for new particles created after the change, but also for those already present in the simulation.
 * @returns {Undefined}
 * @param {Real} damping - The linear damping to be applied to the particle fixture.
 */
declare function physics_particle_set_damping(damping: Real): Undefined;

/**
 * With this function you can set the density of the particles in a physics simulation. Setting the density of the particle will have a direct impact on how much inertia it has as well as how it reacts to collisions, so if you make a small particle with a high density it will have a very large mass, but if you define a large particle with a low density it will have a much smaller mass. This function is global in scope, in that it will change the density not just for new particles created after the change, but also for those already present in the simulation.
 * @returns {Undefined}
 * @param {Real} density - The density of the particle fixture.
 */
declare function physics_particle_set_density(density: Real): Undefined;

/**
 * With this function you can change the particle flags for an individual particle. The index value is the particle ID as returned by the function physics_particle_create(), while the flags are the return value of a combination of the following constants:
 * @returns {Real}
 * @param {Real} index - The index of the particle.
 * @param {Real} flags - The flags to set on the particle.
 */
declare function physics_particle_set_flags(index: Real,flags: Real): Real;

/**
 * With this function you can set the gravity scale factor for particles in the physics simulation. The function is designed to help prevent instability in the physics simulation, especially when using very small particles which may behave unpredictably (i.e. break conservation of momentum) in scenarios such as explosions. Slowing these particles down by reducing gravity scale can stabilize their behaviour. This function is global in scope, in that it will change the gravity scale not just for new particles created after the change, but also for those already present in the simulation.
 * @returns {Undefined}
 * @param {Real} scale - The scaling factor to be applied to gravity for all particles.
 */
declare function physics_particle_set_gravity_scale(scale: Real): Undefined;

/**
 * With this function you can change the group flags for a group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end(), while the flags are the return value of a combination of the following constants:
 * @returns {Undefined}
 * @param {Real} group - The particle group to set.
 * @param {Real} flags - The flags to set on the particle.
 */
declare function physics_particle_set_group_flags(group: Real,flags: Real): Undefined;

/**
 * This function will set the total permitted number of particles in a physics simulation. If you set this value to 0, then there is no cap the particles created, and setting it to any other value will stop any further particles being created when the total number of particles is equal to the value. Note that the minimum number of particles you can create in a simulation is 128, so setting this value any lower will have no effect (unless set to 0).
 * @returns {Undefined}
 * @param {Real} count - The maximum number of particles to permit.
 */
declare function physics_particle_set_max_count(count: Real): Undefined;

/**
 * With this function you can set the radius (in pixels) for the particles in a physics simulation. This function is global in scope, in that it will change the radius not just for new particles created after the change, but also for those already present in the simulation.
 * @returns {Undefined}
 * @param {Real} radius - The radius (in pixels) of the particle fixture.
 */
declare function physics_particle_set_radius(radius: Real): Undefined;

/**
 * When creating a physics system in GameMaker, it is often important to have a visual representation of what is actually happening with an instance. This can be achieved by using physics_draw_debug(), which draws a schematic outline of the physical properties associated with the instance running the code. Here is an image of how it looks:
 * @returns {Undefined}
 */
declare function physics_draw_debug(): Undefined;

/**
 * Normally for a physics simulation to work, it must be continuous and cannot be stopped and started, or have instances suddenly moved from one place to another in the room. However, there are moments when you need to pause the simulation as (for example) the device os has paused, and so you would use this function. It pauses the simulation if the flag is set to true and no further physics calculations will be done until the flag is set to false again.
 * @returns {Undefined}
 * @param {Bool} flag - This can be set to true to pause the simulation, or false to start it again.
 */
declare function physics_pause_enable(flag: Bool): Undefined;

/**
 * Even if you have defined the physics for your objects, without a world to place them in they will default to the traditional GameMaker collision system, so you need this function to create the physics system for the specified room either in an object event, or the creation code of the room itself (it can also be defined without using code in the room editor). This function will associate a physics "world" with the room and all instances created in the room will behave using the physics that has been defined for them and the world itself.
 * @returns {Undefined}
 * @param {Real} pixeltometrescale - defines the ratio of pixels on screen to metres in the real world. A ratio of 32:1 will be specified as 1/32 (or 0.03125).
 */
declare function physics_world_create(pixeltometrescale: Real): Undefined;

/**
 * This function will draw a representation of the physics world system of the room to help with debugging when you are having trouble getting the physics scene to work right. Sometimes the problem can be in the rendering part of your game, for example a sprite may be drawn at the wrong position or rotation, giving the appearance of incorrect physics, or it may be that your calculations are not correct. Either way, this function will help you to find and resolve the problem by drawing what is going on in your physics system. To do this, you need tell it which part of the system to draw, and this is done by passing a value created from the bits stored in various "flag" constants:
 * @returns {Undefined}
 * @param {Constant.PhysicsDebugFlag} flag - The flag value for showing different debug features
 */
declare function physics_world_draw_debug(flag: PhysicsDebugFlag): Undefined;

/**
 * As with all the physics functions, physics_world_gravity() will only work on an instance if the room has a physics world defined for it in the room editor or using physics_world_create(). It will then use the 0,0 defining point of the physics world to calculate the direction and strength of gravity based on the vector calculated from the xg and yg inputs. Here are some images to illustrate...
 * @returns {Undefined}
 * @param {Real} xg - The x component of the gravity vector
 * @param {Real} yg - The y component of the gravity vector
 */
declare function physics_world_gravity(xg: Real,yg: Real): Undefined;

/**
 * Everything in GameMaker is based around steps and, normally, each event will only happen once per step. However, to get the necessary precision with the physics functions they are made to do several calculations each step which are called "iterations" the number of which are controlled by this function. The default number for the physics system is 10, but this can be changed to higher or lower depending how many times you want the physics to calculate each step, but it is recommended that you set this no lower than 5 and no higher than 30. You should also be aware that this function is dependent on the physics_world_update_speed() function.
 * @returns {Undefined}
 * @param {Real} y1 - the iterations (per step) that the physics system will perform
 */
declare function physics_world_update_iterations(y1: Real): Undefined;

/**
 * GameMaker updates things based on the room speed, so that if you set it to ,say, 30, GameMaker will run 30 steps in the course of a second. However, for the physics functions that may not be enough and you may want things to be updated at a slightly faster speed to increase stability or precision. To that end we use the function physics_world_update_speed() which sets the update speed for the physics system independently of the room speed. This means that you could have a room speed of 30, but set the physics to 60, effectively doubling the speed at which the physics system updates and performs its calculations compared to the speed at which the step are updated.
 * @returns {Undefined}
 * @param {Real} speed - the number of times per second that the physics system updates
 */
declare function physics_world_update_speed(speed: Real): Undefined;

/**
 * This function returns a string containing the character with raw BYTE value set. This will not, and should not, be displayed, but it will save correctly to disk for use in encoding.
 * @returns {String}
 * @param {Real} val - The raw byte value.
 */
declare function ansi_char(val: Real): String;

/**
 * This function returns a string containing the character which relates to the input Unicode code for displaying. This character depends on the current drawing fonts character set code page and if no font is set, it will use the default code page for the machine.
 * @returns {String}
 * @param {Real} val - The Unicode code value to get the string from
 */
declare function chr(val: Real): String;

/**
 * This function will return a string of the text contained on the clipboard. if no text is stored it will return an empty string "".
 * @returns {String}
 */
declare function clipboard_get_text(): String;

/**
 * This function will return true if the clipboard contains text or false if it does not.
 * @returns {Bool}
 */
declare function clipboard_has_text(): Bool;

/**
 * This function will set the clipboard to hold the defined string. You can set it to an empty string "" to effectively clear the clipboard of text.
 * @returns {Undefined}
 * @param {String} string - The text (as a string) to set the clipboard to hold.
 */
declare function clipboard_set_text(string: String): Undefined;

/**
 * This function takes a single character input string and returns the Unicode (UTF8) value for that character. Note that when used with the keyboard_check* functions, the input string can only be one character in length and can only be a number from 0 to 9 or a capitalised Roman character from A to Z.
 * @returns {Real}
 * @param {String} string - The string with which to find the Unicode code.
 */
declare function ord(string: String): Real;

/**
 * This function can be used to turn a given string into a real number. When using this function, numbers, minus signs, decimal points and exponential parts in the string are taken into account, while other characters (such as letters) will cause an error to be thrown. If you know, or suspect, that a string may have other characters then you can use string_digits() to remove all non-numeric characters, before using this function to turn the resulting string into a real number.
 * @returns {Real}
 * @param {Any} string - The string to be converted to a real value.
 */
declare function real(string: Any): Real;

/**
 * With this function you can turn any value into a string. If the real number is an integer, it will be saved with no decimal places, otherwise, it will be saved with two decimal places. If you require more decimal places, then use the function string_format(). Also note that using this function on a variable storing an array, a data structure, or a struct will convert the contents of these variables into a string which can then be output to the console or saved to a file for debugging. You are also able to use a format string with "{x}" placeholders (i.e. {0},{1},...) where 'X' is the argument number after the format string (starting at 0).
 * @returns {String}
 * @param {Any} val_or_format - The value to be turned into a string or a format string.
 * @param {ArgumentIdentity} ... - Values to replace the placeholders with.
 */
declare function string(val_or_format: Any,...: ArgumentIdentity): String;

/**
 * Returns the raw byte value as a real value at a given position in the given string.
 * @returns {Real}
 * @param {String} str - The string to check.
 * @param {Real} index - The position to get the byte from.
 */
declare function string_byte_at(str: String,index: Real): Real;

/**
 * This function returns the number of bytes in a string, but you should note that due to their being held as UTF8, this will not be equal to their string length.
 * @returns {Real}
 * @param {String} string - The string to measure the number of bytes of.
 */
declare function string_byte_length(string: String): Real;

/**
 * You can use this function to return a specific character at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the given index value, an empty string "" is returned, however if the given index is equal to or smaller than 0, then the first character of the string is returned.
 * @returns {String}
 * @param {String} str - The string to check.
 * @param {Real} index - The position to get the character from.
 */
declare function string_char_at(str: String,index: Real): String;

/**
 * With this function you can easily select a number of characters from within a string to be copied to another one. The first character in a string is always indexed as 1 and not 0 as you may expect, so to copy (for example) the first five characters of string you would have string_copy(str, 1, 5). A further example is provided below.
 * @returns {String}
 * @param {String} str - The string to copy from.
 * @param {Real} index - The position of the first character in the string to copy from (numbered from 1)
 * @param {Real} count - The number of characters, starting from the position of the first, to copy
 */
declare function string_copy(str: String,index: Real,count: Real): String;

/**
 * This function will return the amount of times the given substring appears within a specific string. In this way you can check for how many times a single letter or a phrase is repeated in a section of stored text.
 * @returns {Real}
 * @param {String} substr - The substring to check the string for.
 * @param {String} str - The string to check.
 */
declare function string_count(substr: String,str: String): Real;

/**
 * You can use this function to remove a specific part of a string. So, you supply the input string and the start and end position within that string to remove characters (index starts at 1) and the function will return a new string without that section in it.
 * @returns {String}
 * @param {String} str - The string to copy and delete from.
 * @param {Real} index - The position of the first character to remove.
 * @param {Real} count - The number of characters to remove.
 */
declare function string_delete(str: String,index: Real,count: Real): String;

/**
 * You can use this function to parse a given string and get any numbers from it. For example, say you have this text - "I am 81 years old". With this function you would get a return string of "81".
 * @returns {String}
 * @param {String} string - The string to get the digits from.
 */
declare function string_digits(string: String): String;

/**
 * Turns a real number into a string using your own formatting, where you can choose how many "places" are saved to the string and how many decimal places are saved also. Both can be very handy, some games prefer to display a score as a set number of digits, while control over decimal places can be good for a high accuracy the two decimal places of string() cannot provide. If the number of places specified is greater than the value to be shown and/or the number plus the decimal places that have been specified is less than the total places, then spaces will be added before the value to make up the difference (see the example below). Zeros will be added to the right of the decimal point if the value given is less than the total and the number of decimal places to include. The default format is no extra spaces on the left, and only two decimal places on the right, eg "265.73".
 * @returns {String}
 * @param {Real} val - The real number to be turned into a string.
 * @param {Real} tot - The total number of places of the main number to be shown. Spaces will be inserted to match this.
 * @param {Real} dec - The number of decimal places to be included.
 */
declare function string_format(val: Real,tot: Real,dec: Real): String;

/**
 * This function returns a string where the "#" symbol has been converted into a new line. So a string formatted as:
 * @returns {String}
 * @param {String} string - The string to convert over multiple lines
 */
declare function string_hash_to_newline(string: String): String;

/**
 * This function will return the height (in pixels) of the input string, taking into account the line separation and any line-breaks the text may have. It is very handy for calculating distances between text elements based on the tallest of the letters that make up the string as it would be drawn with draw_text() using the currently defined font.
 * @returns {Real}
 * @param {String} string - The string to measure the height of.
 */
declare function string_height(string: String): Real;

/**
 * This function will return the height (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy for calculating distances between text elements based on the tallest of the letters that make up the string as well as the actual string length itself when spread over several lines as it would be drawn with draw_text_ext() using the currently defined font. Separation and width can be set to -1 to get the default spacing.
 * @returns {Real}
 * @param {String} string - The string to measure the height of.
 * @param {Real} sep - The distance in pixels between lines of text as if the string was being drawn.
 * @param {Real} w - The maximum width (in pixels) of the string before a line break as if the string was bring drawn.
 */
declare function string_height_ext(string: String,sep: Real,w: Real): Real;

/**
 * With this function you can create a new string made up of two strings, where one has been inserted into the other at a given position. It can be useful, for example, to add a user name into a predefined text and so make the player of your game feel more involved in the action. Keep in mind when calculating the position to insert into that strings are indexed from 1, so the first character in a string is 1 and not 0 as you may expect.
 * @returns {String}
 * @param {String} substr - The substring to be inserted.
 * @param {String} str - The string to be copied.
 * @param {Real} index - The position in characters of the string to insert the substring.
 */
declare function string_insert(substr: String,str: String,index: Real): String;

/**
 * This function will return the character position of an instance of a sub-string within a string, searching from the end of the string to the beginning (so the reverse of string_pos(). The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.
 * @returns {Real}
 * @param {String} substr - The substring to look for in the string.
 * @param {String} str - The string.
 */
declare function string_last_pos(substr: String,str: String): Real;

/**
 * This function will return the character position of an instance of a sub-string within a string, searching backwards through the string from the position given as the starting position. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.
 * @returns {Real}
 * @param {String} substr - The substring to look for in the string.
 * @param {String} str - The string.
 * @param {Real} start_pos - The starting position to search from.
 */
declare function string_last_pos_ext(substr: String,str: String,start_pos: Real): Real;

/**
 * This function returns the number of characters comprising a given string. It can be useful for things like working out when to limit a custom text entry's character length (eg: capping a player's name to 10 characters). Remember that this is different to string_width() in that it measures the number of characters in the string, not its width as drawn on the screen in pixels.
 * @returns {Real}
 * @param {String} string - The string to measure the number of characters of.
 */
declare function string_length(string: String): Real;

/**
 * With this function you can remove all characters that are not classed as letters. This is handy for preventing people from entering unwanted characters into a text entry (like entering "#" to force a new line).
 * @returns {String}
 * @param {String} string - The string to convert to letters.
 */
declare function string_letters(string: String): String;

/**
 * This function will return a copy of a given string with everything but its letters and digits removed, which means it can be used to remove any unwanted characters (like "#" or "?") from, for example, a login name or a password.
 * @returns {String}
 * @param {String} string - The string to convert to letters and digits.
 */
declare function string_lettersdigits(string: String): String;

/**
 * With this function you can force a string to contain only lower case characters.
 * @returns {String}
 * @param {String} string - The string to convert to lowercase.
 */
declare function string_lower(string: String): String;

/**
 * You can use this function to return a specific character code at a specific position within a string, with the index starting at 1 for the first character. If no character is found or the string is shorter than the value given to index, -1 is returned.
 * @returns {Real}
 * @param {String} str - The string to check.
 * @param {Real} index - The position to get the character code from.
 */
declare function string_ord_at(str: String,index: Real): Real;

/**
 * This function will return the character position of an instance of a sub-string within a string, searching from the beginning of the string (to search from the end, use the function string_last_pos()). The function will return 0 if it's not found at all, or the position of the first character of the sub-string if it is found. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect. One use for this is for filtering words that may be considered offensive, or for finding the correct place to insert some text into another string.
 * @returns {Real}
 * @param {String} substr - The substring to look for in the string.
 * @param {String} str - The string.
 */
declare function string_pos(substr: String,str: String): Real;

/**
 * This function will return the character position of an instance of a sub-string within a string, searching forwards through the string from the position given as the starting position. The function will return 0 if the search string is not found, or the position of the first character of the search string if it is. Keep in mind that for legacy support strings are indexed from 1, so 1 is the first position in the string, not 0 as you may expect.
 * @returns {Real}
 * @param {String} substr - The substring to look for in the string.
 * @param {String} str - The string.
 * @param {Real} start_pos - The starting position to search from.
 */
declare function string_pos_ext(substr: String,str: String,start_pos: Real): Real;

/**
 * This function simply returns the same string repeated a given number of times over itself.
 * @returns {String}
 * @param {String} str - The string to repeat.
 * @param {Real} count - The number of times to repeat the string.
 */
declare function string_repeat(str: String,count: Real): String;

/**
 * You can use this function to parse a string looking for a specific part, which can then be replaced by the new string that you have specified.
 * @returns {String}
 * @param {String} str - The string to be copied.
 * @param {String} substr - The substring within the string to be replaced.
 * @param {String} newstr - The new substring to replace the previous one.
 */
declare function string_replace(str: String,substr: String,newstr: String): String;

/**
 * You can use this function to parse a string looking for specific parts, which can then be replaced by the new string that you have specified in all places that they occur.
 * @returns {String}
 * @param {String} str - The string to be copied.
 * @param {String} substr - The substring within the string to be replaced in all instances.
 * @param {String} newstr - The new substring to replace the previous one(s).
 */
declare function string_replace_all(str: String,substr: String,newstr: String): String;

/**
 * This function sets a byte directly in a string (based on the UTF8 format) and returns a copy of the string with the changes.
 * @returns {String}
 * @param {String} str - The string to change the byte of.
 * @param {Real} pos - The position within the string (starting at 1) to change the byte of.
 * @param {Real} byte - The new byte value.
 */
declare function string_set_byte_at(str: String,pos: Real,byte: Real): String;

/**
 * With this function you can force a string to contain only upper case characters.
 * @returns {String}
 * @param {String} string - The string to convert to uppercase.
 */
declare function string_upper(string: String): String;

/**
 * This function will return the width (in pixels) of the input string, taking into account any line-breaks the text may have. It is very handy for calculating distances between text elements based on the total width of the letters that make up the string as it would be drawn with draw_text() using the currently defined font.
 * @returns {Real}
 * @param {String} string - The string to measure the width of.
 */
declare function string_width(string: String): Real;

/**
 * This function will return the maximum width (in pixels) of the input string, taking into account the line separation and line-break width (which is defined as the number of pixels that the string can occupy before a line break is inserted). It is very handy for calculating distances between text elements based on the maximum width of a string that is split over several lines as it would be drawn with draw_text_ext() using the currently defined font. Separation and width can be set to -1 to get the default spacing.
 * @returns {Real}
 * @param {String} string - The string to measure the width of.
 * @param {Real} sep - The distance in pixels between lines of text as if the string was being drawn.
 * @param {Real} w - The maximum width (in pixels) of the string before a line break as if the string was bring drawn.
 */
declare function string_width_ext(string: String,sep: Real,w: Real): Real;

/**
 * This function returns a new string using a format string with placeholder information and an array of values. The placeholders should follow the format "{x}" where x is the index of the value in the array that it should be replaced with.
 * @returns {String}
 * @param {String} format - The input string format.
 * @param {Array} val_array - An array of values to replace the placeholders.
 */
declare function string_ext(format: String,val_array: Array): String;

/**
 * This function removes whitespace from the beginning of a string (left). You can optionally provide an array of strings to be used for trimming if you want to remove something other than whitespaces.
 * @returns {String}
 * @param {String} str - The input string.
 * @param {Array[String]} substrs - An array of strings to be used during trimming.
 */
declare function string_trim_start(str: String,substrs: Array[String]): String;

/**
 * This function removes whitespace from the end of a string (right). You can optionally provide an array of strings to be used for trimming if you want to remove something other than whitespaces.
 * @returns {String}
 * @param {String} str - The input string.
 * @param {Array[String]} substrs - An array of strings to be used during trimming.
 */
declare function string_trim_end(str: String,substrs: Array[String]): String;

/**
 * This function removes whitespace from both ends of a string and returns a new string, without modifying the original string. You can optionally provide an array of strings to be used for trimming if you want to remove something other than whitespaces.
 * @returns {String}
 * @param {String} str - The input string.
 * @param {Array[String]} substrs - An array of strings to be used during trimming.
 */
declare function string_trim(str: String,substrs: Array[String]): String;

/**
 * This function determines whether a string begins with the characters of a specified string, returning true or false as appropriate.
 * @returns {Bool}
 * @param {String} str - The input string.
 * @param {String} substr - The string to check against.
 */
declare function string_starts_with(str: String,substr: String): Bool;

/**
 * This function determines whether a string ends with the characters of a specified string, returning true or false as appropriate.
 * @returns {Bool}
 * @param {String} str - The input string.
 * @param {String} substr - The string to check against.
 */
declare function string_ends_with(str: String,substr: String): Bool;

/**
 * This function splits string into an ordered list of substrings by searching for the delimiter, puts these substrings into an array, and returns the array.
 * @returns {Array[String]}
 * @param {String} str - The input string.
 * @param {String} delimiter - The delimiter string to search for.
 * @param {Bool} remove_empty - Removes empty entries from the output array.
 * @param {Real} max_splits - The maximum number of splits that are allowed.
 */
declare function string_split(str: String,delimiter: String,remove_empty: Bool,max_splits: Real): Array[String];

/**
 * This function splits string into an ordered list of substrings by searching from an array of delimiters, puts these substrings into an array, and returns the array.
 * @returns {Array[String]}
 * @param {String} str - The input string.
 * @param {Array[String]} delimiter_array - An array of delimiter strings to search for.
 * @param {Bool} remove_empty - Removes empty entries from the output array.
 * @param {Real} max_splits - The maximum number of splits that are allowed.
 */
declare function string_split_ext(str: String,delimiter_array: Array[String],remove_empty: Bool,max_splits: Real): Array[String];

/**
 * This function joins a set of arguments using the provided delimiter, non-string values will be converted to string.
 * @returns {String}
 * @param {String} delimiter - The delimiter to use when joining the values.
 * @param {ArgumentIdentity} ... - The values be joined using the delimiter.
 */
declare function string_join(delimiter: String,...: ArgumentIdentity): String;

/**
 * This function joins the elements of an array using the provided delimiter, non-string values will be converted to string.
 * @returns {String}
 * @param {String} delimiter - The delimiter to use when joining the values.
 * @param {Array} values_array - An array of values be joined using the delimiter.
 * @param {Real} offset - The offset of the range (allows negative values, from end of string).
 * @param {Real} length - The number of elements to join (allows negative values, reverse traversing).
 */
declare function string_join_ext(delimiter: String,values_array: Array,offset: Real,length: Real): String;

/**
 * This function concatenates a set of arguments, non-string values will be converted to string.
 * @returns {String}
 * @param {ArgumentIdentity} ... - The values be concatenated.
 */
declare function string_concat(...: ArgumentIdentity): String;

/**
 * This function concatenates a range of elements in an array, non-string values will be converted to string.
 * @returns {String}
 * @param {Array} values_array - An array of values be concatenated.
 * @param {Real} offset - The offset of the range (allows negative values, from end of string).
 * @param {Real} length - The number of elements to concatenate (allows negative values, reverse traversing).
 */
declare function string_concat_ext(values_array: Array,offset: Real,length: Real): String;

/**
 * This function iterates over each character of a string calling a provided function. It allows to specify a start position (1-based) and a length.
 * @returns {Undefined}
 * @param {String} str - The string to iterate over.
 * @param {Function} func - A function to be called for each character in range (allows arguments 'char' and 'pos').
 * @param {Real} pos - The position to start the iteration from (allows negative values, from end of string).
 * @param {Real} length - The number of iterations to execute (allows negative values, reverse traversing).
 */
declare function string_foreach(str: String,func: Function,pos: Real,length: Real): Undefined;

/**
 * With this function you can copy all or part of an array into another array at any position. You need to supply both the source and the destination arrays (both need to have been created previously), as well as a position within the source array to copy from and a position within the destination array to copy to. Finally you need to specify the length of the array (or the length of the part that you want) to copy. If the data being copied exceeds the length of the destination array, the array will be extended to accept the data.
 * @returns {Undefined}
 * @param {Array} dest - The array to copy to.
 * @param {Real} dest_index - The index within the array to copy to.
 * @param {Array} src - The array to copy from.
 * @param {Real} src_index - The index with the array to start copying from.
 * @param {Real} length - The length (number of array indices) to copy.
 */
declare function array_copy(dest: Array,dest_index: Real,src: Array,src_index: Real,length: Real): Undefined;

/**
 * With this function you can create a 1D array of a given size. You tell the function the length of the array to create, and it will return the "handle" for the array which you can then assign to a variable. Arrays created in this way will have each entry initialised to 0 unless you specify an (optional) initialisation value. If you do supply the extra value for initialising the array, then all indices within the new array will be set to that instead of 0, but note that the function will have a greater performance overhead in this case.
 * @returns {Array[ArgumentIdentity]}
 * @param {Real} size - The size of the array to create.
 * @param {ArgumentIdentity} value - The value to use to initialise all array indices (optional).
 */
declare function array_create(size: Real,value: ArgumentIdentity): Array[ArgumentIdentity];

/**
 * With this function you can delete a value (or values) from an array at any given position. The function requires you to provide a variable that holds the array, the index (position) in the array to delete from, as well as the number of values to delete.
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} index - The index (position) in the array to delete the value(s) from.
 * @param {Real} number - The number of values to delete.
 */
declare function array_delete(array: Array,index: Real,number: Real): Undefined;

/**
 * With this function you can check to see if two arrays are equal (equivalent or the same). You give the two arrays to check, and the function will return true if they are equal (either equivalent or the same) or false if they are not. Note that this is not the same as checking if two arrays are the same using ==, which will not check to see if the two arrays hold equivalent values, but only to see if the arrays are referencing the same initial array. For example:
 * @returns {Bool}
 * @param {Array} array1 - The index of the first array.
 * @param {Array} array2 - The index of the second array.
 */
declare function array_equals(array1: Array,array2: Array): Bool;

/**
 * With this function you can retrieve the value from an index in an array. The function requires you to provide a variable that holds the array and the index to get the value from within that array. Note that if the array index given is out of bounds then the game will crash with an error. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to get when you supply the array index, following this pattern:
 * @returns {Any}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} index - The index of the array to get the value from.
 */
declare function array_get(array: Array,index: Real): Any;

/**
 * With this function you can insert a value (or values) into an array at any given position. The function requires you to provide a variable that holds the array, the index (position) in the array to insert at, as well as at least one value to insert, although you can optionally provide further arguments and they will all be inserted into the array in consecutive order from the given index.
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} index - The index (position) in the array to insert the value(s) 
 * @param {ArgumentIdentity} ... - The value to insert
 */
declare function array_insert(array: Array,index: Real,...: ArgumentIdentity): Undefined;

/**
 * With this function you can get the length (number of entries) of an array dimension. You supply the array index value and the function will return an integer value representing the number of entries the array contains. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to get the length of when you supply the array index, following this pattern:
 * @returns {Real}
 * @param {Array} array - The index of the array to check.
 */
declare function array_length(array: Array): Real;

/**
 * This function will remove the last element in the given array and return its value. If the array is empty undefined is returned.
 * @returns {ArgumentIdentity}
 * @param {Array} array - The variable that holds the array.
 */
declare function array_pop(array: Array): ArgumentIdentity;

/**
 * With this function you can push a value (or values) onto the end of an array without having to know the length of the array. The function requires you to provide a variable that holds the array as well as at least one value to push, although you can optionally provide further arguments and they will all be pushed onto the array in consecutive order.
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {ArgumentIdentity} ... - The value to push onto the end of the array
 */
declare function array_push(array: Array,...: ArgumentIdentity): Undefined;

/**
 * With this function you can resize an existing array dimension to a new size. You supply the array to be resized as well as the new number of indices for the array, and the function will resize that array. Note that this function is designed for resizing an array down to a smaller length as you can resize up by simply setting a new index in the array. That said, if you do use it to size up an array, any new indices will be set to the default value of 0.
 * @returns {Undefined}
 * @param {Array} array - The index of the array to resize.
 * @param {Real} new_size - The new size for the array (an integer, starting from 0).
 */
declare function array_resize(array: Array,new_size: Real): Undefined;

/**
 * With this function you can set the value of an index in an array to a value. The function requires you to provide a variable that holds the array as well as the index to set and the value to set it to. This function can also be used for multi-dimension arrays, as long as you specify which dimension you want to set when you supply the array index, following this pattern:
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} index - The index of the array to set the value for.
 * @param {Any} value - The value to set.
 */
declare function array_set(array: Array,index: Real,value: Any): Undefined;

/**
 * With this function you can sort an array in ascending order or descending order or using a custom function to define the sort order. The function requires you to provide the array to sort, and then either of the following:
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {Any} sorttype_or_function - The sort type (true for ascending or false for descending) or a function reference to use for sorting.
 */
declare function array_sort(array: Array,sorttype_or_function: Any): Undefined;

/**
 * This function will remove the first element in the given array and return its value. If the array is empty undefined is returned.
 * @returns {ArgumentIdentity}
 * @param {Array} array - The variable that holds the array.
 */
declare function array_shift(array: Array): ArgumentIdentity;

/**
 * With this function you can shuffle an array (or subsection), a new array is returned that is a copy of the original with the entries shuffled.
 * @returns {Array}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} offset - The offset to be used when shuffling the array. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - How many entries should be shuffled. Defaults to array_length() - 1.
 */
declare function array_shuffle(array: Array,offset: Real,length: Real): Array;

/**
 * With this function you can shuffle an array (or subsection) in place, nothing is returned
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} offset - The offset to be used when shuffling the array. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - How many entries should be shuffled. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_shuffle_ext(array: Array,offset: Real,length: Real): Undefined;

/**
 * This function returns the first index at which a given element can be found in the array (or subsection). If the value is not found the function returns -1.
 * @returns {Real}
 * @param {Array} array - The variable that holds the array.
 * @param {Any} value - The value to search for.
 * @param {Real} offset - The offset to be used when searching the array. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - How many entries should be searched. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_get_index(array: Array,value: Any,offset: Real,length: Real): Real;

/**
 * Determines whether an array includes a certain value among its entries, returning true or false as appropriate.
 * @returns {Bool}
 * @param {Array} array - The variable that holds the array.
 * @param {Any} value - The value to check inside the array.
 * @param {Real} offset - The offset to be used when looking through the array. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - How many entries should be checked. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_contains(array: Array,value: Any,offset: Real,length: Real): Bool;

/**
 * Determines whether an array includes certain values among its entries, returning true or false as appropriate. Doesn't account for order.
 * @returns {Bool}
 * @param {Array} array - The variable that holds the array.
 * @param {Array} values - An array of values to be search inside the provided array.
 * @param {Bool} matchAll - Whether the match should be complete of partial.
 * @param {Real} offset - The offset to be used when looking through the array. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - How many entries should be checked. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_contains_ext(array: Array,values: Array,matchAll: Bool,offset: Real,length: Real): Bool;

/**
 * With this function you can return the first element of the array or undefined if the array is empty.
 * @returns {ArgumentIdentity}
 * @param {Array} array - The variable that holds the array.
 */
declare function array_first(array: Array): ArgumentIdentity;

/**
 * With this function you can return the last element of the array or undefined if the array is empty.
 * @returns {ArgumentIdentity}
 * @param {Array} array - The variable that holds the array.
 */
declare function array_last(array: Array): ArgumentIdentity;

/**
 * With this function you can create an array of a given size, initialising each element with the provided function.
 * @returns {Array}
 * @param {Real} size - The size of the array to create.
 * @param {Function} function - The function to be used for element initialisation. Accepts the following arguments (index) and should return the init value of the element.
 */
declare function array_create_ext(size: Real,function: Function): Array;

/**
 * With this function you can find the index of the first element that returns true to the given predicate. This function allows a custom range definition and reverse order.
 * @returns {Real}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function used to perform the search. Accepts the following arguments (value, index) and should return a boolean.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_find_index(array: Array,function: Function,offset: Real,length: Real): Real;

/**
 * With this function you can check if any of the elements returns true to the given predicate. This function allows a custom range definition and reverse order.
 * @returns {Bool}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function used to perform the check. Accepts the following arguments (value, index) and should return a boolean.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_any(array: Array,function: Function,offset: Real,length: Real): Bool;

/**
 * With this function you can check if all of the elements return true to the given predicate. This function allows a custom range definition and reverse order.
 * @returns {Bool}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function used to perform the check. Accepts the following arguments (value, index) and should return a boolean.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_all(array: Array,function: Function,offset: Real,length: Real): Bool;

/**
 * With this function you can execute a method on all or a range of elements in the array. This function allows a custom range definition and reverse order.
 * @returns {Undefined}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed for each array entry. Accepts the following arguments (value, index).
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_foreach(array: Array,function: Function,offset: Real,length: Real): Undefined;

/**
 * With this function you can traverse the array/range performing a cumulative operation on its elements. This function allows a custom range definition and reverse order.
 * @returns {Any}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed for each array entry. Accepts the following arguments (prev, value, index) and should return a new 'prev'.
 * @param {Any} init - The initial value to be used for the previous element. Defaults to array[offset], if ommitted first iteration will be skipped.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_reduce(array: Array,function: Function,init: Any,offset: Real,length: Real): Any;

/**
 * With this function you can create a new array from elements of the current array while the predicate is matched. This function allows a custom range definition and reverse order.
 * @returns {Array}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed for each array entry. Accepts the following arguments (value, index) and should return a boolean.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_copy_while(array: Array,function: Function,offset: Real,length: Real): Array;

/**
 * With this function you can create a new array with only the elements that return true to the given predicate. This function allows a custom range definition and reverse order.
 * @returns {Array}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed as filter. Accepts the following arguments (value, index) and should return a boolean.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_filter(array: Array,function: Function,offset: Real,length: Real): Array;

/**
 * With this function you can mutate an existing array to filter the elements that return true to the given predicate. This function returns the number of filtered elements. The filtered elements will be padded to offset and order by the traversing direction. This function allows a custom range definition and reverse order.
 * @returns {Real}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed as filter. Accepts the following arguments (value, index) and should return a boolean.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_filter_ext(array: Array,function: Function,offset: Real,length: Real): Real;

/**
 * With this function you can create a new array by mapping the current array elements using the given predicate. This function allows a custom range definition and reverse order.
 * @returns {Array}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed for mapping the values. Accepts the following arguments (value, index) and should return the mapped value.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_map(array: Array,function: Function,offset: Real,length: Real): Array;

/**
 * With this function you can mutate an existing array by mapping the element values using the given predicate. This function returns the number of mapped elements. The mapped elements will keep their original position on the array. This function allows a custom range definition and reverse order.
 * @returns {Real}
 * @param {Array} array - The variable that holds the array.
 * @param {Function} function - The function to be executed for mapping the values. Accepts the following arguments (value, index) and should return the mapped value.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_map_ext(array: Array,function: Function,offset: Real,length: Real): Real;

/**
 * With this function you can create a new array with only unique values. This function allows a custom range definition and reverse order.
 * @returns {Array}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_unique(array: Array,offset: Real,length: Real): Array;

/**
 * With this function you can mutate an existing array with only unique value. This function returns the number of unique elements. The mapped elements will be padded to offset and order by the traversing direction. This function allows a custom range definition and reverse order.
 * @returns {Real}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_unique_ext(array: Array,offset: Real,length: Real): Real;

/**
 * With this function you can create a new array with the elements in reverse order. This function allows a custom range definition.
 * @returns {Array}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_reverse(array: Array,offset: Real,length: Real): Array;

/**
 * With this function you can mutate an existing array reversing the elements order. This function returns the number of reversed elements. This function allows a custom range definition.
 * @returns {Real}
 * @param {Array} array - The variable that holds the array.
 * @param {Real} offset - The offset to be used when executing the function. Negative values will count from the end of the array. Defaults to 0.
 * @param {Real} length - On how many entries should the function be executed. Negative values will traverse the array in reverse order. Defaults to array_length() - 1.
 */
declare function array_reverse_ext(array: Array,offset: Real,length: Real): Real;

/**
 * With this function you can concatenate two or more arrays into a single one.
 * @returns {Array}
 * @param {Array} array0 - The variable that holds the first array.
 * @param {Array} ... - The variable that holds the nth array.
 */
declare function array_concat(array0: Array,...: Array): Array;

/**
 * With this function you can join two or more arrays into a single one, removing the duplicates
 * @returns {Array}
 * @param {Array} array0 - The variable that holds the first array.
 * @param {Array} ... - The variable that holds the nth array.
 */
declare function array_union(array0: Array,...: Array): Array;

/**
 * With this function you can create an array of elements common to all the input arrays, removing duplicates.
 * @returns {Array}
 * @param {Array} array0 - The variable that holds the first array.
 * @param {Array} ... - The variable that holds the nth array.
 */
declare function array_intersection(array0: Array,...: Array): Array;

/**
 * This function will attempt to convert a given value into a boolean data type, where the value will be returned as true if it is greater than 0.5 and false otherwise.
 * @returns {Bool}
 * @param {Any} n - The value to convert.
 */
declare function bool(n: Any): Bool;

/**
 * This function can be used to get the name of the function that was used to create a struct when the struct was created using a constructor function and the new operator. You supply the variable with the struct reference to check and the function will return either a string with the function name or undefined. Note that if you pass the function a struct literal (ie: a struct that was created without using a constructor function) then it will simply return the string "struct". This function can also be used to check if a struct reference is a weak reference or not, in which case the function will return the string "weakref" instead of the name of the function that created the struct for more information, see the function weak_ref_create()).
 * @returns {String}
 * @param {Struct} struct - The struct reference to use.
 */
declare function instanceof(struct: Struct): String;

/**
 * Returns true if "struct" has "constructor_name" as part of its inheritance hierarchy
 * @returns {Bool}
 * @param {Struct} struct - The struct reference to check.
 * @param {Any} constructor_name - The constructor reference to check against
 */
declare function is_instanceof(struct: Struct,constructor_name: Any): Bool;

/**
 * returns the static struct for the given struct or function / script, returns undefined if no static struct is set.
 * @returns {Struct}
 * @param {Any} struct - The struct or Function reference to use.
 */
declare function static_get(struct: Any): Struct;

/**
 * sets the static struct on the given struct.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to set.
 * @param {Struct} static_struct - The struct to set as the static
 */
declare function static_set(struct: Struct,static_struct: Struct): Undefined;

/**
 * This function will attempt to convert a given value into a 64bit integer, where the value must be either a real, a string, an int64, an int32, or a ptr. Anything else will cause the game to crash with an error message. You can check to see if a variable holds an int64 using the function is_int64().
 * @returns {Real}
 * @param {Any} val - The value to convert.
 */
declare function int64(val: Any): Real;

/**
 * This function can be used to check and see if a variable holds an array (it will return true) or not (in which case it will return false).
 * @returns {Bool}
 * @param {Any} n - The variable to check.
 */
declare function is_array(n: Any): Bool;

/**
 * This function returns whether a given variable is a boolean (true ior false) or not. In some cases you want to check and see if a variable in GameMaker holds a boolean value, and that's when you would use this function.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_bool(n: Any): Bool;

/**
 * This function returns whether a given variable can be called (either beeing a method or a valid function index).
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_callable(n: Any): Bool;

/**
 * This function returns whether a given variable is a handle that references an internal type.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_handle(n: Any): Bool;

/**
 * This function returns whether a given variable is infinity (an infinite number) or not, returning true if it is, and false if it is not.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_infinity(n: Any): Bool;

/**
 * This function returns whether a given variable is a 32bit integer or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is an int 32 or not.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_int32(n: Any): Bool;

/**
 * This function returns whether a given variable is a 64bit integer or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is an int64 or not.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_int64(n: Any): Bool;

/**
 * This function can be used to check and see if a variable is a method variable (it will return true) or not (in which case it will return false).
 * @returns {Bool}
 * @param {Any} n - The variable to check.
 */
declare function is_method(n: Any): Bool;

/**
 * This function returns whether a given variable is NaN (not a number) or not, returning true if it is, and false if it is not.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_nan(n: Any): Bool;

/**
 * This function returns whether a given variable is a numeric value (real, int32, int64 or boolean) or not. In some cases you want to check and see if a variable in GameMaker holds any numeric value, and that's when you would use this function. The function will return true if the given input is numeric, and false otherwise.
 * @returns {Bool}
 * @param {Any} n - The input to check.
 */
declare function is_numeric(n: Any): Bool;

/**
 * This function returns whether a given variable is a pointer or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is a pointer or not.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_ptr(n: Any): Bool;

/**
 * This function returns whether a given variable is a real number (single, double or integer) or not. In some cases you want to check and see if a variable holds a real number, and that's when you would use this function. It does not return the real number but rather true or false, so a value of, for example, "fish" would return false, however a value of 200 would return true.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_real(n: Any): Bool;

/**
 * This function returns whether a given variable is a string number or not. In some cases you want to check and see if a variable in GameMaker holds a string and not a real and that's when you would use this function. It does not return the string but rather true or false, so a value of, for example, "fish" for n will return true, but a value of 200 for n will return false.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_string(n: Any): Bool;

/**
 * This function checks if the supplied value is a struct. It returns true if it is, otherwise it returns false.
 * @returns {Bool}
 * @param {Any} val - The value to check.
 */
declare function is_struct(val: Any): Bool;

/**
 * This function returns whether a given variable is defined or not. In some cases you want to check and see what data type a variable holds in GameMaker and that's when you would use this function. It returns true or false depending on whether the value is defined or not.
 * @returns {Bool}
 * @param {Any} n - The argument to check.
 */
declare function is_undefined(n: Any): Bool;

/**
 * returns the argument as a string, resolved at compile time.
 * @returns {String}
 * @param {Any} name - The name to convert to string.
 */
declare function nameof(name: Any): String;

/**
 * With this function you can bind any function that has previously been defined to a given instance or struct, creating a method variable that can be used later. You supply the instance ID to use (it must be an instance that is active and in the room, and can't be an object ID) or a struct reference, as well as the ID of the function that you want to bind. The function will return a method which can be called from the variable it is assigned to (see the code example below). It is worth noting that you can bind built-in functions as well as user defined functions, and you can also supply undefined as the instance/struct argument meaning that the current self scope will be used for the binding.
 * @returns {Function}
 * @param {Any} struct_ref_or_instance_id - The unique reference or ID value of the struct or instance to use (or undefined for self)
 * @param {Function} function - The ID of the function to use
 */
declare function method(struct_ref_or_instance_id: Any,function: Function): Function;

/**
 * With this function you can retrieve the Script index for the script where the method was defined. If the method was not defined in a script then the function will return -1, otherwise it will return the index value for the script.
 * @returns {Asset.GMScript}
 * @param {Function} method - The method variable to check
 */
declare function method_get_index(method: Function): GMScript;

/**
 * With this function you can retrieve the instance ID or struct reference which is the self context used when the method is called. If the variable is not a method then the function will return undefined. Please note that the function may also return the constant pointer_null, in which case the current self is being used at the time of the call.
 * @returns {Any}
 * @param {Function} method - The method variable to check.
 */
declare function method_get_self(method: Function): Any;

/**
 * This function will attempt to convert a given value into a pointer data type, where the value must be either a real, a string, an int64, an int32, or a ptr. Anything else will cause the game to crash with an error message.
 * @returns {Pointer}
 * @param {Any} n - The value to convert.
 */
declare function ptr(n: Any): Pointer;

/**
 * This function will attempt to convert a string into a handle data type, to be used when a handle has been converted to a string and you want to convert it back. Note: No validation is done on the value returned so it is not guaranteed to be valid.
 * @returns {Asset}
 * @param {String} value_string - The string to convert.
 */
declare function handle_parse(value_string: String): Asset;

/**
 * This function returns the data type of any given variable as a string. The possible return values are listed in the table below:
 * @returns {String}
 * @param {Any} variable - The variable to get the data type of.
 */
declare function typeof(variable: Any): String;

/**
 * This function can accept any kind of data as its first parameter, which represents the variable or data structure to be cloned (won't work for instances). The second parameter, "depth" is applicable only for arrays and structs and sets the level of depth to which the cloning process should be performed (with a maximum value of 128)
 * @returns {Any}
 * @param {Any} value - The value to be cloned
 * @param {Real} depth - The depth to be used during the cloning process (defaults to the maxiumum of 128)
 */
declare function variable_clone(value: Any,depth: Real): Any;

/**
 * With this function you can compute the hash of a given struct or instance member allowing for faster access (see 'struct_get_from_hash' and 'struct_set_from_hash').
 * @returns {Real}
 * @param {Any} name - The name of the variable to compute the hash of
 */
declare function variable_get_hash(name: Any): Real;

/**
 * With this function you can check whether a global scope variable exists or not. You supply the global variable name to check for as a string (see example code below) and the function will return true if a global variable with the given name exists or false otherwise.
 * @returns {Bool}
 * @param {String} name - The name of the global variable to check for (as a string)
 */
declare function variable_global_exists(name: String): Bool;

/**
 * With this function you can get the value from a given named global variable. You supply the name of the global variable to get the value of as a string (see example code below) and the function will return the value held by the global variable or undefined if the variable does not exist.
 * @returns {Any}
 * @param {String} name - The name of the global variable to get (as a string)
 */
declare function variable_global_get(name: String): Any;

/**
 * With this function you can set the value of a given global variable. You supply the name of the global variable to set the value of as a string (see example code below), and then the value to set (can be any valid data type). If the global variable does not exist already in the game it will be created and then assigned the value.
 * @returns {Undefined}
 * @param {String} name - The name of the global variable to set (as a string)
 * @param {Any} val - The value to set the global variable to
 */
declare function variable_global_set(name: String,val: Any): Undefined;

/**
 * With this function you can check whether an instance scope variable exists or not. You supply the unique instance ID value (which can be found from the Instance Properties in the room editor, or is returned when you call the function instance_create_layer()) as well as the variable name to check for as a string (see example code below). The function will return true if a variable with the given name exists for the instance and false otherwise.
 * @returns {Bool}
 * @param {Any} instance_id - The unique ID value of the instance to check
 * @param {String} name - The name of the variable to check for (as a string)
 */
declare function variable_instance_exists(instance_id: Any,name: String): Bool;

/**
 * With this function you can get the value from a given named variable. You supply the unique instance ID value (which can be found from the Instance Properties in the room editor, or is returned when you call the function instance_create_layer()) as well as the name of the variable to get the value of as a string (see example code below). The function will return the value held by the variable, or undefined if the variable does not exist.
 * @returns {Any}
 * @param {Any} instance_id - The unique ID value of the instance to use
 * @param {String} name - The name of the variable to get (as a string)
 */
declare function variable_instance_get(instance_id: Any,name: String): Any;

/**
 * With this function you can retrieve an array populated with the instance variable names for an instance, or the global variables for a game. When you pass in an instance ID value, each entry in the array will be a string of the variable name that corresponds to an instance scope variable that has been created in the instance. However if you pass in the keyword global, each entry in the array will be a string of the variable name that corresponds to an global scope variable.
 * @returns {Array[String]}
 * @param {Any} instance_id/global - The unique ID value of the instance to check or the keyword global
 */
declare function variable_instance_get_names(instance_id/global: Any): Array[String];

/**
 * With this function you can find the total number number of variables defined for an instance. You supply the instance ID to check, and the function will return an integer value for the number of variables encountered, or (if no instance of the given ID exists) -1.
 * @returns {Real}
 * @param {Any} instance_id - The unique ID value of the instance to check.
 */
declare function variable_instance_names_count(instance_id: Any): Real;

/**
 * With this function you can set the value of a given variable in an instance. You supply the unique instance ID value (which can be found from the Instance Properties in the room editor, or is returned when you call the function instance_create_layer()) as well as the name of the variable to set the value of as a string (see example code below), and then finally the value to set (can be any valid data type). If the variable does not exist already in the instance it will be created and then assigned the value.
 * @returns {Undefined}
 * @param {Any} instance_id - The unique ID value of the instance to use
 * @param {String} name - The name of the variable to set (as a string)
 * @param {Any} val - The value to set the variable to
 */
declare function variable_instance_set(instance_id: Any,name: String,val: Any): Undefined;

/**
 * With this function you can check whether a variable exists within the given struct or not. You supply the struct reference to use as well as the variable name to check for as a string (see example code below). The function will return true if a variable with the given name exists for the struct and false otherwise.
 * @returns {Bool}
 * @param {Struct} struct - The struct reference to check
 * @param {Any} name - The name of the struct variable to check for (as a string)
 */
declare function variable_struct_exists(struct: Struct,name: Any): Bool;

/**
 * With this function you can get the value from a given named variable within a struct. You supply the struct reference as well as the name of the variable to get the value of as a string (see example code below). The function will return the value held by the variable or undefined if the named variable does not exist.
 * @returns {Any}
 * @param {Struct} struct - The struct reference to use
 * @param {Any} name - The name of the variable to get (as a string)
 */
declare function variable_struct_get(struct: Struct,name: Any): Any;

/**
 * With this function you can retrieve an array populated with the variable names from a struct. You pass in the struct reference to check, and each entry in the array will be a string of the variable names that the struct contains.
 * @returns {Array[String]}
 * @param {Struct} struct - The struct reference to check.
 */
declare function variable_struct_get_names(struct: Struct): Array[String];

/**
 * With this function you can find the total number number of variables defined for a struct. You supply the struct ID to check, and the function will return an integer value for the number of variables encountered, or (if no struct of the given ID exists) -1.
 * @returns {Real}
 * @param {Struct} struct_id - The unique ID value of the struct to check.
 */
declare function variable_struct_names_count(struct_id: Struct): Real;

/**
 * With this function you can remove a variable from a struct. You supply the struct ID to remove the variable from and the string name of the variable to be removed.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to remove the variable from
 * @param {Any} name - The name of the variable to remove (as a string)
 */
declare function variable_struct_remove(struct: Struct,name: Any): Undefined;

/**
 * With this function you can set the value of a given variable in a struct. You supply the struct reference as well as the name of the variable to set the value of as a string (see example code below), and then finally the value to set (can be any valid data type). If the variable does not exist already in the struct it will be created and then assigned the value.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to set
 * @param {Any} name - The name of the variable to set (as a string)
 * @param {Any} val - The value to set the variable to
 */
declare function variable_struct_set(struct: Struct,name: Any,val: Any): Undefined;

/**
 * With this function you can check whether a variable exists within the given struct or not. You supply the struct reference to use as well as the variable name to check for as a string (see example code below). The function will return true if a variable with the given name exists for the struct and false otherwise.
 * @returns {Bool}
 * @param {Struct} struct - The struct reference to check
 * @param {String} name - The name of the struct variable to check for (as a string)
 */
declare function struct_exists(struct: Struct,name: String): Bool;

/**
 * With this function you can check whether a variable exists within the given struct or not. . The function will return true if a variable with the given hash exists for the struct and false otherwise.
 * @returns {Bool}
 * @param {Struct} struct - The struct reference to check
 * @param {Real} hash - The hash of the struct variable to check for
 */
declare function struct_exists_from_hash(struct: Struct,hash: Real): Bool;

/**
 * With this function you can execute a method on all of the members in the struct.
 * @returns {Undefined}
 * @param {Struct} struct - The variable that holds the struct.
 * @param {Function} func - the function to execute on each member of the struct; the callback function can accept the following arguments - key and value (in this order).
 */
declare function struct_foreach(struct: Struct,func: Function): Undefined;

/**
 * With this function you can get the value from a given named variable within a struct. You supply the struct reference as well as the name of the variable to get the value of as a string (see example code below). The function will return the value held by the variable or undefined if the named variable does not exist.
 * @returns {Any}
 * @param {Struct} struct - The struct reference to use
 * @param {String} name - The name of the variable to get
 */
declare function struct_get(struct: Struct,name: String): Any;

/**
 * With this function you can get the value from a given named variable within a struct. You supply the struct reference as well as the hash of the variable to get the value of (returned from 'variable_get_hash'). The function will return the value held by the variable or undefined if the named variable does not exist.
 * @returns {Any}
 * @param {Struct} struct - The struct reference to use
 * @param {Real} hash - The hash of the variable being accessed (returned from 'variable_get_hash')
 */
declare function struct_get_from_hash(struct: Struct,hash: Real): Any;

/**
 * With this function you can retrieve an array populated with the variable names from a struct. You pass in the struct reference to check, and each entry in the array will be a string of the variable names that the struct contains.
 * @returns {Array[String]}
 * @param {Struct} struct - The struct reference to check.
 */
declare function struct_get_names(struct: Struct): Array[String];

/**
 * With this function you can find the total number number of variables defined for a struct. You supply the struct ID to check, and the function will return an integer value for the number of variables encountered, or (if no struct of the given ID exists) -1.
 * @returns {Real}
 * @param {Struct} struct_id - The unique ID value of the struct to check.
 */
declare function struct_names_count(struct_id: Struct): Real;

/**
 * With this function you can remove a variable from a struct. You supply the struct ID to remove the variable from and the string name of the variable to be removed.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to remove the variable from
 * @param {String} name - The name of the variable to remove
 */
declare function struct_remove(struct: Struct,name: String): Undefined;

/**
 * With this function you can remove a variable from a struct. You supply the struct ID to remove the variable from and the hash of the variable to be removed.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to remove the variable from
 * @param {Real} hash - The hash of the variable being removed (returned from 'variable_get_hash')
 */
declare function struct_remove_from_hash(struct: Struct,hash: Real): Undefined;

/**
 * With this function you can set the value of a given variable in a struct. You supply the struct reference as well as the name of the variable to set the value of as a string (see example code below), and then finally the value to set (can be any valid data type). If the variable does not exist already in the struct it will be created and then assigned the value.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to set
 * @param {String} name - The name of the variable to set
 * @param {Any} val - The value to set the variable to
 */
declare function struct_set(struct: Struct,name: String,val: Any): Undefined;

/**
 * With this function you can set the value of a given variable in a struct. You supply the struct reference as well as the hash of the variable to set the value of (returned from 'variable_get_hash'), and then finally the value to set (can be any valid data type). If the variable does not exist already in the struct it will be created and then assigned the value.
 * @returns {Undefined}
 * @param {Struct} struct - The struct reference to set
 * @param {Real} hash - The hash of the variable being set (returned from 'variable_get_hash')
 * @param {Any} val - The value to set the variable to
 */
declare function struct_set_from_hash(struct: Struct,hash: Real,val: Any): Undefined;

/**
 * With this function you can set whether the browser window should capture all input (set it to false) or whether the game should capture the input (set it to true). Note that this function is for use with the HTML5 module only.
 * @returns {Undefined}
 * @param {Bool} enable - None
 */
declare function browser_input_capture(enable: Bool): Undefined;

/**
 * With this function you can create a custom, clickable, icon that acts as a "button" outside of the game canvas, but within the browser window itself. The function will return an id value which must be stored in a variable to be used in all further button functions that reference the new icon. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through GameMaker itself.
 * @returns {Real}
 * @param {Real} x - The x position within the window.
 * @param {Real} y - The y position within the window.
 * @param {Real} tpe - The texture page entry for the sprite to be used.
 * @param {String} url - The URL (website address) to link to, or the script to be run.
 * @param {String} target - This is the target area to open the URL in (see description).
 * @param {Any} params - The various parameters for the icon (see description).
 */
declare function clickable_add(x: Real,y: Real,tpe: Real,url: String,target: String,params: Any): Real;

/**
 * With this function you can create a custom, clickable, icon that acts as a "button" outside of the game canvas, but within the browser window itself. The function will return an id value which must be stored in a variable to be used in all further button functions that reference the new icon. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through GameMaker itself.
 * @returns {Real}
 * @param {Real} x - The x position within the window.
 * @param {Real} y - The y position within the window.
 * @param {Real} tpe - The texture page entry for the sprite to be used.
 * @param {String} url - The URL (website address) to link to, or the script to be run.
 * @param {String} target - This is the target area to open the URL in (see description).
 * @param {Any} params - The various parameters for the icon (see description).
 * @param {Real} alpha - The image alpha of the icon (default 1).
 * @param {Real} scale - The scale of the icon (default 1).
 */
declare function clickable_add_ext(x: Real,y: Real,tpe: Real,url: String,target: String,params: Any,alpha: Real,scale: Real): Real;

/**
 * With this function you can change the sprite and position of a clickable icon previously created with clickable_add(). Please note that the position is based on the window, not the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: sprite_get_tpe()).
 * @returns {Undefined}
 * @param {Real} index - The index of the clickable icon to change.
 * @param {Real} tpe - The texture page entry for the sprite to be used.
 * @param {Real} x - The new x position within the window.
 * @param {Real} y - The new y position within the window.
 */
declare function clickable_change(index: Real,tpe: Real,x: Real,y: Real): Undefined;

/**
 * With this function you can change the sprite and position of a clickable icon previously created with clickable_add(). Bear in mind that the position is based on the window, not the canvas, (0,0) position and that the sprite must be referenced directly from the texture page (see: sprite_get_tpe()). This function also permits you to change the scale of the sprite used (as a multiplier so that 1 is the default, 0.5 would be half and 2 would be double) and the alpha value from 0 (fully transparent) to 1 (fully opaque) for the final icon on the screen.
 * @returns {Undefined}
 * @param {Real} index - The index of the clickable icon to change.
 * @param {Real} tpe - The texture page entry for the sprite to be used
 * @param {Real} x - The new x position within the window.
 * @param {Real} y - The new y position within the window.
 * @param {Real} scale - The scale of the icon (default 1).
 * @param {Real} alpha - The image alpha of the icon (default 1).
 */
declare function clickable_change_ext(index: Real,tpe: Real,x: Real,y: Real,scale: Real,alpha: Real): Undefined;

/**
 * This function must be used to remove a clickable icon previously created with clickable_add() from the game window.
 * @returns {Undefined}
 * @param {Real} index - Index of the clickable icon to remove.
 */
declare function clickable_delete(index: Real): Undefined;

/**
 * This function returns whether a clickable DOM icon has been created with the specified index exists or not. Please note, that the value used for checking must have been initialised previously or else you will get an error causing GameMaker to close.
 * @returns {Bool}
 * @param {Real} index - The index of the clickable to check.
 */
declare function clickable_exists(index: Real): Bool;

/**
 * This function lets you set the CSS style properties for the given button via the key/value pairs in the provided DS Map. You need to have previously created the both the button element (using clickable_add()) and the DS Map and supply the stored indices to each as arguments.
 * @returns {Undefined}
 * @param {Real} index - The index of the clickable icon to style.
 * @param {Undefined} map - The index of the DS Map to set the style from.
 */
declare function clickable_set_style(index: Real,map: Undefined): Undefined;

/**
 * You can use this to get the domain where your HTML5 game is being played.
 * @returns {String}
 */
declare function url_get_domain(): String;

/**
 * This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser.
 * @returns {Undefined}
 * @param {String} url - The URL (website address) to link to.
 */
declare function url_open(url: String): Undefined;

/**
 * This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The "target" parameter that you specify is the same as the standard JavaScript "name" value when you use the open() method, and you should be aware that all but "_self" may result in the browser blocking, or asking the user if they wish to allow it.
 * @returns {Undefined}
 * @param {String} url - The URL (website address) to link to.
 * @param {String} target - This is the target area to open the URL in.
 */
declare function url_open_ext(url: String,target: String): Undefined;

/**
 * This will open the specified URL on the browser of the chosen target device, or, if you are using the HTML5 module, in the currently open browser. The "target" parameter that you specify is the same as the standard JavaScript "name" value when you use the open() method (be aware that all but "_self" may result in the browser blocking, or asking the user if they wish to allow it) and the "options" is the same as the JavaScript "specs" parameter for controlling what properties the new window/tab should display (not all browsers may support all features).
 * @returns {Undefined}
 * @param {String} url - The URL (website address) to link to.
 * @param {String} target - This is the target area to open the URL in (see description).
 * @param {String} options - Standard browser options (see description).
 */
declare function url_open_full(url: String,target: String,options: String): Undefined;

/**
 * This function sets the seed to a random value. Should you need to keep a consistent value over a number of runs of a game, you should be using random_set_seed(). Please note, that when using the random number functions in GameMaker the initial seed is always the same, as this makes tracing errors and debugging far easier. Should you wish to test with true random, you should call this function at the start of your game. The function will return the new randomised seed value (an unsigned 32bit integer).
 * @returns {Undefined}
 */
declare function randomize(): Undefined;

/**
 * The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name "dot product" is derived from the centered dot "╖" that is often used to designate this operation (the alternative name "scalar product" emphasizes the scalar rather than vector nature of the result).
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first vector.
 * @param {Real} y1 - The y coordinate of the first vector.
 * @param {Real} x2 - The x coordinate of the second vector.
 * @param {Real} y2 - The y coordinate of the second vector.
 */
declare function dot_product_normalized(x1: Real,y1: Real,x2: Real,y2: Real): Real;

/**
 * The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name "dot product" is derived from the centered dot "╖" that is often used to designate this operation (the alternative name "scalar product" emphasizes the scalar rather than vector nature of the result).
 * @returns {Real}
 * @param {Real} x1 - The x coordinate of the first vector.
 * @param {Real} y1 - The y coordinate of the first vector.
 * @param {Real} z1 - The z coordinate of the first vector.
 * @param {Real} x2 - The x coordinate of the second vector.
 * @param {Real} y2 - The y coordinate of the second vector.
 * @param {Real} z2 - The z coordinate of the second vector.
 */
declare function dot_product_3d_normalized(x1: Real,y1: Real,z1: Real,x2: Real,y2: Real,z2: Real): Real;

/**
 * With this function you can set the base draw colour for the game. This value will affect all further drawing where appropriate, including fonts, forms, primitives and 3D. If any of those assets are drawn with their own colour value changed, this value will be ignored.
 * @returns {Undefined}
 * @param {Constant.Color} col - The colour to set for drawing.
 */
declare function draw_set_color(col: Color): Undefined;

/**
 * This function returns the current draw colour which is used for drawing forms, text, primitives and un-textured 3D models. This can be set with the draw_set_color() function.
 * @returns {Constant.Color}
 */
declare function draw_get_color(): Color;

/**
 * With this function you can take two colours and then merge them together to make a new colour. The amount of each of the component colours can be defined by changing the "amount" argument, where a value of 0 will return the first colour (col1), a value of 1 will return the second colour (col2) and a value in between will return the corresponding mix. For example, a value of 0.5 will mix the two colours equally. The following image illustrates how this works by merging the colours red and blue together:
 * @returns {Constant.Color}
 * @param {Constant.Color} col1 - The first colour to merge
 * @param {Constant.Color} col2 - The second colour to merge
 * @param {Real} amount - How much of each colour should be merged. For example, 0 will return col1, 1 will return col2, and 0.5 would return a merge of both colours equally
 */
declare function merge_color(col1: Color,col2: Color,amount: Real): Color;

/**
 * GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the red, the green and the blue components of the colour that you wish to make. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:
 * @returns {Constant.Color}
 * @param {Real} red - The red component of the colour
 * @param {Real} green - The green component of the colour
 * @param {Real} blue - The blue component of the colour
 */
declare function make_color_rgb(red: Real,green: Real,blue: Real): Color;

/**
 * GameMaker provides this function (as well as others) to permit the user to make their own colours. This particular function takes three component parts, the hue, the saturation and the value (also know as "luminosity") to create the colour desired. These values are taken as being between 0 and 255 so you can make 16,777,216 (256*256*256) colours with this! Below you can see an image of how these components look when separated:
 * @returns {Constant.Color}
 * @param {Real} hue - The hue of the colour
 * @param {Real} sat - How saturated the colour is
 * @param {Real} val - How dark the colour is
 */
declare function make_color_hsv(hue: Real,sat: Real,val: Real): Color;

/**
 * This function returns the amount of red used to make the given color, with the value being between 0 and 255, where 0 is no red and 255 is all red. The following image illustrates this:
 * @returns {Real}
 * @param {Constant.Color} col - The color to check
 */
declare function color_get_red(col: Color): Real;

/**
 * This function returns the amount of green used to make the given color, with the value being between 0 and 255, where 0 is no green and 255 is all green. The following image illustrates this:
 * @returns {Real}
 * @param {Constant.Color} col - The color to check
 */
declare function color_get_green(col: Color): Real;

/**
 * This function returns the amount of blue used to make the given color, with the value being between 0 and 255, where 0 is no blue and 255 is all blue. The following image illustrates this:
 * @returns {Real}
 * @param {Constant.Color} col - The color to check
 */
declare function color_get_blue(col: Color): Real;

/**
 * This function will return the hue of the given color. This is the "pure" color tone which is part of the hue, saturation and value (luminosity) method for defining a color. The following image illustrates how this value corresponds to the HSV scale of color:
 * @returns {Real}
 * @param {Constant.Color} col - The color to check
 */
declare function color_get_hue(col: Color): Real;

/**
 * This function will return the saturation of the given color. This is the amount of the color tone that is mixed into the final color and is part of the hue, saturation and value (luminosity) method for defining a color. The following image illustrates how this value corresponds to the HSV scale of color:
 * @returns {Real}
 * @param {Constant.Color} col - The color to check
 */
declare function color_get_saturation(col: Color): Real;

/**
 * This function will return the value (luminosity) of the given color. This is the amount of the "light" that is mixed into the final color and is part of the hue, saturation and value method for defining a color. The following image illustrates how this value corresponds to the HSV scale of color:
 * @returns {Real}
 * @param {Constant.Color} col - The colour to check
 */
declare function color_get_value(col: Color): Real;

/**
 * This function will draw text in a similar way to draw_text() only now you can choose the colours to use for colouring the text as well as the alpha value, and these new values will be used instead of the base drawing colour and alpha.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_color(x: Real,y: Real,string: Any,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_ext() and draw_text_colour() functions, permitting you to define gradient colours for text as well as the line spacing and maximum width per line all together.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} sep - The distance in pixels between lines of text.
 * @param {Real} w - The maximum width in pixels of the string before a line break.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_ext_color(x: Real,y: Real,string: Any,sep: Real,w: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_transformed() and draw_text_colour() functions, permitting you to scale and rotate text as well as colour it with a gradient fill and change its alpha value, ignoring the base alpha and colour settings for drawing.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} xscale - The horizontal scale.
 * @param {Real} yscale - The vertical scale.
 * @param {Real} angle - The angle of the text.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_transformed_color(x: Real,y: Real,string: Any,xscale: Real,yscale: Real,angle: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * This function is a combination of the base draw_text() function with the draw_text_ext(), draw_text_transformed() and draw_text_colour() functions. As such, this is the most general of all functions for drawing text and gives a large amount of flexibility when drawing. Note that the "width" argument is based on a scale of 1, so if the scale is different, this value should be changed proportionally. For example, if the base width for a line break is 300 and you set the scale to 2, then the text will appear wrong, over-running the given width. Instead you should have set the width to 150 to compensate the scaling.
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the drawn string.
 * @param {Real} y - The y coordinate of the drawn string.
 * @param {Any} string - The string to draw.
 * @param {Real} sep - The distance in pixels between lines of text.
 * @param {Real} w - The maximum width in pixels of the string before a line break.
 * @param {Real} xscale - The horizontal scale.
 * @param {Real} yscale - The vertical scale.
 * @param {Real} angle - The angle of the text.
 * @param {Constant.Color} c1 - The colour for the top left of the drawn text.
 * @param {Constant.Color} c2 - The colour for the top right of the drawn text.
 * @param {Constant.Color} c3 - The colour for the bottom right of the drawn text.
 * @param {Constant.Color} c4 - The colour for the bottom left of the drawn text.
 * @param {Real} alpha - The alpha for the text.
 */
declare function draw_text_ext_transformed_color(x: Real,y: Real,string: Any,sep: Real,w: Real,xscale: Real,yscale: Real,angle: Real,c1: Color,c2: Color,c3: Color,c4: Color,alpha: Real): Undefined;

/**
 * With this function you can draw a single pixel anywhere on the screen with a colour that you define. The colour settings will over-ride the base colour set with the function draw_set_colour().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the point.
 * @param {Real} y - The y coordinate of the point.
 * @param {Constant.Color} col1 - The colour of the point.
 */
declare function draw_point_color(x: Real,y: Real,col1: Color): Undefined;

/**
 * With this function you can draw a 1 pixel wide line with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Constant.Color} col1 - The colour of the start of the line.
 * @param {Constant.Color} col2 - The colour of the end of the line.
 */
declare function draw_line_color(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color): Undefined;

/**
 * With this function you can draw a line of a specific width with the colour blended between colour 1 at the first point and colour 2 at the second point. The colour settings will over-ride the base colour set with the function draw_set_colour(). Please note that the line being drawn may need different values (+/-1 on the x, y) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the start of the line.
 * @param {Real} y1 - The y coordinate of the start of the line.
 * @param {Real} x2 - The x coordinate of the end of the line.
 * @param {Real} y2 - The y coordinate of the end of the line.
 * @param {Real} w - The width in pixels of the line.
 * @param {Constant.Color} col1 - The colour of the start of the line.
 * @param {Constant.Color} col2 - The colour of the end of the line.
 */
declare function draw_line_width_color(x1: Real,y1: Real,x2: Real,y2: Real,w: Real,col1: Color,col2: Color): Undefined;

/**
 * With this function you can draw either an outline of a rectangle or a filled rectangle by defining an area where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the rectangle.
 * @param {Real} y1 - The y coordinate of the top of the rectangle.
 * @param {Real} x2 - The x coordinate of the right of the rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the rectangle.
 * @param {Constant.Color} col1 - The colour of the top left corner.
 * @param {Constant.Color} col2 - The colour of the top right corner.
 * @param {Constant.Color} col3 - The colour of the bottom right corner.
 * @param {Constant.Color} col4 - The colour of the bottom left corner.
 * @param {Bool} outline - Whether the rectangle is an outline (true) or filled in (false).
 */
declare function draw_rectangle_color(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color,col3: Color,col4: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If it is filled you can define the individual colours for the centre and the edges, and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).You can define how precise the drawing of the corners is with the function draw_set_circle_precision(), but the corners are always drawn with a fixed radius. Should you need to change the corner radius you should use the function draw_roundrect_colour_ext(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the rounded rectangle.
 * @param {Real} y1 - The y coordinate of the top of the rounded rectangle.
 * @param {Real} x2 - The x coordinate of the right of the rounded rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the rounded rectangle.
 * @param {Constant.Color} col1 - The center colour.
 * @param {Constant.Color} col2 - The outside edge colour.
 * @param {Bool} outline - Whether the rectangle is an outline (true) or filled in (false).
 */
declare function draw_roundrect_color(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a rounded rectangle or a filled rounded rectangle where the (x1,y1) position is the top left corner and the (x2,y2) position is the bottom right corner. If the rectangle is filled, then the colour arguments will be used to generate a colour gradient from the centre to the edges, where colour 1 is the centre colour and colour 2 the edge colour. You must also supply radius values for the x and y axis (in pixels) and the corners will be rounded by these amounts. You can define how precise the drawing of the corners is with the function draw_set_circle_precision(). Please note that the rectangle being drawn may need different values (+/-1 on the x, y, or width or height) to be drawn with the desired dimensions due to differences across the various supported platforms.
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the rounded rectangle.
 * @param {Real} y1 - The y coordinate of the top of the rounded rectangle.
 * @param {Real} x2 - The x coordinate of the right of the rounded rectangle.
 * @param {Real} y2 - The y coordinate of the bottom of the rounded rectangle.
 * @param {Real} xrad - The radius of the curve along the x axis from the rectangle corners.
 * @param {Real} yrad - The radius of the curve along the y axis from the rectangle corners.
 * @param {Constant.Color} col1 - The center colour.
 * @param {Constant.Color} col2 - The outside edge colour.
 * @param {Bool} outline - Whether the rectangle is an outline (true) or filled in (false).
 */
declare function draw_roundrect_color_ext(x1: Real,y1: Real,x2: Real,y2: Real,xrad: Real,yrad: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a triangle or a filled triangle. If it is filled you can define the individual colours for each corner point and if these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()).
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the triangle's first corner.
 * @param {Real} y1 - The y coordinate of the triangle's first corner.
 * @param {Real} x2 - The x coordinate of the triangle's second corner.
 * @param {Real} y2 - The y coordinate of the triangle's second corner.
 * @param {Real} x3 - The x coordinate of the triangle's third corner.
 * @param {Real} y3 - The y coordinate of the triangle's third corner.
 * @param {Constant.Color} col1 - The colour of the first corner.
 * @param {Constant.Color} col2 - The colour of the second corner.
 * @param {Constant.Color} col3 - The colour of the third corner.
 * @param {Bool} outline - Whether the triangle is an outline (true) or filled in (false).
 */
declare function draw_triangle_color(x1: Real,y1: Real,x2: Real,y2: Real,x3: Real,y3: Real,col1: Color,col2: Color,col3: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of a circle or a filled circle, and if it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other and the colour settings will over-ride the base colour set with the function draw_set_colour(). You can define how precise the drawing is with the function draw_set_circle_precision().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the center of the circle.
 * @param {Real} y - The y coordinate of the center of the circle.
 * @param {Real} r - The radius (distance from center to edge) of the circle in pixels.
 * @param {Constant.Color} col1 - The colour at the center of the circle.
 * @param {Constant.Color} col2 - The colour at the edge of the circle.
 * @param {Bool} outline - Whether the circle is an outline (true) or not (false). If true, col1 is irrelevant.
 */
declare function draw_circle_color(x: Real,y: Real,r: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * With this function you can draw either an outline of an ellipse or a filled ellipse by defining a rectangular area that will then have the ellipse created to fit. If it is filled you can define the interior and exterior fill colours. If these colours are not the same, you will get a gradient effect from one to the other (the colour settings will over-ride the base colour set with the function draw_set_colour()). You can define how precise the drawing is with the function draw_set_circle_precision().
 * @returns {Undefined}
 * @param {Real} x1 - The x coordinate of the left of the ellipse.
 * @param {Real} y1 - The y coordinate of the top of the ellipse.
 * @param {Real} x2 - The x coordinate of the right of the ellipse.
 * @param {Real} y2 - The y coordinate of the bottom of the ellipse.
 * @param {Constant.Color} col1 - The colour of the center.
 * @param {Constant.Color} col2 - The colour of the edge.
 * @param {Bool} outline - Whether the ellipse is an outline (true) or filled in (false).
 */
declare function draw_ellipse_color(x1: Real,y1: Real,x2: Real,y2: Real,col1: Color,col2: Color,outline: Bool): Undefined;

/**
 * This function defines the position of a vertex for a primitive, with its own colour and alpha setting. The final look of the primitive will depend on the primitive type chosen to draw and the order with which you add the vertexes to it (see draw_primitive_begin() for more information) and the vertexes with different colours and alphas will blend smoothly from one to the other. To end and draw the primitive you must call draw_primitive_end().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the vertex.
 * @param {Real} y - The y coordinate of the vertex.
 * @param {Constant.Color} col - The colour to draw this vertex with.
 * @param {Real} alpha - The alpha to draw this vertex with (0-1).
 */
declare function draw_vertex_color(x: Real,y: Real,col: Color,alpha: Real): Undefined;

/**
 * This function lets you pre-cache a character glyph from a font. If you don't pre-cache a character using this function, it's automatically cached before it's drawn for the first time.
 * @returns {Undefined}
 * @param {Asset.GMFont} font - The font to cache a character or glyph from
 * @param {Real} glyph_index - The index (or character code) of the glyph to cache (see ord/string_ord_at)
 */
declare function font_cache_glyph(font: GMFont,glyph_index: Real): Undefined;

/**
 * This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See draw_primitive_begin() for more information), the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value of -1 (or c_white) may be used for the colour argument. To end and draw the primitive you must call draw_primitive_end().
 * @returns {Undefined}
 * @param {Real} x - The x coordinate of the vertex.
 * @param {Real} y - The y coordinate of the vertex.
 * @param {Real} xtex - The x coordinate within the texture.
 * @param {Real} ytex - The y coordinate within the texture.
 * @param {Constant.Color} col - The colour to blend with the texture at this vertex (-1 or c_white for no blending).
 * @param {Real} alpha - The alpha to draw this vertex with (0-1).
 */
declare function draw_vertex_texture_color(x: Real,y: Real,xtex: Real,ytex: Real,col: Color,alpha: Real): Undefined;

/**
 * With this function you can get the height (in pixels) of the GUI as used in the Draw GUI Event.
 * @returns {Real}
 */
declare function display_get_gui_height(): Real;

/**
 * This function can set the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:
 * @returns {Undefined}
 * @param {Constant.Color} colour - The colour to set the region.
 */
declare function window_set_color(colour: Color): Undefined;

/**
 * This function returns the background colour of the game window. This colour represents that which will be used for those areas of the game window that are not occupied by any views. The following image illustrates this:
 * @returns {Constant.Color}
 */
declare function window_get_color(): Color;

/**
 * This function is used to set a particle type to be a single colour for the total duration of the lifetime of each individual particle.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The single colour to make the particle type.
 */
declare function part_type_color1(ind: ParticleType,colour1: Color): Undefined;

/**
 * This function can be used to set a two colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one on which the particle will end with, and a smooth gradient change will occur to the colour over the particles lifetime from one colour to the other.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The colour the particle will start at.
 * @param {Constant.Color} colour2 - The colour the particle will end at.
 */
declare function part_type_color2(ind: ParticleType,colour1: Color,colour2: Color): Undefined;

/**
 * This function can be used to set a three colour gradient for each particle created of the given type. The first colour is that which all particles will start with, and the second colour is the one that will be blended to half way through its lifetime and the third colour is the one with which the particle will end with. A smooth gradient change will occur through the colours over the particles lifetime from one colour to the other.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The colour the particle will start at.
 * @param {Constant.Color} colour2 - The colour the particle will be halfway through its lifespan.
 * @param {Constant.Color} colour3 - The colour the particle will end at.
 */
declare function part_type_color3(ind: ParticleType,colour1: Color,colour2: Color,colour3: Color): Undefined;

/**
 * With this function you can set the given particle type to be a random blend of two colours.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Constant.Color} colour1 - The first colour the blend will take from.
 * @param {Constant.Color} colour2 - The second colour the blend will take from.
 */
declare function part_type_color_mix(ind: ParticleType,colour1: Color,colour2: Color): Undefined;

/**
 * With this function you can set the mix of red, green and blue colours for all particles created of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. All values must be between 0 and 255.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} rmin - The minimum the final colour's red component can be.
 * @param {Real} rmax - The maximum the final colour's red component can be.
 * @param {Real} gmin - The minimum the final colour's green component can be.
 * @param {Real} gmax - The maximum the final colour's green component can be.
 * @param {Real} bmin - The minimum the final colour's blue component can be.
 * @param {Real} bmax - The maximum the final colour's blue component can be.
 */
declare function part_type_color_rgb(ind: ParticleType,rmin: Real,rmax: Real,gmin: Real,gmax: Real,bmin: Real,bmax: Real): Undefined;

/**
 * With this function you can set a hue, saturation and value range for all particles of the given type. You supply a minimum value and a maximum value for each of the three components and the particles created will have a random colour based on the given range of parameters. In this way you can create particles of the same hue but different saturations, or of different hues but the same value (luminosity) etc... All values must be between 0 and 255.
 * @returns {Undefined}
 * @param {Id.ParticleType} ind - The index of the particle type to change.
 * @param {Real} hmin - The minimum the final colour's hue component can be.
 * @param {Real} hmax - The maximum the final colour's hue component can be.
 * @param {Real} smin - The minimum the final colour's saturation component can be.
 * @param {Real} smax - The maximum the final colour's saturation component can be.
 * @param {Real} vmin - The minimum the final colour's value component can be.
 * @param {Real} vmax - The maximum the final colour's value component can be.
 */
declare function part_type_color_hsv(ind: ParticleType,hmin: Real,hmax: Real,smin: Real,smax: Real,vmin: Real,vmax: Real): Undefined;

/**
 * This function draws the given particle system.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system to draw.
 */
declare function part_system_drawit(ind: ParticleSystem): Undefined;

/**
 * This function is ideal for those effects that do not require any of the functionality offered by particle emitters (for example, to create smoke from a missile, or a simple explosion effect) as it permits you to quickly and easily create particles at any position in the game room. You can also colour the particles "on the fly" as they are created with this function, and this colour will over-ride the predefined colour of the particle, but it does not blend this colour over the particles lifetime. Note that you must have created the particle system and the particle type previously for this function to be used.
 * @returns {Undefined}
 * @param {Id.ParticleSystem} ind - The index of the particle system.
 * @param {Real} x - The x coordinate of where to create the particles.
 * @param {Real} y - The y coordinate of where to create the particles.
 * @param {Id.ParticleType} parttype - The index (type) of the particles to be created.
 * @param {Constant.Color} colour - The colour blending for the particles.
 * @param {Real} number - The number of particles to create.
 */
declare function part_particles_create_color(ind: ParticleSystem,x: Real,y: Real,parttype: ParticleType,colour: Color,number: Real): Undefined;

/**
 * With this function you can switch on or off the colour channels and the alpha channel for all further drawing. For example, you can use this function to create alpha-channel only surfaces (switch off the RGB writing before using the surface), or to create special effects while drawing to the screen. The default value for each of the components is true, and can be supplied as either four unique arguments or as a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled):
 * @returns {Undefined}
 * @param {Any} red - Enable/disable the red channel
 * @param {Bool} green - Enable/disable the green channel
 * @param {Bool} blue - Enable/disable the blue channel
 * @param {Bool} alpha - Enable/disable the alpha channel
 */
declare function gpu_set_colorwriteenable(red: Any,green: Bool,blue: Bool,alpha: Bool): Undefined;

/**
 * This function can be used to retrieve the current colour write-enable values. The function returns a 4 element 1D array with the following elements in it which will be either true (enabled) or false (disabled). By default all colour writing is set to true:
 * @returns {Array[Bool]}
 */
declare function gpu_get_colorwriteenable(): Array[Bool];

/**
 * This function can be used to set the colour of the LEDs within a PlayStation controller. You specify the device slot to set, and then give a colour, which can be any of the colour constants or a colour value created using the specific colour functions or a HEX value(like $FFFFFFF).
 * @returns {Undefined}
 * @param {Real} device - Which gamepad device "slot" to set.
 * @param {Constant.Color} color - The color to use.
 */
declare function gamepad_set_color(device: Real,color: Color): Undefined;

/**
 * When you bind a fixture to an instance using physics_fixture_bind() this returns an "id" for the bound fixture.
 * @returns {Real}
 * @param {Id.PhysicsIndex} fixture - None
 */
declare function physics_get_friction(fixture: PhysicsIndex): Real;

/**
 * With this function you can retrieve the mass of an entire group of particles. The group value is that which was returned when you created the group of particles using the function physics_particle_group_end().
 * @returns {Real}
 * @param {Id.PhysicsParticleGroup} group - None
 */
declare function physics_particle_group_get_mass(group: PhysicsParticleGroup): Real;

/**
 * This function resets the shader used for drawing and should be called when you no longer wish to use the current shader (set using shader_set()).
 * @returns {Undefined}
 */
declare function shader_reset(): Undefined;

/**
 * With this function you can set a shader constant to hold an array of values. You must previously have gotten the "handle" of the constant using the function shader_get_uniform(), and you will have to have previously initialised the array.
 * @returns {Undefined}
 * @param {Id.Uniform} uniform_id - The handle of the shader constant to set.
 * @param {Array[Real]} array - A previously initialised array of integer values.
 */
declare function shader_set_uniform_i_array(uniform_id: Uniform,array: Array[Real]): Undefined;

/**
 * Tell GameMaker to accept colour data as part of the new vertex format being created.
 * @returns {Undefined}
 */
declare function vertex_format_add_color(): Undefined;

/**
 * If your defined vertex format takes a colour value you can use this function to add that data to the vertex being defined for the current primitive. The function needs a buffer to store the data in and will take either a colour constant, or a hex value (using the standard GameMaker format of BGR, eg: $FF0000 for blue) as well as an alpha value from 0 (transparent) to 1 (fully opaque).
 * @returns {Undefined}
 * @param {Id.VertexBuffer} buffer - The buffer to write the information to.
 * @param {Constant.Color} color - The colour for this vertex (can be a constant or a hex value).
 * @param {Real} alpha - The alpha value for the vertex (from 0 to 1).
 */
declare function vertex_color(buffer: VertexBuffer,color: Color,alpha: Real): Undefined;

/**
 * When you create you skeletal animation sprite, you can assign attachment slots and attachments to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at run-time using a sprite asset from your game. the function requires that you give the attachment a name (as a string) and then set the sprite_index and image_index to use, as well as the x and y origin (which can be different to that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached, as well as the colour to be blended with the image and it's alpha (transparency) value. If the attachment was successfully created the function will return 1 and if it was not (you supplied an invalid sprite index, or the base sprite is not a Spine sprite) then it will return -1.
 * @returns {Undefined}
 * @param {String} name - The name (as a string) of the attachment to create.
 * @param {Asset.GMSprite} sprite - The sprite_index to get the attachment image from.
 * @param {Real} ind - The image_index to get the attachment image from.
 * @param {Real} xorigin - The x origin for the image being used.
 * @param {Real} yorigin - The y origin for the image being used.
 * @param {Real} xscale - The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} yscale - The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half etc...
 * @param {Real} rot - The rotation of the image: 0 = normal, 90 = turned 90░ counter-clockwise etc.
 * @param {Constant.Color} colour - The colour value to use (A constant, integer or hex value).
 * @param {Real} alpha - The alpha value to use (from 0 to 1).
 */
declare function skeleton_attachment_create_color(name: String,sprite: GMSprite,ind: Real,xorigin: Real,yorigin: Real,xscale: Real,yscale: Real,rot: Real,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can set an attachment slot colour and alpha so all sprites attached to it will be drawn with these blend values. Keep in mind that the instance sprite can have a blend colour and alpha setting (image_blend and image_alpha), as can the attachment (see the function skeleton_attachment_create_colour()), and so the final colour and alpha that the assigned attachment sprite for the slot will have will be a composite of all these values.
 * @returns {Undefined}
 * @param {String} slot - The slot name to set, a string
 * @param {Constant.Color} colour - The colour to set, either an integer, a constant, or a hex value.
 * @param {Real} alpha - The alpha to set from 0 to 1.
 */
declare function skeleton_slot_color_set(slot: String,colour: Color,alpha: Real): Undefined;

/**
 * With this function you can get an attachment slot colour. You supply the slot name (a string) and the function will return an integer value for the colour.
 * @returns {Real}
 * @param {String} slot - The slot name to check, a string
 */
declare function skeleton_slot_color_get(slot: String): Real;

/**
 * This function can be used to retrieve all the frames for the given event, in the given animation.
 * @returns {Array[Real]}
 * @param {String} anim_name - None
 * @param {String} event_name - None
 */
declare function skeleton_animation_get_event_frames(anim_name: String,event_name: String): Array[Real];

/**
 * This function is used to enable (true) or disable (false) per-slot blend modes for skeletal sprites.
 * @returns {Undefined}
 * @param {Bool} enable - None
 */
declare function draw_enable_skeleton_blendmodes(enable: Bool): Undefined;

/**
 * This function returns whether per-slot blend modes for skeletal sprites are enabled (true) or disabled (false).
 * @returns {Bool}
 */
declare function draw_get_enable_skeleton_blendmodes(): Bool;

/**
 * This function can be used to retrieve the Z depth set for rendering layers within the room.
 * @returns {Bool}
 */
declare function layer_get_forced_depth(): Bool;

/**
 * Using this function you can set the sprite index of the background element.
 * @returns {Undefined}
 * @param {Id.BackgroundElement} background_element_id - None
 * @param {Asset.GMSprite} sprite - None
 */
declare function layer_background_change(background_element_id: BackgroundElement,sprite: GMSprite): Undefined;

/**
 * This function checks if one or more tag strings is assigned to any asset from the Asset Browser.
            
            You supply either the asset name (as a string) or its asset index, as well as either a single tag string or an array where each item is a single tag string. If you supply an asset index value, then you will need to supply the optional asset type argument (a constant), as assets of different types can have the same index, even though they cannot have the same name.
            
 * @returns {Bool}
 * @param {Any} asset_name_or_id - The name of the asset (a string) or its index value (an integer).
 * @param {Any} tags - A single asset tag string or an array with various asset tags.
 * @param {Constant.AssetType} asset_type - OPTIONAL! The type of asset to check the tags for, only used when supplying an index for the first argument.
 */
declare function asset_has_any_tag(asset_name_or_id: Any,tags: Any,asset_type: AssetType): Bool;

/**
 * This function returns the total number of options that exist in the extension with the given name.
            
            The function will return undefined if the provided extension name is invalid.
 * @returns {Real}
 * @param {String} extension_name - The name of your extension asset as a string
 */
declare function extension_get_option_count(extension_name: String): Real;

/**
 * This function returns an array containing the names of all the options that exist in the extension with the given name.
            
            The function will return undefined if the provided extension name is invalid.
 * @returns {Array.String}
 * @param {String} extension_name - The name of your extension asset as a string
 */
declare function extension_get_option_names(extension_name: String): Array.String;

/**
 * This function returns the value of the given option in the extension with the given name.
            
            The function will return undefined if the provided extension name is invalid.
 * @returns {Any}
 * @param {String} extension_name - The name of your extension asset as a string
 * @param {String} option_name - The name of the option to read
 */
declare function extension_get_option_value(extension_name: String,option_name: String): Any;

/**
 * This function returns a struct containing all the options, and their values, for the extension with the given name.
            
            The function will return undefined if the provided extension name is invalid.
 * @returns {Struct}
 * @param {String} extension_name - The name of your extension asset as a string
 */
declare function extension_get_options(extension_name: String): Struct;

/**
 * This function tells whether an extension with the given name exists (true) or not (false).
 * @returns {Bool}
 * @param {String} extension_name - The name of your extension asset as a string
 */
declare function extension_exists(extension_name: String): Bool;

/**
 * This functions gets the version of an Extension Asset with the given name, and returns it as a string formatted as "major.minor.revision".
 * @returns {String}
 * @param {String} extension_name - The name of the extension
 */
declare function extension_get_version(extension_name: String): String;

/**
 * This function returns if the given Animation Curve Asset or Animation Curve Struct exists and is a valid Animation Curve.
 * @returns {Bool}
 * @param {Any} curve_struct_or_id - The Animation Curve asset or struct that will be checked.
 */
declare function animcurve_exists(curve_struct_or_id: Any): Bool;

/**
 * With this function you can check the weak reference to a struct to see if it is still "alive" or not.
 * @returns {Bool}
 * @param {Struct.WeakRef} weak_ref - None
 */
declare function weak_ref_alive(weak_ref: WeakRef): Bool;

/**
 * This function is used to create a new FX Struct for a given effect type, which contains information on the effect and the values for its parameters.
 * @returns {Struct.Fx}
 * @param {String} filter_or_effect_name - The name of the filter/effect to create (as a string).
 */
declare function fx_create(filter_or_effect_name: String): Fx;

/**
 * This function is used to retrieve the name of a filter/effect from its struct.
 * @returns {String}
 * @param {Struct.Fx} filter_or_effect - The FX struct to get the name of
 */
declare function fx_get_name(filter_or_effect: Fx): String;

/**
 * This function is used to retrieve the name of a filter/effect from its struct.
 * @returns {Array[String]}
 * @param {Struct.Fx} filter_or_effect - The FX struct to get the parameter names of
 */
declare function fx_get_parameter_names(filter_or_effect: Fx): Array[String];

/**
 * This function is used to retrieve the value of a parameter from an FX Struct.
 * @returns {Any}
 * @param {Struct.Fx} filter_or_effect - The FX struct to get the parameter from
 * @param {String} parameter_name - The FX struct to get the parameter from
 */
declare function fx_get_parameter(filter_or_effect: Fx,parameter_name: String): Any;

/**
 * This function is used to retrieve a struct containing all the parameters for the given FX struct.
 * @returns {Struct}
 * @param {Struct.Fx} filter_or_effect - The FX struct to get the parameter from
 */
declare function fx_get_parameters(filter_or_effect: Fx): Struct;

/**
 * Returns if the filter or effect is forced on a single layer.
 * @returns {Bool}
 * @param {Struct.Fx} filter_or_effect - The FX struct to get the parameter from
 */
declare function fx_get_single_layer(filter_or_effect: Fx): Bool;

/**
 * This function is used to change the value of a parameter in the given FX struct. You specify an FX struct (as returned from fx_create() or layer_get_fx()), a parameter name as a string, and its new value.
 * @returns {Undefined}
 * @param {Struct.Fx} filter_or_effect - The FX struct to modify
 * @param {String} parameter_name - The name of the parameter to change the value of (as a string)
 * @param {Any} val - The new value(s) for that parameter as a real or array
 */
declare function fx_set_parameter(filter_or_effect: Fx,parameter_name: String,val: Any): Undefined;

/**
 * This function is used to change the parameters of a filter/effect. You specify an FX struct (as returned from fx_create() or layer_get_fx()) and a struct containing its parameters (as returned from fx_get_parameters()).
 * @returns {Undefined}
 * @param {Struct.Fx} filter_or_effect - The FX struct to modify
 * @param {Struct} parameter_struct - A struct containing the parameters for the filter/effect
 */
declare function fx_set_parameters(filter_or_effect: Fx,parameter_struct: Struct): Undefined;

/**
 * This function is used to force a filter or effect onto a single layer.
 * @returns {Undefined}
 * @param {Struct.Fx} filter_or_effect - The FX struct to modify
 * @param {Bool} enable - Flag for if the filter or effect should be forced on a single layer.
 */
declare function fx_set_single_layer(filter_or_effect: Fx,enable: Bool): Undefined;

/**
 * This function is used to assign an FX struct to a Room Layer.
 * @returns {Undefined}
 * @param {Any} layer_name_or_id - The name or ID of the layer to modify
 * @param {Struct.Fx} filter_or_effect - The FX struct to modify
 */
declare function layer_set_fx(layer_name_or_id: Any,filter_or_effect: Fx): Undefined;

/**
 * This function is used to retrieve the FX struct for a layer.
 * @returns {Struct.Fx}
 * @param {Any} layer_name_or_id - The name or ID of the layer to modify
 */
declare function layer_get_fx(layer_name_or_id: Any): Fx;

/**
 * This function is used to clear the FX struct that is applied to the specified layer.
 * @returns {Undefined}
 * @param {Any} layer_name_or_id - The name or ID of the layer to modify
 */
declare function layer_clear_fx(layer_name_or_id: Any): Undefined;

/**
 * This function is used to enable FX for a specified layer.
 * @returns {Undefined}
 * @param {Any} layer_name_or_id - The name or ID of the layer to modify
 * @param {Bool} enable - Enabled
 */
declare function layer_enable_fx(layer_name_or_id: Any,enable: Bool): Undefined;

/**
 * This function is used to check if FX is enabled for a specified layer.
 * @returns {Bool}
 * @param {Any} layer_name_or_id - The name or ID of the layer to modify
 */
declare function layer_fx_is_enabled(layer_name_or_id: Any): Bool;

/**
 * This function defines the object to use for players in rollback multiplayer.
 * @returns {Undefined}
 * @param {Asset.GMObject} player_object - The object type that should be used for players
 * @param {String} layer_name - The layer name to assign the created instance to (default is "Instances")
 */
declare function rollback_define_player(player_object: GMObject,layer_name: String): Undefined;

/**
 * This function defines the input to be used by the rollback system.
 * @returns {Undefined}
 * @param {Struct} input_struct - Struct containing the keycodes to track
 */
declare function rollback_define_input(input_struct: Struct): Undefined;

/**
 * This function defines the mocked input to be used by the rollback system during sync test.
 * @returns {Undefined}
 * @param {Real} player_id - The player id to set the mock input for
 * @param {Struct} input_struct - Struct containing the keycodes to mock
 */
declare function rollback_define_mock_input(player_id: Real,input_struct: Struct): Undefined;

/**
 * This function sets a fixed local input frame delay.
 * @returns {Undefined}
 * @param {Real} delay - Number of frames to use for local input frame delay
 */
declare function rollback_define_input_frame_delay(delay: Real): Undefined;

/**
 * This function sets an extra latency to be added to all sent and received network messages. This can be used to simulate worse network conditions for the local player.
 * @returns {Undefined}
 * @param {Real} latency - Number of ms of latency to add
 */
declare function rollback_define_extra_network_latency(latency: Real): Undefined;

/**
 * This function enables manual start, meaning that the game will not automatically start once everyone is connected and instead wait for rollback_start_game to be called.
 * @returns {Undefined}
 */
declare function rollback_use_manual_start(): Undefined;

/**
 * This function connects to GXC and creates a game instance of the specified size. The user needs to be signed in to GXC.
 * @returns {Undefined}
 * @param {Real} num_players - The number of players to request space for
 * @param {Bool} sync_test - Flag to enable sync test for development (optional, default is true)
 * @param {String} region - Name of a region to connect to
 */
declare function rollback_create_game(num_players: Real,sync_test: Bool,region: String): Undefined;

/**
 * This function checks if the game was started via an invite to a GXC game and if so joins it.
 * @returns {Bool}
 * @param {Bool} dry_run - Flag to only check if you should join without actually doing it
 */
declare function rollback_join_game(dry_run: Bool): Bool;

/**
 * This function starts the current game.
 * @returns {Undefined}
 */
declare function rollback_start_game(): Undefined;

/**
 * This function leaves the current game.
 * @returns {Undefined}
 */
declare function rollback_leave_game(): Undefined;

/**
 * This function returns a struct containing fields w,a,s,d,z,x,c,space,up,left,down,right and the corresponding last_? fields for last frames input.
 * @returns {Struct}
 * @param {Real} player_id - The player id to get the input for
 */
declare function rollback_get_input(player_id: Real): Struct;

/**
 * This function sends a chat message.
 * @returns {Undefined}
 * @param {String} message - The content of the message (maximum of 128 bytes allowed).
 * @param {Real} to - The player which the message is sent to. If left unspecified the message will be sent to everyone in the game.
 */
declare function rollback_chat(message: String,to: Real): Undefined;

/**
 * This function is used to enable player preferences and needs to be called before joining or creating a rollback game. When using this feature the game won't autostart and instead require rollback_start_game to be called after all players have set their preferences.
 * @returns {Undefined}
 * @param {Any} default - Default player preferences
 */
declare function rollback_use_player_prefs(default: Any): Undefined;

/**
 * This function is used to update the local player preferences. Preferences can only be set after joining or creating a game, but before starting the game.
 * @returns {Undefined}
 * @param {Any} default - Player preferences
 */
declare function rollback_set_player_prefs(default: Any): Undefined;

/**
 * This function is used to get the preferences for a given player. Undefined will be returned if no preferences have been set. If the player id argument is not given, the preferences for the local player will be returned.
 * @returns {Any}
 * @param {Real} player id - Player id
 */
declare function rollback_get_player_prefs(player id: Real): Any;

/**
 * This function returns a struct containing player_name and avatar_url for the player.
 * @returns {Struct}
 * @param {Real} player_id - The player id to get the info for
 */
declare function rollback_get_info(player_id: Real): Struct;

/**
 * This function switches random input for other players in sync test.
 * @returns {Undefined}
 * @param {Bool} enabled - Flag to enable random input for other players in sync test
 */
declare function rollback_use_random_input(enabled: Bool): Undefined;

/**
 * This function sets if the default display of rollback events should be used or not. Default value is true.
 * @returns {Undefined}
 * @param {Bool} enabled - Flag to enable default display of events
 */
declare function rollback_display_events(enabled: Bool): Undefined;

/**
 * Synchronize the rollback game on the current frame. This means that we will only proceed past the current frame if all inputs are confirmed. Returns true if successful, false if the current frame will be rerun.
 * @returns {Bool}
 */
declare function rollback_sync_on_frame(): Bool;

/**
 * Set config for live wallpaper
 * @returns {Undefined}
 * @param {Any} default - Config
 */
declare function wallpaper_set_config(default: Any): Undefined;

/**
 * Set subscriptions for live wallpaper
 * @returns {Undefined}
 * @param {Any} default - Subscriptions
 */
declare function wallpaper_set_subscriptions(default: Any): Undefined;

/**
 * Creates a new time source, returning its index.
 * @returns {Id.TimeSource}
 * @param {Any} parent - The parent of the time source
 * @param {Real} period - The period of the time source
 * @param {Constant.TimeSourceUnits} units - The units that the period is measured in
 * @param {Function} callback - The callback to be invoked when the time source expires
 * @param {Array} args - The arguments to be passed to the callback
 * @param {Real} reps - The number of repetitions the time source should perform
 * @param {Constant.TimeSourceExpiryType} expiry_type - The expiry type of the time source
 */
declare function time_source_create(parent: Any,period: Real,units: TimeSourceUnits,callback: Function,args: Array,reps: Real,expiry_type: TimeSourceExpiryType): TimeSource;

/**
 * Destroys the time source, as long as it has no children.
 * @returns {Undefined}
 * @param {Any} id - The index of the time source
 * @param {Bool} destroy_tree - Whether to destroy all of the children of the time source too
 */
declare function time_source_destroy(id: Any,destroy_tree: Bool): Undefined;

/**
 * Starts/Resumes the time source and all of its children.
 * @returns {Undefined}
 * @param {Any} id - The index of the time source
 */
declare function time_source_start(id: Any): Undefined;

/**
 * Stops the time source and all of its children.
 * @returns {Undefined}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_stop(id: TimeSource): Undefined;

/**
 * Pauses the time source and all of its children.
 * @returns {Undefined}
 * @param {Any} id - The index of the time source
 */
declare function time_source_pause(id: Any): Undefined;

/**
 * Resumes a time source and all of its children.
 * @returns {Undefined}
 * @param {Any} id - The index of the time source
 */
declare function time_source_resume(id: Any): Undefined;

/**
 * Resets the time source and all of its children.
 * @returns {Undefined}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_reset(id: TimeSource): Undefined;

/**
 * Resets and reconfigures the time source. Additionally resets all of the time source's children. 
 * @returns {Undefined}
 * @param {Id.TimeSource} id - The index of the time source
 * @param {Real} period - The period of the time source
 * @param {Constant.TimeSourceUnits} units - The units that the period is measured in
 * @param {Function} callback - The callback to be invoked when the time source expires
 * @param {Array} args - The arguments to be passed to the callback
 * @param {Real} reps - The number of repetitions the time source should perform
 * @param {Constant.TimeSourceExpiryType} expiry_type - The expiry type of the time source
 */
declare function time_source_reconfigure(id: TimeSource,period: Real,units: TimeSourceUnits,callback: Function,args: Array,reps: Real,expiry_type: TimeSourceExpiryType): Undefined;

/**
 * Returns the period of the time source, measured in its own units.
 * @returns {Real}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_get_period(id: TimeSource): Real;

/**
 * Returns the number of repetitions the time source has completed so far.
 * @returns {Real}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_get_reps_completed(id: TimeSource): Real;

/**
 * Returns the number of repetitions the time source has left to complete.
 * @returns {Real}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_get_reps_remaining(id: TimeSource): Real;

/**
 * Returns the units that the time source is measuring in.
 * @returns {Constant.TimeSourceUnits}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_get_units(id: TimeSource): TimeSourceUnits;

/**
 * Returns the time left before the next expiry of the time source, measured in its own units.
 * @returns {Real}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_get_time_remaining(id: TimeSource): Real;

/**
 * Returns the current active state of the time source.
 * @returns {Constant.TimeSourceState}
 * @param {Any} id - The index of the time source
 */
declare function time_source_get_state(id: Any): TimeSourceState;

/**
 * Returns the index of the parent of this time source.
 * @returns {Id.TimeSource}
 * @param {Id.TimeSource} id - The index of the time source
 */
declare function time_source_get_parent(id: TimeSource): TimeSource;

/**
 * Returns an array containing all of the indexes of the children of this time source.
 * @returns {Array[Id.TimeSource]}
 * @param {Any} id - The index of the time source
 */
declare function time_source_get_children(id: Any): Array[TimeSource];

/**
 * Returns true if the given index corresponds to an existing time source.
 * @returns {Bool}
 * @param {Any} id - The index of the time source
 */
declare function time_source_exists(id: Any): Bool;

/**
 * Converts a period in seconds to its equivalent frequency in beats-per-minute.
 * @returns {Real}
 * @param {Real} seconds - The value to be converted
 */
declare function time_seconds_to_bpm(seconds: Real): Real;

/**
 * Converts a frequency in beats-per-minute to its equivalent period in seconds.
 * @returns {Real}
 * @param {Real} bpm - The value to be converted
 */
declare function time_bpm_to_seconds(bpm: Real): Real;

/**
 * Invokes a callback after the specified time. Returns a handle which can be used to cancel the call.
 * @returns {Id.TimeSource}
 * @param {Real} period - How long to wait before invoking the callback
 * @param {Constant.TimeSourceUnits} units - The units that the period is measured in
 * @param {Function} callback - The callback to be invoked
 * @param {Bool} repeat - Whether this should repeat indefinitely
 */
declare function call_later(period: Real,units: TimeSourceUnits,callback: Function,repeat: Bool): TimeSource;

/**
 * Cancels a delayed call set up by call_later.
 * @returns {Undefined}
 * @param {Id.TimeSource} handle - The handle of the call to cancel
 */
declare function call_cancel(handle: TimeSource): Undefined;

/**
 * Starts recording the input depending on the provided filter flags.
 * @returns {Undefined}
 * @param {Constant.DebugInputFilter} filter - The input filter bit mask to use. This can be a combination of `debug_input_filter_` constants.
 */
declare function debug_input_record(filter: DebugInputFilter): Undefined;

/**
 * Saves the input currently being recorded. This will stop the current recording.
 * @returns {Undefined}
 * @param {String} filename - The path to where the recorded input should be saved to.
 */
declare function debug_input_save(filename: String): Undefined;

/**
 * Playsback a previously recorded input.
 * @returns {Undefined}
 * @param {String} filename - The path to the file containing a previously recorded input
 */
declare function debug_input_playback(filename: String): Undefined;

/**
 * This will attempt to re-validate the Mac AppStore receipt and will generate an async system event of type receipt_validation.
 * @returns {Undefined}
 */
declare function mac_refresh_receipt_validation(): Undefined;

/**
 * This function returns the format of the given surface. All formats are listed in our manual.
 * @returns {Constant.SurfaceFormatType}
 * @param {Id.Surface} surface_id - The ID of the surface to get the format of
 */
declare function surface_get_format(surface_id: Surface): SurfaceFormatType;

/**
 * This function returns the frequency (or refresh rate) of the display that the game is being played on. It will return a real value as frames-per-second, so for example if your monitor is 60hz you will get 60, if it's running at 144hz then you will get 144, and so on.
 * @returns {Real}
 */
declare function display_get_frequency(): Real;

interface Sequence {
    /**
     * This is the name of the sequence as a string and you can get or set this value as required. Note that sequences created using the function sequence_create() will not have a name and this will simply be an empty string "".
     */
    name: String

    /**
     * This is the playback mode of the sequence object and can be get or set.
     */
    loopmode: SeqPlay

    /**
     * This specifies the playback speed of the sequence, which is interpreted as either frames-per-second or frames-per-game-frame depending on the playbackSpeedType (see below). You can get or set this value.
     */
    playbackSpeed: Real

    /**
     * This specifies how the playbackSpeed should be interpreted and you can get or set this value.
     */
    playbackSpeedType: SpriteSpeed

    /**
     * The length of the sequence in frames. You can get or set this value, but note that making a sequence shorter may cause issues if a sequence instance referencing this sequence has its playhead set to past the new length.
     */
    length: Real

    /**
     * This is a scalar value from 0 to 1 that is used to scale the volume of all audio tracks in the sequence. You can get or set this value and it will modify the global audio output for all tracks - for example, if you have an audio track with a volume of 0.8 and then set the sequence volume property to 0.5, the audio track will have a final volume of 0.4.
     */
    volume: Real

    /**
     * This is the origin of the sequence along the X axis.
     */
    xorigin: Real

    /**
     * This is the origin of the sequence along the Y axis.
     */
    yorigin: Real

    /**
     * This allows access to the message event keyframes for the sequence. You can get or set these message events, and when getting this property an array of keyframe structs is returned, and for setting the property you           should supply an array of keyframe structs. For more information, please see the page on Sequence Events and Moments.
     */
    messageEventKeyframes: Array

    /**
     * This allows access to the moment event keyframes for the sequence. You can get or set these moment events, and when getting this property an array of keyframe structs is returned, and for setting the property you should supply           an array of keyframe structs. For more information, please see the page on Sequence Events and Moments.
     */
    momentKeyframes: Array

    /**
     * This allows access to the list of asset tracks on the top level of the sequence. You can get or set this property, and when getting this property an array of track structs is returned, and for setting the property you should           supply an array of track structs. For more information, please see the section on Track Structs.
     */
    tracks: Array

}
interface SequenceInstance {
    /**
     * None
     */
    sequence: Sequence

    /**
     * None
     */
    headPosition: Real

    /**
     * None
     */
    headDirection: SequenceDirection

    /**
     * None
     */
    speedScale: Real

    /**
     * None
     */
    volume: Real

    /**
     * None
     */
    paused: Bool

    /**
     * None
     */
    finished: Bool

    /**
     * None
     */
    activeTracks: Array[ActiveTrack]

    /**
     * None
     */
    elementID: SequenceElement

}
interface Track {
    /**
     * None
     */
    name: String

    /**
     * None
     */
    type: SequenceTrackType

    /**
     * None
     */
    tracks: Array[Track]

    /**
     * None
     */
    visible: Bool

    /**
     * None
     */
    keyframes: Array[Keyframe]

}
interface Keyframe {
    /**
     * None
     */
    frame: Real

    /**
     * None
     */
    length: Real

    /**
     * None
     */
    stretch: Bool

    /**
     * None
     */
    disabled: Bool

    /**
     * None
     */
    channels: Array

}
interface KeyChannel {
    /**
     * None
     */
    channel: Real

}
interface GraphicTrack {
    /**
     * None
     */
    spriteIndex: GMSprite

}
interface SequenceTrack {
    /**
     * None
     */
    sequence: Undefined

}
interface AudioTrack {
    /**
     * None
     */
    soundIndex: GMSound

    /**
     * None
     */
    emitterIndex: EmitterIndex

    /**
     * None
     */
    playbackMode: Real

}
interface SpriteTrack {
    /**
     * None
     */
    imageIndex: Real

}
interface BoolTrack {
    /**
     * None
     */
    value: Bool

}
interface StringTrack {
    /**
     * None
     */
    value: String

}
interface ColourTrack {
    /**
     * None
     */
    colour: Color

}
interface ColorTrack {
    /**
     * None
     */
    color: Color

}
interface RealTrack {
    /**
     * None
     */
    value: Real

    /**
     * None
     */
    curve: Real

}
interface InstanceTrack {
    /**
     * None
     */
    objectIndex: GMObject

}
interface TextTrack {
    /**
     * None
     */
    text: String

    /**
     * None
     */
    wrap: Bool

    /**
     * None
     */
    alignmentV: Real

    /**
     * None
     */
    alignmentH: Real

    /**
     * None
     */
    fontIndex: GMFont

    /**
     * None
     */
    effectsEnabled: Bool

    /**
     * None
     */
    glowEnabled: Bool

    /**
     * None
     */
    outlineEnabled: Bool

    /**
     * None
     */
    dropShadowEnabled: Bool

}
interface MessageEvent {
    /**
     * None
     */
    events: Array

}
interface Moment {
    /**
     * None
     */
    event: Real

}
interface AnimCurve {
    /**
     * None
     */
    name: String

    /**
     * None
     */
    graphType: Real

    /**
     * None
     */
    channels: Array

}
interface AnimCurveChannel {
    /**
     * None
     */
    type: AnimCurveChannel

    /**
     * None
     */
    iterations: Real

    /**
     * None
     */
    points: Real

}
interface AnimCurvePoint {
    /**
     * None
     */
    posx: Real

    /**
     * None
     */
    value: Real

}
interface ActiveTrack {
    /**
     * None
     */
    activeTracks: Array[Track]

    /**
     * None
     */
    matrix: Array

    /**
     * None
     */
    posx: Real

    /**
     * None
     */
    posy: Real

    /**
     * None
     */
    scalex: Real

    /**
     * None
     */
    scaley: Real

    /**
     * None
     */
    xorigin: Real

    /**
     * None
     */
    yorigin: Real

    /**
     * None
     */
    gain: Real

    /**
     * None
     */
    pitch: Real

    /**
     * None
     */
    falloffRef: Real

    /**
     * None
     */
    falloffMax: Real

    /**
     * None
     */
    falloffFactor: Real

    /**
     * None
     */
    width: Real

    /**
     * None
     */
    height: Real

    /**
     * None
     */
    imageindex: Real

    /**
     * None
     */
    imagespeed: Real

    /**
     * None
     */
    colorMultiply: Array

    /**
     * None
     */
    colourMultiply: Array

    /**
     * None
     */
    emitterIndex: AudioEmitter

    /**
     * None
     */
    track: Track

    /**
     * None
     */
    parent: SequenceInstance

    /**
     * None
     */
    frameSizeX: Real

    /**
     * None
     */
    frameSizeY: Real

    /**
     * None
     */
    characterSpacing: Real

    /**
     * None
     */
    lineSpacing: Real

    /**
     * None
     */
    paragraphSpacing: Real

    /**
     * None
     */
    thickness: Real

    /**
     * None
     */
    coreColor: Array

    /**
     * None
     */
    coreColour: Array

    /**
     * None
     */
    glowStart: Real

    /**
     * None
     */
    glowEnd: Real

    /**
     * None
     */
    glowColor: Array

    /**
     * None
     */
    glowColour: Array

    /**
     * None
     */
    outlineDist: Real

    /**
     * None
     */
    outlineColor: Array

    /**
     * None
     */
    outlineColour: Array

    /**
     * None
     */
    shadowSoftness: Real

    /**
     * None
     */
    shadowOffsetX: Real

    /**
     * None
     */
    shadowOffsetY: Real

    /**
     * None
     */
    shadowColor: Array

    /**
     * None
     */
    shadowColour: Array

    /**
     * None
     */
    effectsEnabled: Bool

    /**
     * None
     */
    glowEnabled: Bool

    /**
     * None
     */
    outlineEnabled: Bool

    /**
     * None
     */
    dropShadowEnabled: Bool

}
interface GCStats {
    /**
     * None
     */
    objects_touched: Real

    /**
     * None
     */
    objects_collected: Real

    /**
     * None
     */
    traversal_time: Real

    /**
     * None
     */
    collection_time: Real

    /**
     * None
     */
    gc_frame: Real

    /**
     * None
     */
    generation_collected: Real

    /**
     * None
     */
    num_generations: Real

    /**
     * None
     */
    num_objects_in_generation: Array

}
interface WeakRef {
    /**
     * None
     */
    ref: ArgumentIdentity

}
interface FontInfo {
    /**
     * None
     */
    ascenderOffset: Real

    /**
     * None
     */
    ascender: Real

    /**
     * None
     */
    sdfSpread: Real

    /**
     * None
     */
    sdfEnabled: Bool

    /**
     * None
     */
    freetype: Bool

    /**
     * None
     */
    size: Real

    /**
     * None
     */
    spriteIndex: GMSprite

    /**
     * None
     */
    texture: GMTexturePage

    /**
     * None
     */
    name: String

    /**
     * None
     */
    bold: Bool

    /**
     * None
     */
    italic: Bool

    /**
     * None
     */
    effectsEnabled: Bool

    /**
     * None
     */
    effectParams: Struct

    /**
     * None
     */
    glyphs: Struct

}
interface FontInfoGlyph {
    /**
     * None
     */
    char: Real

    /**
     * None
     */
    x: Real

    /**
     * None
     */
    y: Real

    /**
     * None
     */
    w: Real

    /**
     * None
     */
    h: Real

    /**
     * None
     */
    shift: Real

    /**
     * None
     */
    offset: Real

    /**
     * None
     */
    kerning: Array

}
interface FontEffectParams {
    /**
     * None
     */
    thickness: Real

    /**
     * None
     */
    coreColour: Real

    /**
     * None
     */
    coreAlpha: Real

    /**
     * None
     */
    glowEnable: Bool

    /**
     * None
     */
    glowColour: Real

    /**
     * None
     */
    glowAlpha: Real

    /**
     * None
     */
    outlineEnable: Bool

    /**
     * None
     */
    outlineDistance: Real

    /**
     * None
     */
    outlineColour: Real

    /**
     * None
     */
    outlineAlpha: Real

    /**
     * None
     */
    dropShadowEnable: Bool

    /**
     * None
     */
    dropShadowSoftness: Real

    /**
     * None
     */
    dropShadowOffsetX: Real

    /**
     * None
     */
    dropShadowOffsetY: Real

    /**
     * None
     */
    dropShadowColour: Real

    /**
     * None
     */
    dropShadowAlpha: Real

}
interface Exception {
    /**
     * Short message for this exception.
     */
    message: String

    /**
     * Long message for this exception.
     */
    longMessage: String

    /**
     * Describes the script where this exception came from.
     */
    script: String

    /**
     * The stack frame that the exception was generated from.
     */
    stacktrace: Array.String

}
interface AudioBus {
    /**
     * Whether to bypass all effects and gain scaling of the bus.
     */
    bypass: Bool

    /**
     * The output gain of the bus.
     */
    gain: Real

    /**
     * The chain of audio effects on the bus.
     */
    effects: Array.AudioEffect

}
interface AudioEffect {
    /**
     * The response time to apply the effect.
     */
    attack: Real

    /**
     * Whether to bypass the effect.
     */
    bypass: Bool

    /**
     * The cutoff frequency of the filter.
     */
    cutoff: Real

    /**
     * The amount of higher frequency damping.
     */
    damp: Real

    /**
     * A peak EQ filter.
     */
    eq1: AudioEffect

    /**
     * A peak EQ filter.
     */
    eq2: AudioEffect

    /**
     * A peak EQ filter.
     */
    eq3: AudioEffect

    /**
     * A peak EQ filter.
     */
    eq4: AudioEffect

    /**
     * The factor by which the signal is downsampled.
     */
    factor: Real

    /**
     * The proportion of the signal which is fed back into the delay line.
     */
    feedback: Real

    /**
     * The center frequency of the filter.
     */
    freq: Real

    /**
     * The gain applied to the input signal.
     */
    gain: Real

    /**
     * A low-pass filter.
     */
    hicut: AudioEffect

    /**
     * A high-shelf filter.
     */
    hishelf: AudioEffect

    /**
     * The input gain scalar.
     */
    ingain: Real

    /**
     * The propertion of the signal which is affected by the LFO.
     */
    intensity: Real

    /**
     * A high-pass filter.
     */
    locut: AudioEffect

    /**
     * A low-shelf filter.
     */
    loshelf: AudioEffect

    /**
     * The proportion of the affected signal to output.
     */
    mix: Real

    /**
     * The proportion of the LFO period that the LFOs should be desynced by.
     */
    offset: Real

    /**
     * The output gain scalar.
     */
    outgain: Real

    /**
     * The quality factor of the filter.
     */
    q: Real

    /**
     * The frequency of the modulating LFO.
     */
    rate: Real

    /**
     * The compression ratio.
     */
    ratio: Real

    /**
     * The response time to stop applying the effect.
     */
    release: Real

    /**
     * The bit depth at which the signal is resampled.
     */
    resolution: Real

    /**
     * The waveshape of the LFO.
     */
    shape: Enum.AudioLFOType

    /**
     * The size of the space.
     */
    size: Real

    /**
     * The gain threshold over which the effect is applied.
     */
    threshold: Real

    /**
     * The duration of the delay.
     */
    time: Real

    /**
     * The type of the effect.
     */
    type: Enum.AudioEffectType

}
interface VertexFormatInfo {
    /**
     * None
     */
    stride: Real

    /**
     * None
     */
    num_elements: Real

    /**
     * None
     */
    elements: array[VertexElementInfo]

}
interface VertexElementInfo {
    /**
     * None
     */
    usage: VertexUsage

    /**
     * None
     */
    type: VertexType

    /**
     * None
     */
    size: Real

    /**
     * None
     */
    offset: Real

}
interface TileSetInfo {
    /**
     * The width of the whole tile set texture (in pixels).
     */
    width: Real

    /**
     * The height of the whole tile set texture (in pixels).
     */
    height: Real

    /**
     * The texture ID.
     */
    texture: Real

    /**
     * The width of a single tile (in pixels).
     */
    tile_width: Real

    /**
     * The height of a single tile (in pixels).
     */
    tile_height: Real

    /**
     * The number of pixels horizontally on each side of each tile (making the space between two tiles 2 * tile_horizontal_separator).
     */
    tile_horizontal_separator: Real

    /**
     * The number of pixels vertically on each side of each tile (making the space between two tiles 2 * tile_vertical_separator)
     */
    tile_vertical_separator: Real

    /**
     * The number of columns on each row of the tile set.
     */
    tile_columns: Real

    /**
     * The number of tiles.
     */
    tile_count: Real

    /**
     * The number of frames of animation per animation.
     */
    frame_count: Real

    /**
     * The number of milliseconds for frame animation.
     */
    frame_length_ms: Real

    /**
     * A struct containing all the animation frames. Each tile number has a key in the struct, each entry is an array of the frames to use (each array should be frame_count long).
     */
    frames: Struct

}
interface GMObject {
    /**
     * This 1 dimension array is used to get the current value for any alarms that the instance may have, or it can be used to set those alarms. There are twelve alarms built into each instance of an object, and each one has its own event that will run when this variable reaches 0.
     */
    alarm: Array[Real]

    /**
     * When you create an object you can assign it an initial depth which defines how the instances of that object will be drawn in the room when the game is being played and this variable can be used to get and to change that depth value while the game is running. You would normally not need to use this variable as you should be setting instances to be added to discreet layers, which in turn are set to a specific depth, but it may be that you want to change the depth of an instance using this value, in which case a "temporary layer" will be created specifically for the instance at the given depth. Note that when no instances are on the same depth then this temporary layer will be removed from memory (unlike regular layers which will remain even if they have nothing on them).
     */
    depth: Real

    /**
     * All instances in GameMaker have certain "built in" properties that you can use and set to govern how they look and behave. Direction is one of those properties and can be used to set the direction of movement of the instance when the instance has a speed other than 0. Note that directions in GameMaker are usually calculated as 0░ being right, 90░ being up, 180░ being left and 270░ being down, and that the gravity and gravity_direction variables can modify the direction value when they are used in your games.
     */
    direction: Real

    /**
     * Friction is one of the "built in" properties that instances can have and can be used to slow the instance down over time when the speed is other than zero. It works simply by subtracting an amount from the speed every step until the object has a speed of 0, so if the friction is set to, for example, 0.1 and the speed of the instance is 1 (1 pixel per step), it will slow down and stop after 10 steps have passed. Note too that the friction is applied to positive and negative speeds equally with the net result always being that the object has a speed of 0 after a given time.
     */
    friction: Real

    /**
     * gravity is one of the "built in" variables all instances have and, when set, will apply a constant force in the gravity_direction of the instance, influencing both the instance speed and direction. Note that gravity is a cumulative force and will accelerate the object if you choose not to cap the final speed, and it's usual that you'd set this variable to small decimal values like 0.01. If you set the gravity to 0, then no gravity will be applied to the instance (this is the default value).
     */
    gravity: Real

    /**
     * gravity_direction is one of the "built in" properties all instances have and can be used to set the direction of movement when the instances gravity is greater than 0. Note that directions in GameMaker are usually calculated as 0░ being right, 90░ being up, 180░ being left and 270░ being down.
     */
    gravity_direction: Real

    /**
     * hspeed is one of the "built in" properties that all instances have and defines the horizontal movement speed (along the x-axis) of the instance in pixels per step. So, an hspeed of 3 means 3 pixels of movement to the right (+x) every step, and an hspeed of -3 would mean 3 pixels of movement to the left (-x) every step.
     */
    hspeed: Real

    /**
     * This read-only variable holds the unique identifying number for the instance. Every instance that you create - whether through code or by adding them to a room in the Room Editor - is given a number that is used internally to identify this instance and the variable id is what you can use to reference it. The id is also returned (and can be stored in a variable) when an instance is created using instance_create_layer() or instance_create_depth(), as well as other instance functions.
     */
    id: Instance

    /**
     * This built-in variable is created for every instance in a room and contains the layer ID value of the layer that the instance is assigned to. This value can then be used in other functions like layer_get_depth() or it can be changed to move the instance to another layer, but note that if the layer being assigned does not exist in the current room, then you will get an error that will force your game to close. When assigning a layer, you must supply the unique layer ID as returned by the function layer_get_id() (when using named room layers), or as returned by the function layer_create() (when you create your own layers at run time).
     */
    layer: Layer

    /**
     * This built-in variable can be read to find out if the instance is currently on a ui layer or not.
     */
    on_ui_layer: Bool

    /**
     * This variable can be read to find out if the instance is flagged as persistent or not, or it can used to set persistence to true (persistent) or false (not persistent) for the instance. A persistent instance is one that will be "carried over" from room to room, meaning (for example) that it only has to be created once at the start of the game and it will be present in all further rooms. Care should be taken with persistence as it is easy to lose track of persistent instances which can lead to problems later in the development of the game.
     */
    persistent: Bool

    /**
     * An instance can be flagged as solid through the object properties in the Object Editor, or by changing the value of this built-in variable. If solid is set to true then, when a collision is detected, the colliding instance is returned automatically to the position it was at in the step previous to the collision (and then any code or actions are run in the collision event). If it is set to false, all positioning must be dealt with through the collision event.
     */
    solid: Bool

    /**
     * All instances in GameMaker have certain "built in" properties that you can use and set to govern how they look and behave. speed is one of those properties and defines how many pixels the instance will move every step. Unlike hspeed and vspeed, speed has no direction associated with it as this is governed by the direction value of the instance, but it can have a negative value, in which case the instance will travel in the opposite direction to that set by the direction function (ie: direction - 180░). Note that setting the speed and/or the direction, will also modify the values of the hspeed and vspeed variables, and that gravity, gravity_direction and friction can all modify the value of this variable when they are used in your games.
     */
    speed: Real

    /**
     * vspeed is one of the "built in" properties that all instances have and defines the vertical movement speed (along the y-axis) of the instance in pixels per step. So, a vspeed of 3 means 3 pixels of movement to the bottom (+y) every step, and a vspeed of -3 would mean 3 pixels of movement to the top (-y) every step.
     */
    vspeed: Real

    /**
     * The x value of an instance is the horizontal position in the current room, measured in pixels. This value can be either 0, positive or minus, where 0 is the left hand side of the room and moving right increases x, moving left decreases x (a negative value for x means that the instance has gone outside the left side of the room). You can even give x a real value like 12.345, but as you cannot get .345 of a pixel, the instance may not appear to have moved, although these values will be maintained and used internally by GameMaker and are perfectly valid.
     */
    x: Real

    /**
     * This built-in variable returns the previous x position for the instance. This variable will be set just before the start of the begin step event but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.
     */
    xprevious: Real

    /**
     * This variable stores the initial x position of the instance when it is first created in the room. This is not a read-only variable and can be set as well as read.
     */
    xstart: Real

    /**
     * The y value of an instance is the vertical position in the current room, measured in pixels. This value can be either 0, positive or minus, where 0 is the top of the room and moving down increases y, moving up decreases y (a negative value for y means that the instance has gone outside the top of the room). You can even give y a real value like 12.345, but as you cannot get .345 of a pixel, the instance may not appear to have moved, although these values will be maintained and used internally by GameMaker and are perfectly valid.
     */
    y: Real

    /**
     * This built-in variable returns the previous y position for the instance. This variable will be set to the current x position just before the start of the begin step event but it can also be set through code at any time, meaning you can give it your own custom value should that be necessary.
     */
    yprevious: Real

    /**
     * This variable stores the initial y position of the instance when it is first created in the room. This is not a read-only variable and can be set as well as read.
     */
    ystart: Real

    /**
     * This read only variable returns the index of the object that the instance has been created from. This is not the same as the object name, which is a string and can be found using object_get_name(), as this function returns the index number, which is a unique value that GameMaker assigns to every object at the time of creation.
     */
    object_index: GMObject

    /**
     * This read-only variable returns the number of the event currently being called, where the number is actually referring to the "sub event" of the event, ie: for the step event the event number could be any one of the constants ev_step_normal, ev_step_begin, or ev_step_end. For a full list of constants that are available for the specific sub-events see event_perform(), and if you should need to know the main event itself, you should be checking the event_type.
     */
    event_number: EventNumber

    /**
     * This read-only variable returns object index of the instance which is running the event being checked.
     */
    event_object: GMObject

    /**
     * This read-only variable returns the type of event currently being executed, which can be one of the following constants:
     */
    event_type: EventType

    /**
     * This variable can be used to get or to change the reaction of an instance when it reaches the end of the current path. Normally you would set this when you start the path using path_start() but you may wish to change this behaviour depending on any number of events in your game. The available values are expressed using the following constants:
     */
    path_endaction: PathAction

    /**
     * This variable holds the current orientation of the path that has been assigned to the instance when the function path_start() was called. When a path is created, its orientation is the default 0 degrees, but you can set this value to anything you wish using this. Remember that in GameMaker (unless you are using physics) the angles are calculated counter-clockwise, so setting the path orientation to 90░ would rotate the path to the left.
     */
    path_orientation: Real

    /**
     * This function can be used to get or to set the position of an instance along a path. The value is normalised from 0 - 1, so if you set it to, for example, 0.5, the instance will be moved to exactly the middle of the path.
     */
    path_position: Real

    /**
     * This variable can be used to get or to set the position of an instance along its current path in the previous step, and is a normalised value between 0 and 1 ie: 0 is the start position of the path and 1 would be the end position. It is similar to the xprevious and yprevious variables in how it works, only it is specific for paths. It can be useful for things like temporarily stopping a path follower if something is in the way (see the example code below).
     */
    path_positionprevious: Real

    /**
     * This value can be used to get or to set the scale of the currently assigned path for the instance (as set by the function path_start()) with a default value of 1. This is a scalar value, so 1 is a scale of 1:1, while setting it to 2, for example, will be double the scale and setting it to 0.5 would be halving the scale.
     */
    path_scale: Real

    /**
     * You can use this function to get or to set the speed of a path after it has been started using the function path_start(). You can use negative values to signify that the instance should follow the path in reverse.
     */
    path_speed: Real

    /**
     * This is a built-in variable that is part of the instance variables created for every object instance in your game. If the instance is being controlled by a sequence, this variable will return true, otherwise it will return false. This is a read-only variable and cannot be changed.
     */
    in_sequence: Bool

    /**
     * This is a built-in variable that is part of the instance variables created for every object instance in your game. If the instance is being controlled by a sequence, this variable will hold the sequence instance struct for the Sequence controlling the instance, otherwise it will be undefined. This is a read-only variable and cannot be changed.
     */
    sequence_instance: SequenceInstance

    /**
     * This is a built-in variable that is part of the instance variables created for every object instance in your game. This can be changed at any time but will only affect behaviour when the instance is being controlled by a sequence. In this case if this variable is set to true then the sequence will handle the drawing order of the instance, otherwise normal instance drawing will occur.
     */
    drawn_by_sequence: Bool

    /**
     * This read only variable returns the y position (within the room) of the bottom of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance Y position.
     */
    bbox_bottom: Real

    /**
     * This read only variable returns the position (along the x-axis) within the room of the left hand bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance X position.
     */
    bbox_left: Real

    /**
     * This read only variable returns the position within the room (along the x-axis) of the right hand side of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance X position.
     */
    bbox_right: Real

    /**
     * This read only variable returns the position within the room (along the y-axis) of the top of the bounding box for the instance, where the bounding box is defined by the maximum width and height of the mask for the instance (as set by the sprite_index or by the mask_index). Even when a sprite has a precise collision mask, the bounding box exists and is used for certain things, and so you can use this variable to find it. Please note that when the instance has no sprite assigned the value returned will be the same as the instance Y position.
     */
    bbox_top: Real

    /**
     * This variable is used to get or to set the alpha value for the sprite. Alpha is always calculated as a value between 0 and 1 where 0 is completely transparent and 1 is completely opaque. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the extended drawing functions like draw_self() or draw_sprite_ext().
     */
    image_alpha: Real

    /**
     * This value sets the angle (rotation) of the sprite and is measured in degrees, with the right being 0║, up being 90║, left being 180║ and down being 270║. Set this variable to 0 to reset the sprite to be drawn as was defined in the sprite editor. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the extended drawing functions like draw_self() or draw_sprite_ext().
     */
    image_angle: Real

    /**
     * This variable controls the "tinting" of the instance sprite and the default value is -1 (but can also be c_white). Any other value (including internal colour constants like c_red, or c_aqua) will blend the specified colour with the original sprite. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the extended drawing functions like draw_self() or draw_sprite_ext().
     */
    image_blend: Color

    /**
     * A sprite is made up of one or more sub-images which can make the sprite appear animated as they switch from one to the other, or can they can be switched between in code to give different "states", much like a button has in windows. If the sprite is animated, then you can get the current frame of the animation by checking the image_index variable, or if you want to change the state of a static sprite, you can select a new sub-image by setting this variable to the desired sub-image of the sprite. Please note that for changes in this variable to be visible, the instance should have either no draw event (and so GameMaker will default draw the sprite) or be drawn using one of the drawing functions like draw_self() or draw_sprite_ext() (by supplying the image_index into the appropriate argument).
     */
    image_index: Real

    /**
     * This read only variable can be used to get the number of sub-images in a sprite that has been assigned to an instance (if you need the number of sub-images for a sprite other than the one assigned to the instance you should use sprite_get_number()). Please note that when there is (for example) 1 sub-image this variable will return "1" but the image_index of that sub-image is 0.
     */
    image_number: Real

    /**
     * This variable determines the speed in which GameMaker will cycle through the sub-images for the current instance sprite. The speed value given is a multiplier, with 1 being the default value, and setting it to 0.5 will half the animation speed - as set in the Sprite Editor or Image Editor- while setting it to 2 will double it. If the sprite used has no sub-images, this variable will have no effect.
     */
    image_speed: Real

    /**
     * This value sets the horizontal scaling applied to the sprite that has been assigned to the current instance. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the width of the sprite), larger values will scale up and negative values will flip the sprite and scale it unless the value used is exactly -1 (in which case the sprite is just flipped about its origin with no scaling).
     */
    image_xscale: Real

    /**
     * This value sets the vertical scaling (along the y-axis) applied to the sprite that has been assigned to the current instance. A scale of 1 indicates no scaling (1:1), smaller values will scale down (0.5, for example, will half the height of the sprite), larger values will scale up and negative values will mirror the sprite and scale it unless the value used is exactly -1 (in which case the sprite is just mirrored along the y-axis with no scaling).
     */
    image_yscale: Real

    /**
     * When you define an object in GameMaker you can assign it a mask to be used for collisions rather than the one that corresponds to the defined sprite. This variable can be used to find the sprite_index of that mask (or it will return -1 if no sprite has been assigned) or to set the mask for an instance to the chosen sprite. Setting the mask index means that you can have, for example, a sprite for the instance with an irregular shape, yet give it a circular collision mask that is gotten from a different sprite.
     */
    mask_index: GMSprite

    /**
     * This read only variable returns the height of the sprite that has been assigned to the instance. This height is returned in pixels and will be dependent on the image_yscale. If you need the un-scaled height you should use sprite_get_height().
     */
    sprite_height: Real

    /**
     * This variable returns the index of the current sprite for the instance, or -1 if the instance has no sprite associated with it. You can change it to give the instance a different sprite by giving it the name of a sprite from the resource tree or by using a variable that has an externally loaded sprite indexed in it. Changing the sprite does not change the index of the currently visible frame, so if you change the sprite on frame number 3, the new sprite will be drawn with that frame visible (assuming it has the same number of frames).
     */
    sprite_index: GMSprite

    /**
     * This read only variable returns the width of the sprite that has been assigned to the instance. This width is returned in pixels and will be dependent on the image_xscale. If you need the un-scaled width you should use sprite_get_width().
     */
    sprite_width: Real

    /**
     * This read only variable returns the local xoffset (the x component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This xoffset is returned in pixels and will be dependent on the image_xscale, so that (for example) if a square 32x32 sprite is defined as having the x origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled xoffset you should use sprite_get_xoffset().
     */
    sprite_xoffset: Real

    /**
     * This read only variable returns the local yoffset (the y component of the origin as defined in the sprite editor) of the sprite that has been assigned to the instance. This yoffset is returned in pixels and will be dependent on the image_yscale, so that (for example) if a square 32x32 sprite is defined as having the y origin at 16, when that sprite is scaled by 2 this variable will return 32. If you need the un-scaled yoffset you should use sprite_get_yoffset().
     */
    sprite_yoffset: Real

    /**
     * This variable holds the index of the time line currently associated with the instance. You can set this to a particular time line to use that one, or set it to -1 to stop using a time line for the instance (if no time line is defined for the instance, -1 is returned too). Note that this does not start the time line - for that use the variable timeline_running.
     */
    timeline_index: GMTimeline

    /**
     * This variable will return whether the time line is looping (true) or not (false). You can change this variable to switch looping on or off and it works with a negative time line speed (if the time line position goes below 0 it will start again at the last defined moment).
     */
    timeline_loop: Bool

    /**
     * This variable holds the current position (moment) a time line is currently at. You can change this value to skip parts of the time line, or to repeat parts or to start the time line again from the beginning.
     */
    timeline_position: Real

    /**
     * This variable holds current state of the assigned time line and will return true if it is running and false if it is not. You can also set this variable to either true or false to start and stop the time line at any time. it should be noted that a stopped time line is not reset, and so starting it again at a later time will start it from the exact moment that it was stopped at.
     */
    timeline_running: Bool

    /**
     * Normally, in each step the position in the time line is increased by 1, however you can change this amount by setting this variable to a different value. You can use real numbers (like 0.5, or 2.4 for example) and if the value is larger than one, several moments can happen within the same time step (they will all be performed in the same order as defined for the time line, so no actions will be skipped).
     */
    timeline_speed: Real

    /**
     * This variable controls whether or not the instance is currently "active". Setting it to false will prevent the instance from participating in the physics world, and setting it to true will have it participating again. Please note that this is not the same as deactivating the instance, as the instance is still visible on the screen and can still be changed through code, rather this function just prevents it from participating in the physics simulation
     */
    phy_active: Bool

    /**
     * This variable can be used to set the angular damping of the instance, or it can be used to get the current angular damping. The damping is the amount of "resistance" to angular rotation that the physics enabled instance has, with a lower value permitting the instance to rotate faster after a collision (for example) and a higher value making it require a more forceful push and rotate slower
     */
    phy_angular_damping: Real

    /**
     * This variable can be used to set the angular velocity of the instance, or it can be used to get the current angular velocity, in degrees per second and the value used can be either positive (for clockwise rotation) or negative (for anticlockwise rotation). If you set this on an instance that was previously static (ie: it has a density of 0) it will become a kinematic object and begin rotating
     */
    phy_angular_velocity: Real

    /**
     * This variable defines whether or not the instance is extremely fast moving (for example a bullet). The default value is false but if set to true this tells GameMaker that the instance will be moving at such high speeds that it will require more expensive collision detection to ensure it doesn't pass through other instances undetected
     */
    phy_bullet: Bool

    /**
     * This read-only variable returns the number of points of collision detected between the two objects in the collision
     */
    phy_collision_points: Real

    /**
     * This read-only array returns the x position of all points detected in a collision between two physics enabled instances.
     */
    phy_collision_x: Array[Real]

    /**
     * This read-only array returns the y position of all points detected in a collision between two physics enabled instances.
     */
    phy_collision_y: Array[Real]

    /**
     * This read-only variable returns the x component of the collision normal corresponding to the phy_collision_x array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct "push" direction to resolve collisions
     */
    phy_col_normal_x: Real

    /**
     * This read-only variable returns the y component of the collision normal corresponding to the phy_collision_y array value. For each contact point there is an associated contact normal (which is usually the same normal for all points of contact in the collision). This contact normal is a unit vector that points from one instance in the collision to another, and can be used, for example, to calculate the correct "push" direction to resolve collisions
     */
    phy_col_normal_y: Real

    /**
     * This read-only variable will return the x position of the instance's center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions
     */
    phy_com_x: Real

    /**
     * This read-only variable will return the y position of the instance's center of mass. This is calculated automatically based on the density, inertia and mass of the instance as defined by the appropriate functions
     */
    phy_com_y: Real

    /**
     * A dynamic instance is one that is fully simulated within the physics world and this read-only variable will return true if the instance being checked is fully simulated or false if it is not
     */
    phy_dynamic: Bool

    /**
     * This variable can be used to set whether or not the instance can be affected by rotational forces (default is false). If this is set to true, no external force (either from coded impulses or forces, or from collisions) will affect the rotation value of the instance and this would have to be set manually using the phy_rotation variable
     */
    phy_fixed_rotation: Bool

    /**
     * Inertia is the measure of how hard it is to make something start or stop moving, so the lower the value for this read-only variable and the easier it will be to set the instance in motion, while higher values will require more force to start it moving
     */
    phy_inertia: Real

    /**
     * This read-only variable will return true if the instance is classed as being a kinematic object, or false if it is not. A kinematic instance is one that has infinite mass (a density of 0) but can move. So, to make an instance kinematic, you would first create a static instance and then set one or more of the instance variables related to movement (ie: phy_speed_x, phy_speed_y, or phy_angular_velocity)
     */
    phy_kinematic: Bool

    /**
     * This variable can be used to set the linear damping of the instance, or it can be used to get the current linear damping. The damping is the amount of "resistance" to forward movement that the physics enabled instance has, with a lower value permitting the instance to move and accelerate faster and a higher value making it require a more forceful push
     */
    phy_linear_damping: Real

    /**
     * This variable can be used to get or change the x component of the instance's linear velocity vector and is defined in pixels per second (for pixels per step, see phy_speed_x). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance
     */
    phy_linear_velocity_x: Real

    /**
     * This variable can be used to get or change the y component of the instance's linear velocity vector and is defined in pixels per second (for pixels per step, see phy_speed_y). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance
     */
    phy_linear_velocity_y: Real

    /**
     * This read-only variable returns the mass of the instance in kilograms. This value is calculated automatically based on the surface area of the assigned fixtures and their density values, but it can be changed using the function physics_mass_properties().
     */
    phy_mass: Real

    /**
     * This variable can be used to get (or to set) the x position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the continuous simulation. This variable is the physics equivalent of the instance variable x.
     */
    phy_position_x: Real

    /**
     * This variable can be used to get (or to set) the previous x position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one.
     */
    phy_position_xprevious: Real

    /**
     * This variable can be used to get (or to set) the y position of the instance within the game room physics world. Please note that the physics world may present errors when instances are moved by directly setting this variable as it will interrupt the continuous simulation. This variable is the physics equivalent of the instance variable y.
     */
    phy_position_y: Real

    /**
     * This variable can be used to get (or to set) the previous y position of the instance within the game room physics world. This is the position of the instance within the physics world in the previous step to the current one
     */
    phy_position_yprevious: Real

    /**
     * This variable can be used to get (or to set) the angle of the instances fixture in degrees, similar to setting or getting the image_angle. However note that in the physics world rotations are calculated in the opposite way to the normal GameMaker game world, meaning that vector functions like point_direction()should have their return values modified (simply making positive to negative should resolve this).
     */
    phy_rotation: Real

    /**
     * This read-only variable returns whether or not the instance is currently "sleeping" (true) or not (false), A "sleeping" instance is one that is not actively engaged in any physical simulation. GameMaker will put objects to sleep to save simulation cycles when an instance is at rest and not in collision with another instance
     */
    phy_sleeping: Bool

    /**
     * This read-only variable returns the current speed of the physics enabled instance, defined in pixels per step. Should you need to change this value, you must do so by changing the x and y vectors using the variables phy_speed_x and phy_speed_y.
     */
    phy_speed: Real

    /**
     * This variable can be used to get or change the x component of the instance's linear speed vector and is defined in pixels per step (for pixels per second, see phy_linear_velocity_x). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.
     */
    phy_speed_x: Real

    /**
     * This variable can be used to get or change the y component of the instance's linear speed vector and is defined in pixels per step (for pixels per second, see phy_linear_velocity_y). Altering this for a static instance (ie: an instance with 0 density) will turn it into a kinematic instance.
     */
    phy_speed_y: Real

    /**
     * None
     */
    in_collision_tree: Bool

    /**
     * This identifies which player the instance belongs to in the rollback networking system.
     */
    player_id: Real

    /**
     * This identifies if this instance belongs to the local player in the rollback networking system.
     */
    player_local: Bool

    /**
     * The URL to the avatar associated with this player in Opera GX, for rollback networking.
     */
    player_avatar_url: String

    /**
     * A sprite of the avatar associated with this player in Opera GX, for rollback networking.
     */
    player_avatar_sprite: GMSprite

    /**
     * This identifies if this instance belongs a Guest or User account in the rollback networking system.
     */
    player_type: String

    /**
     * This is the user id in Opera GX in the rollback networking system.
     */
    player_user_id: String

}
interface GMAnimCurve {
}
interface GMAudioGroup {
}
interface GMFont {
}
interface GMParticleSystem {
}
interface GMSequence {
}
interface GMShader {
}
interface GMSound {
}
interface GMSprite {
}
interface GMTileSet {
}
interface GMTimeline {
}
/**
 * None
 */
declare const $$implicit_argument$$: Undefined
/**
 * The given name refers to an object.
 */
declare const asset_object: Real
/**
 * The given name refers to a sprite.
 */
declare const asset_sprite: Real
/**
 * The given name refers to a sound.
 */
declare const asset_sound: Real
/**
 * The given name refers to a room.
 */
declare const asset_room: Real
/**
 * The given name refers to a tile set.
 */
declare const asset_tiles: Real
/**
 * The given name refers to a path.
 */
declare const asset_path: Real
/**
 * The given name refers to a script.
 */
declare const asset_script: Real
/**
 * The given name refers to a font.
 */
declare const asset_font: Real
/**
 * The given name refers to a time line.
 */
declare const asset_timeline: Real
/**
 * The given name refers to a shader.
 */
declare const asset_shader: Real
/**
 * The given name refers to an Animation Curve.
 */
declare const asset_animationcurve: Real
/**
 * The given name refers to a Particle System.
 */
declare const asset_particlesystem: Real
/**
 * The given name refers to a Sequence.
 */
declare const asset_sequence: Real
/**
 * The given name refers to an asset that either does not exist, or is not one of the above listed.
 */
declare const asset_unknown: Real
/**
 * Unknown layer type.
 */
declare const layer_type_unknown: Real
/**
 * A layer of room type.
 */
declare const layer_type_room: Real
/**
 * A ui layer using viewports space.
 */
declare const layer_type_ui_viewports: Real
/**
 * A ui layer using display space.
 */
declare const layer_type_ui_display: Real
/**
 *  gain = (listener_distance / reference_distance) ^ (-falloff_factor)
 */
declare const audio_falloff_exponent_distance: Real
/**
 *  distance = clamp(listener_distance, reference_distance, maximum_distance) gain = (distance / reference_distance) ^ (-falloff_factor)
 */
declare const audio_falloff_exponent_distance_clamped: Real
/**
 *  distance = clamp(listener_distance, reference_distance, maximum_distance) gain = ((distance / reference_distance) ^ (-falloff_factor)) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))
 */
declare const audio_falloff_exponent_distance_scaled: Real
/**
 *  gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance))
 */
declare const audio_falloff_inverse_distance: Real
/**
 *  distance = clamp(listener_distance, reference_distance, maximum_distance) gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))
 */
declare const audio_falloff_inverse_distance_clamped: Real
/**
 *  distance = clamp(listener_distance, reference_distance, maximum_distance) gain = (reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))
 */
declare const audio_falloff_inverse_distance_scaled: Real
/**
 *  distance = min(distance, maximum_distance) gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))
 */
declare const audio_falloff_linear_distance: Real
/**
 *  distance = clamp(listener_distance, reference_distance, maximum_distance) gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))
 */
declare const audio_falloff_linear_distance_clamped: Real
/**
 *  gain = 1
 */
declare const audio_falloff_none: Real
/**
 * Mono (single channel) audio.
 */
declare const audio_mono: Real
/**
 * Stereo (dual channel) audio.
 */
declare const audio_stereo: Real
/**
 * 3D (5.1) audio.
 */
declare const audio_3d: Real
/**
 * Create event
 */
declare const ev_create: Real
/**
 * Destroy event
 */
declare const ev_destroy: Real
/**
 * Clean Up Event
 */
declare const ev_cleanup: Real
/**
 * Step event
 */
declare const ev_step: Real
/**
 * Step
 */
declare const ev_step_normal: Real
/**
 * Begin Step
 */
declare const ev_step_begin: Real
/**
 * End Step
 */
declare const ev_step_end: Real
/**
 * Alarm event
 */
declare const ev_alarm: Real
/**
 * Keyboard/Keyboard Pressed/Keyboard Released
 */
declare const ev_keyboard: Real
/**
 * Mouse event
 */
declare const ev_mouse: Real
/**
 * Left button held down on object
 */
declare const ev_left_button: Real
/**
 * Right button held down on object
 */
declare const ev_right_button: Real
/**
 * Middle button (or clickable wheel) held down on object
 */
declare const ev_middle_button: Real
/**
 * No buttons held down
 */
declare const ev_no_button: Real
/**
 * Left button just pressed on object
 */
declare const ev_left_press: Real
/**
 * Right button just pressed on object
 */
declare const ev_right_press: Real
/**
 * Middle button (or clickable wheel) just pressed on object
 */
declare const ev_middle_press: Real
/**
 * Left button just released on object
 */
declare const ev_left_release: Real
/**
 * Right button just released on object
 */
declare const ev_right_release: Real
/**
 * Middle button just released on object
 */
declare const ev_middle_release: Real
/**
 * Mouse just entered object's bounding box
 */
declare const ev_mouse_enter: Real
/**
 * Mouse just left object's bounding box
 */
declare const ev_mouse_leave: Real
/**
 * Mouse wheel scrolled upwards
 */
declare const ev_mouse_wheel_up: Real
/**
 * Mouse wheel scrolled downwards
 */
declare const ev_mouse_wheel_down: Real
/**
 * Left button held down anywhere
 */
declare const ev_global_left_button: Real
/**
 * Right button held down anywhere
 */
declare const ev_global_right_button: Real
/**
 * Middle button (or clickable wheel) held down anywhere
 */
declare const ev_global_middle_button: Real
/**
 * Left button just pressed anywhere
 */
declare const ev_global_left_press: Real
/**
 * Right button just pressed anywhere
 */
declare const ev_global_right_press: Real
/**
 * Middle button (or clickable wheel) just pressed anywhere
 */
declare const ev_global_middle_press: Real
/**
 * Left button just released anywhere
 */
declare const ev_global_left_release: Real
/**
 * Right button just released anywhere
 */
declare const ev_global_right_release: Real
/**
 * Middle button just released anywhere
 */
declare const ev_global_middle_release: Real
/**
 * A gesture event (Tap, Drag, Flick, Pinch or Rotate)
 */
declare const ev_gesture: Real
/**
 * A single click/touch and release has been detected for an instance
 */
declare const ev_gesture_tap: Real
/**
 * Two quick touches/clicks and releases have been detected for an instance
 */
declare const ev_gesture_double_tap: Real
/**
 * The beginning of a drag gesture has been detected for an instance
 */
declare const ev_gesture_drag_start: Real
/**
 * A touch/click has been held and moved for an instance
 */
declare const ev_gesture_dragging: Real
/**
 * The release of the touch/click from a drag has been detected for an instance
 */
declare const ev_gesture_drag_end: Real
/**
 * The release of a touch/click from a drag had enough movement for a flick event to be detected for the instance
 */
declare const ev_gesture_flick: Real
/**
 * Two touches and a straight movement have been detected for an instance
 */
declare const ev_gesture_pinch_start: Real
/**
 * The movement between two touches for an instance has been detected as inwards
 */
declare const ev_gesture_pinch_in: Real
/**
 * The movement between two touches for an instance has been detected as outwards
 */
declare const ev_gesture_pinch_out: Real
/**
 * The release of one (or both) touches for a pinch has been detected for an instance
 */
declare const ev_gesture_pinch_end: Real
/**
 * The movement between two touches for an instance has been detected as a rotation
 */
declare const ev_gesture_rotate_start: Real
/**
 * The movement between two touches for an instance has been detected as rotating
 */
declare const ev_gesture_rotating: Real
/**
 * The release of one (or both) touches for a rotation has been detected for an instance
 */
declare const ev_gesture_rotate_end: Real
/**
 * A single click/touch and release has been detected anywhere in the room
 */
declare const ev_global_gesture_tap: Real
/**
 * Two quick touches/clicks and releases have been detected anywhere in the room
 */
declare const ev_global_gesture_double_tap: Real
/**
 * The beginning of a drag gesture has been detected anywhere in the room
 */
declare const ev_global_gesture_drag_start: Real
/**
 * A touch/click has been held and moved anywhere in the room
 */
declare const ev_global_gesture_dragging: Real
/**
 * The release of the touch/click from a drag has been detected anywhere in the room
 */
declare const ev_global_gesture_drag_end: Real
/**
 * The release of a touch/click from a drag had enough movement for a flick event to be detected anywhere in the room
 */
declare const ev_global_gesture_flick: Real
/**
 * Two touches and a straight movement have been detected anywhere in the room
 */
declare const ev_global_gesture_pinch_start: Real
/**
 * The movement between two touches anywhere in the room has been detected as inwards
 */
declare const ev_global_gesture_pinch_in: Real
/**
 * The movement between two touches anywhere in the room has been detected as outwards
 */
declare const ev_global_gesture_pinch_out: Real
/**
 * The release of one (or both) touches for a pinch has been detected anywhere in the room
 */
declare const ev_global_gesture_pinch_end: Real
/**
 * The movement between two touches anywhere in the room has been detected as a rotation
 */
declare const ev_global_gesture_rotate_start: Real
/**
 * The movement between two touches anywhere in the room has been detected as rotating
 */
declare const ev_global_gesture_rotating: Real
/**
 * The release of one (or both) touches for a rotation has been detected anywhere in the room
 */
declare const ev_global_gesture_rotate_end: Real
/**
 * Collision with an object
 */
declare const ev_collision: Real
/**
 * One of the actions listed under 'Other'
 */
declare const ev_other: Real
/**
 * Whether the instance is outside of the room
 */
declare const ev_outside: Real
/**
 * Whether the instance is intersecting the boundary
 */
declare const ev_boundary: Real
/**
 * Whether the instance is outside the given view (0 to 7)
 */
declare const ev_outside_view0: Real
/**
 * Whether the instance is interesecting with the boundary of the given view (0 to 7)
 */
declare const ev_boundary_view0: Real
/**
 * Only triggered at the start of the game
 */
declare const ev_game_start: Real
/**
 * Only triggered at the end of the game
 */
declare const ev_game_end: Real
/**
 * Only triggered at the start of a room
 */
declare const ev_room_start: Real
/**
 * Only triggered at the end of a room
 */
declare const ev_room_end: Real
/**
 * If the object's sprite has reached the end of its animation
 */
declare const ev_animation_end: Real
/**
 * Animation event that runs every step for objects that use skeletal animations
 */
declare const ev_animation_update: Real
/**
 * Animation event that runs for skeletal animations as assigned in the skeletal animation tool
 */
declare const ev_animation_event: Real
/**
 * If the object has reached the end of a path it is following
 */
declare const ev_end_of_path: Real
/**
 * One of the 16 available user events.
 */
declare const ev_user0: Real
/**
 * Broadcast Message event used for sprites and sequences
 */
declare const ev_broadcast_message: Real
/**
 * Draw event. NOTE: This event cannot be forced outside of a draw event and the constants and the constants are only for identifying the event when performed in these cases.
 */
declare const ev_draw: Real
/**
 * The draw begin event.
 */
declare const ev_draw_begin: Real
/**
 * The draw end event.
 */
declare const ev_draw_end: Real
/**
 * The pre draw event.
 */
declare const ev_draw_pre: Real
/**
 * The normal draw event.
 */
declare const ev_draw_normal: Real
/**
 * The post draw event.
 */
declare const ev_draw_post: Real
/**
 * The draw gui event.
 */
declare const ev_gui: Real
/**
 * The draw gui begin event.
 */
declare const ev_gui_begin: Real
/**
 * The draw gui end event.
 */
declare const ev_gui_end: Real
/**
 * Image Loaded event
 */
declare const ev_async_web_image_load: Real
/**
 * In-App Purchase event
 */
declare const ev_async_web_iap: Real
/**
 * Cloud event
 */
declare const ev_async_web_cloud: Real
/**
 * Networking event
 */
declare const ev_async_web_networking: Real
/**
 * Steam event
 */
declare const ev_async_web_steam: Real
/**
 * Social event
 */
declare const ev_async_social: Real
/**
 * Push Notification event
 */
declare const ev_async_push_notification: Real
/**
 * Save/Load Event
 */
declare const ev_async_save_load: Real
/**
 * Audio Recording event
 */
declare const ev_async_audio_recording: Real
/**
 * Audio Playback event
 */
declare const ev_async_audio_playback: Real
/**
 * Audio Playback Ended event
 */
declare const ev_async_audio_playback_ended: Real
/**
 * System event
 */
declare const ev_async_system_event: Real
/**
 * Dialog event
 */
declare const ev_async_dialog: Real
/**
 * Web event
 */
declare const ev_async_web: Real
/**
 * End the path
 */
declare const path_action_stop: Real
/**
 * Continue the path from the start, jumping to the start position again if the path is not closed
 */
declare const path_action_restart: Real
/**
 * Continue from the current position
 */
declare const path_action_continue: Real
/**
 * Go backwards along the path again (achieved by reversing the path movement speed)
 */
declare const path_action_reverse: Real
/**
 * The element is a background.
 */
declare const layerelementtype_background: Real
/**
 * The element is an instance.
 */
declare const layerelementtype_instance: Real
/**
 * The element is a sprite asset.
 */
declare const layerelementtype_sprite: Real
/**
 * The element is a tilemap.
 */
declare const layerelementtype_tilemap: Real
/**
 * The element is a particle system.
 */
declare const layerelementtype_particlesystem: Real
/**
 * The element is a legacy background tile (this is only valid for projects that have been imported from previous versions of GameMaker).
 */
declare const layerelementtype_tile: Real
/**
 * The element is a sequence asset.
 */
declare const layerelementtype_sequence: Real
/**
 * The element is a text element.
 */
declare const layerelementtype_text: Real
/**
 * Used to set/get the rotate bit of a tile data blob.
 */
declare const tile_rotate: Real
/**
 * Used to set/get the mirror bit of a tile data blob.
 */
declare const tile_mirror: Real
/**
 * Used to set/get the flip bit of a tile data blob.
 */
declare const tile_flip: Real
/**
 * A special constant that is for "and"-ing with the tile data blob to extract the tile index.
 */
declare const tile_index_mask: Real
/**
 * Indicates that text should be aligned to the left of the frame.
 */
declare const textalign_left: Real
/**
 * Indicates that text should be aligned to the right of the frame.
 */
declare const textalign_right: Real
/**
 * Indicates that text should be centred horizontally within the frame.
 */
declare const textalign_center: Real
/**
 * Indicates that text should be justified within the frame.
 */
declare const textalign_justify: Real
/**
 * Indicates that text should be aligned to the top of the frame.
 */
declare const textalign_top: Real
/**
 * Indicates that text should be aligned to the bottom of the frame.
 */
declare const textalign_bottom: Real
/**
 * Indicates that text should be centered vertically within the frame.
 */
declare const textalign_middle: Real
/**
 * This is a graphics (sprite) asset track.
 */
declare const seqtracktype_graphic: Real
/**
 * This is an audio asset track.
 */
declare const seqtracktype_audio: Real
/**
 * This is an audio effect parameter track.
 */
declare const seqtracktype_audioeffect: Real
/**
 * This is an instance asset track.
 */
declare const seqtracktype_instance: Real
/**
 * This is a sequence asset track.
 */
declare const seqtracktype_sequence: Real
/**
 * This is a clip mask group asset track.
 */
declare const seqtracktype_clipmask: Real
/**
 * This is a clip mask sprite asset track used for generating the clip mask.
 */
declare const seqtracktype_clipmask_mask: Real
/**
 * This is a clip mask sprite asset track that is being masked.
 */
declare const seqtracktype_clipmask_subject: Real
/**
 * This group folder asset track.
 */
declare const seqtracktype_group: Real
/**
 * This is a colour data parameter track.
 */
declare const seqtracktype_colour: Real
/**
 * This is a real number value parameter track.
 */
declare const seqtracktype_real: Real
/**
 * This is a broadcast message track.
 */
declare const seqtracktype_message: Real
/**
 * This is an event/moment track.
 */
declare const seqtracktype_moment: Real
/**
 * This is a text track.
 */
declare const seqtracktype_text: Real
/**
 * This is a particle system asset track.
 */
declare const seqtracktype_particlesystem: Real
/**
 * Not used currently.
 */
declare const seqtracktype_bool: Real
/**
 * Not used currently.
 */
declare const seqtracktype_string: Real
/**
 * Not used currently.
 */
declare const seqtracktype_spriteframes: Real
/**
 * Not used currently.
 */
declare const seqtracktype_empty: Real
/**
 * The sound will loop when played.
 */
declare const seqaudiokey_loop: Real
/**
 * The sound will only play once then stop.
 */
declare const seqaudiokey_oneshot: Real
/**
 * The text will be left-aligned.
 */
declare const seqtextkey_left: Real
/**
 * The text will be center-aligned.
 */
declare const seqtextkey_center: Real
/**
 * The text will be right-aligned.
 */
declare const seqtextkey_right: Real
/**
 * The text will be justified.
 */
declare const seqtextkey_justify: Real
/**
 * The text will be vertically aligned to the top of the frame.
 */
declare const seqtextkey_top: Real
/**
 * The text will be vertically aligned to the middle of the frame.
 */
declare const seqtextkey_middle: Real
/**
 * The text will be vertically aligned to the bottom of the frame.
 */
declare const seqtextkey_bottom: Real
/**
 * The sequence will play frames in an incremental order from left to right
 */
declare const seqdir_right: Real
/**
 * The sequence will play frames in a decremental order from right to left
 */
declare const seqdir_left: Real
/**
 * The sequence will play once then stop when finished.
 */
declare const seqplay_oneshot: Real
/**
 * The sequence will loop, with the playhead going back to the start when it reaches the end of the playback region.
 */
declare const seqplay_loop: Real
/**
 * The sequence will loop, with the playhead reversing direction when it reaches the end of the playback region.
 */
declare const seqplay_pingpong: Real
/**
 * Specifies that playbackSpeed should be interpreted as frames-per-second
 */
declare const spritespeed_framespersecond: Real
/**
 * Specifies that playbackSpeed should be interpreted as frames-per-game-frame.
 */
declare const spritespeed_framespergameframe: Real
/**
 * The left edge slice
 */
declare const nineslice_left: Real
/**
 * The top edge slice
 */
declare const nineslice_top: Real
/**
 * The right edge slice
 */
declare const nineslice_right: Real
/**
 * The bottom edge slice
 */
declare const nineslice_bottom: Real
/**
 * The centre slice
 */
declare const nineslice_centre: Real
/**
 * The slice will be stretched
 */
declare const nineslice_stretch: Real
/**
 * The slice will be repeated
 */
declare const nineslice_repeat: Real
/**
 * The slice will be repeated by mirroring
 */
declare const nineslice_mirror: Real
/**
 * The slice will not be stretched or repeated, resulting in a blank area after it
 */
declare const nineslice_blank: Real
/**
 * The slice will not appear at all
 */
declare const nineslice_hide: Real
/**
 * The texture group is unloaded
 */
declare const texturegroup_status_unloaded: Real
/**
 * The texture group is loading
 */
declare const texturegroup_status_loading: Real
/**
 * The texture group is loaded
 */
declare const texturegroup_status_loaded: Real
/**
 * The texture group is decompressed and ready to be used
 */
declare const texturegroup_status_fetched: Real
/**
 * 8 bit integer per channel (normalised) RGBA surface format
 */
declare const surface_rgba8unorm: Real
/**
 * 16 bit float single channel surface format
 */
declare const surface_r16float: Real
/**
 * 32 bit float single channel surface format
 */
declare const surface_r32float: Real
/**
 * 4 bit integer per channel (normalised) RGBA surface format
 */
declare const surface_rgba4unorm: Real
/**
 * 8 bit integer single channel (normalised) surface format
 */
declare const surface_r8unorm: Real
/**
 * 8 bit integer two channel (normalised) surface format
 */
declare const surface_rg8unorm: Real
/**
 * 16 bit float per channel RGBA surface format
 */
declare const surface_rgba16float: Real
/**
 * 32 bit float per channel RGBA surface format
 */
declare const surface_rgba32float: Real
/**
 * Automatic - The bounding box will be calculated automatically, based on the tolerance setting for the sprite
 */
declare const bboxmode_automatic: Real
/**
 * Full Image - The bounding box will be set to use the full width and height of the sprite, regardless of the tolerance and "empty" pixels
 */
declare const bboxmode_fullimage: Real
/**
 * Manual - The bounding box has been set manually to user defined values (either in the sprite editor, or using the function sprite_set_bbox())
 */
declare const bboxmode_manual: Real
/**
 * A rectangular (non-rotating) rectangle collision mask shape
 */
declare const bboxkind_rectangular: Real
/**
 * An elliptical collision mask shape
 */
declare const bboxkind_ellipse: Real
/**
 * A diamond collision mask shape
 */
declare const bboxkind_diamond: Real
/**
 * A precise collision mask, where the mask will conform to the non-transparent pixels of the sprite, based on the tolerance value given (see below))
 */
declare const bboxkind_precise: Real
/**
 * Collision mesh from Spine sprite
 */
declare const bboxkind_spine: Real
/**
 * A buffer of fixed size.
 */
declare const buffer_fixed: Real
/**
 * A buffer that will "grow" dynamically as data is added
 */
declare const buffer_grow: Real
/**
 * A buffer where the data will "wrap". When the data being added reaches the limit of the buffer size, the overwrite will be placed back at the start of the buffer, and further writing will continue from that point.
 */
declare const buffer_wrap: Real
/**
 * Special "stripped" buffer that is extremely fast to read/write to. Can only be used with buffer_u8 data types, and must be 1 byte aligned.
 */
declare const buffer_fast: Real
/**
 * This type of buffer is to be used as a vertex buffer only.
 */
declare const buffer_vbuffer: Real
/**
 * An unsigned, 8bit integer. This is a positive value from 0 to 255.
 */
declare const buffer_u8: Real
/**
 * A signed, 8bit integer. This can be a positive or negative value from -128 to 127 (0 is classed as positive).
 */
declare const buffer_s8: Real
/**
 * An unsigned, 16bit integer. This is a positive value from 0 - 65,535.
 */
declare const buffer_u16: Real
/**
 * A signed, 16bit integer. This can be a positive or negative value from -32,768 to 32,767 (0 is classed as positive).
 */
declare const buffer_s16: Real
/**
 * An unsigned, 32bit integer. This is a positive value from 0 to 4,294,967,295.
 */
declare const buffer_u32: Real
/**
 * A signed, 32bit integer. This can be a positive or negative value from -2,147,483,648 to 2,147,483,647 (0 is classed as positive).
 */
declare const buffer_s32: Real
/**
 * An unsigned 64bit integer.
 */
declare const buffer_u64: Real
/**
 * A 16bit float. This can be a positive or negative value within the range of +/- 65504. (Not currently supported!)
 */
declare const buffer_f16: Real
/**
 * A 32bit float. This can be a positive or negative value within the range of +/-16777216.
 */
declare const buffer_f32: Real
/**
 * A 64bit float.
 */
declare const buffer_f64: Real
/**
 * A boolean value. Can only be either 1 or 0 (true or false)
 */
declare const buffer_bool: Real
/**
 * A string of any size.
 */
declare const buffer_string: Real
/**
 * A string of any size, without the final null terminating character.
 */
declare const buffer_text: Real
/**
 * The start of the buffer
 */
declare const buffer_seek_start: Real
/**
 * A position relative to the current read/write position
 */
declare const buffer_seek_relative: Real
/**
 * The end of the buffer
 */
declare const buffer_seek_end: Real
/**
 * General buffer error.
 */
declare const buffer_error_general: Real
/**
 * Attempting to write to a buffer that doesn't have enough space for the size of the type being written.
 */
declare const buffer_error_out_of_space: Real
/**
 * Attempting to write an invalid type to a buffer.
 */
declare const buffer_error_invalid_type: Real
/**
 * The device is being held horizontally ie: The longest edge is from left to right, and the menu button is on the right.
 */
declare const display_landscape: Real
/**
 * As above, only now the menu button is on the left.
 */
declare const display_landscape_flipped: Real
/**
 * The device is being held vertically ie: The longest edge is from top to bottom, and the menu button is at the bottom.
 */
declare const display_portrait: Real
/**
 * As above, only now the menu button is at the top.
 */
declare const display_portrait_flipped: Real
/**
 * The sleep margin value is the main timing method
 */
declare const tm_sleep: Real
/**
 * Vsync timing is the main timing method (default for all supported platforms)
 */
declare const tm_countvsyncs: Real
/**
 * Ignore gamespeed and allow the system to control framerate
 */
declare const tm_systemtiming: Real
/**
 *  
 */
declare const cr_none: Real
/**
 * None
 */
declare const cr_default: Real
/**
 * None
 */
declare const cr_arrow: Real
/**
 * None
 */
declare const cr_cross: Real
/**
 * None
 */
declare const cr_beam: Real
/**
 * None
 */
declare const cr_size_nesw: Real
/**
 * None
 */
declare const cr_size_ns: Real
/**
 * None
 */
declare const cr_size_nwse: Real
/**
 * None
 */
declare const cr_size_we: Real
/**
 * None
 */
declare const cr_uparrow: Real
/**
 * None
 */
declare const cr_hourglass: Real
/**
 * None
 */
declare const cr_drag: Real
/**
 * None
 */
declare const cr_appstart: Real
/**
 * None
 */
declare const cr_handpoint: Real
/**
 * None
 */
declare const cr_size_all: Real
/**
 * A map data structure
 */
declare const ds_type_map: Real
/**
 * A list data structure
 */
declare const ds_type_list: Real
/**
 * A stack data structure
 */
declare const ds_type_stack: Real
/**
 * A grid data structure
 */
declare const ds_type_grid: Real
/**
 * A queue data structure
 */
declare const ds_type_queue: Real
/**
 * A priority data structure
 */
declare const ds_type_priority: Real
/**
 * #00ffff
 */
declare const c_aqua: Real
/**
 * #000000
 */
declare const c_black: Real
/**
 * #0000ff
 */
declare const c_blue: Real
/**
 * #404040
 */
declare const c_dkgray: Real
/**
 * #ff00ff
 */
declare const c_fuchsia: Real
/**
 * #808080
 */
declare const c_gray: Real
/**
 * #008000
 */
declare const c_green: Real
/**
 * #00ff00
 */
declare const c_lime: Real
/**
 * #c0c0c0
 */
declare const c_ltgray: Real
/**
 * #800000
 */
declare const c_maroon: Real
/**
 * #000080
 */
declare const c_navy: Real
/**
 * #808000
 */
declare const c_olive: Real
/**
 * #ffa040
 */
declare const c_orange: Real
/**
 * #800080
 */
declare const c_purple: Real
/**
 * #ff0000
 */
declare const c_red: Real
/**
 * #c0c0c0
 */
declare const c_silver: Real
/**
 * #008080
 */
declare const c_teal: Real
/**
 * #ffffff
 */
declare const c_white: Real
/**
 * #ffff00
 */
declare const c_yellow: Real
/**
 * #404040
 */
declare const c_dkgrey: Real
/**
 * #808080
 */
declare const c_grey: Real
/**
 * #c0c0c0
 */
declare const c_ltgrey: Real
/**
 * Normal blending (the default blend mode).
 */
declare const bm_normal: Real
/**
 * Additive blending. Luminosity values of light areas are added.
 */
declare const bm_add: Real
/**
 * Subtractive blending where the source colour is subtracted from the destination colour.
 */
declare const bm_subtract: Real
/**
 * Max blending. Similar to additive blending.
 */
declare const bm_max: Real
/**
 * Min blending (Takes the minimum value for each colour component).
 */
declare const bm_min: Real
/**
 * Subtractive blending where the destination colour is subtracted from the source colour.
 */
declare const bm_reverse_subtract: Real
/**
 * (0, 0, 0, 0)
 */
declare const bm_zero: Real
/**
 * (1, 1, 1, 1)
 */
declare const bm_one: Real
/**
 * (Rs, Gs, Bs, As)
 */
declare const bm_src_colour: Real
/**
 * (Rs, Gs, Bs, As)
 */
declare const bm_src_color: Real
/**
 * (1-Rs, 1-Gs, 1-Bs, 1-As)
 */
declare const bm_inv_src_colour: Real
/**
 * (1-Rs, 1-Gs, 1-Bs, 1-As)
 */
declare const bm_inv_src_color: Real
/**
 * (As, As, As, As)
 */
declare const bm_src_alpha: Real
/**
 * (1-As, 1-As, 1-As, 1-As)
 */
declare const bm_inv_src_alpha: Real
/**
 * (Ad, Ad, Ad, Ad)
 */
declare const bm_dest_alpha: Real
/**
 * (1-Ad, 1-Ad, 1-Ad, 1-Ad)
 */
declare const bm_inv_dest_alpha: Real
/**
 * (Rd, Gd, Bd, Ad)
 */
declare const bm_dest_colour: Real
/**
 * (Rd, Gd, Bd, Ad)
 */
declare const bm_dest_color: Real
/**
 * (1-Rd, 1-Gd, 1-Bd, 1-Ad)
 */
declare const bm_inv_dest_colour: Real
/**
 * (1-Rd, 1-Gd, 1-Bd, 1-Ad)
 */
declare const bm_inv_dest_color: Real
/**
 * (f, f, f, 1) where f = min(As, 1-Ad)
 */
declare const bm_src_alpha_sat: Real
/**
 * Additive blending. Luminosity values of light areas are added.
 */
declare const bm_eq_add: Real
/**
 * Subtractive blending where the source colour is subtracted from the destination colour.
 */
declare const bm_eq_subtract: Real
/**
 * Max blending (Takes the maximum value for each colour component).
 */
declare const bm_eq_max: Real
/**
 * Min blending (Takes the minimum value for each colour component).
 */
declare const bm_eq_min: Real
/**
 * Subtractive blending where the destination colour is subtracted from the source colour.
 */
declare const bm_eq_reverse_subtract: Real
/**
 * No culling will be done
 */
declare const cull_noculling: Real
/**
 * All clockwise triangles will be culled
 */
declare const cull_clockwise: Real
/**
 * All counter-clockwise triangles will be culled
 */
declare const cull_counterclockwise: Real
/**
 * The light is a directional light
 */
declare const lighttype_dir: Real
/**
 * The light is a point light
 */
declare const lighttype_point: Real
/**
 * Mipmapping is disabled.
 */
declare const mip_off: Real
/**
 * Mipmapping for all textures is enabled.
 */
declare const mip_on: Real
/**
 * Mipmapping is enabled for textures that have it enabled in the Texture Group options (default).
 */
declare const mip_markedonly: Real
/**
 * This means that blending between mipmap levels is disabled, which can cause visible texture transitions, but gives the best performance.
 */
declare const tf_point: Real
/**
 * This means that blending between mipmap levels is enabled (this is also known as trilinear filtering), which smooths the texture transitions, but it will give a minor hit to performance.
 */
declare const tf_linear: Real
/**
 * This means that anisotropic filtering is enabled, which greatly improves texture transition quality and can reduce the blurring visible with other filtering modes, but it has the highest hit on performance.
 */
declare const tf_anisotropic: Real
/**
 * None
 */
declare const ef_cloud: Real
/**
 * None
 */
declare const ef_ellipse: Real
/**
 * None
 */
declare const ef_explosion: Real
/**
 * None
 */
declare const ef_firework: Real
/**
 * None
 */
declare const ef_flare: Real
/**
 * None
 */
declare const ef_rain: Real
/**
 * None
 */
declare const ef_ring: Real
/**
 * None
 */
declare const ef_smoke: Real
/**
 * None
 */
declare const ef_smokeup: Real
/**
 * None
 */
declare const ef_snow: Real
/**
 * None
 */
declare const ef_spark: Real
/**
 * None
 */
declare const ef_star: Real
/**
 * Emitter streams new particles each frame.
 */
declare const ps_mode_stream: Real
/**
 * Emitter burst particles just once.
 */
declare const ps_mode_burst: Real
/**
 * A rectangular shape that fills the given area.
 */
declare const ps_shape_rectangle: Real
/**
 * An ellipse, with the width and height defined by the area.
 */
declare const ps_shape_ellipse: Real
/**
 * A diamond shape with the points at half width and half height.
 */
declare const ps_shape_diamond: Real
/**
 * A single line, where the start point is the left and top and the end point is the right and bottom.
 */
declare const ps_shape_line: Real
/**
 * A Linear distribution where all particles have an equal chance of appearing anywhere in the area.
 */
declare const ps_distr_linear: Real
/**
 * A gaussian distribution where more particles are generated in the center rather than the edges.
 */
declare const ps_distr_gaussian: Real
/**
 * An inverse gaussian distribution where more particles are generated at the edges than center.
 */
declare const ps_distr_invgaussian: Real
/**
 * A 1x1 pixel. (This is the default setting.)
 */
declare const pt_shape_pixel: Real
/**
 * A filled circle.
 */
declare const pt_shape_disk: Real
/**
 * A filled square.
 */
declare const pt_shape_square: Real
/**
 * An 8px wide horizontal line.
 */
declare const pt_shape_line: Real
/**
 * A five-point filled star.
 */
declare const pt_shape_star: Real
/**
 * A 3px outlined circle.
 */
declare const pt_shape_circle: Real
/**
 * A circle with an inward glow (looks like a bubble).
 */
declare const pt_shape_ring: Real
/**
 * A circle with an outward glow ' solid in the middle, glowing outwards.
 */
declare const pt_shape_sphere: Real
/**
 * A harshly glowing point (looks like an actual star in the night).
 */
declare const pt_shape_flare: Real
/**
 * A spark effect ' like a star with multiple points fading out.
 */
declare const pt_shape_spark: Real
/**
 * A squarish cloud of smoke ' requires multiple colours to resemble an explosion.
 */
declare const pt_shape_explosion: Real
/**
 * A thin cloud, requires up scaling and multiple particles to resemble a cloud.
 */
declare const pt_shape_cloud: Real
/**
 * A smooth version of the explosion effect. Use multiple to create a smoke cloud.
 */
declare const pt_shape_smoke: Real
/**
 * A generic snowflake shape.
 */
declare const pt_shape_snow: Real
/**
 * A single floating point value
 */
declare const vertex_type_float1: Real
/**
 * Two floating point values
 */
declare const vertex_type_float2: Real
/**
 * Three floating point values
 */
declare const vertex_type_float3: Real
/**
 * Four floating point values
 */
declare const vertex_type_float4: Real
/**
 * Four component values (r, g, b, a)
 */
declare const vertex_type_colour: Real
/**
 * Four component unsigned byte values (from 0 to 255)
 */
declare const vertex_type_ubyte4: Real
/**
 * position values (x, y, z)
 */
declare const vertex_usage_position: Real
/**
 * colour values (r, g, b, a)
 */
declare const vertex_usage_colour: Real
/**
 * vertex normal values (nx, ny, nz)
 */
declare const vertex_usage_normal: Real
/**
 * the blendweight of the input matrix (for skeletal animation, for example)
 */
declare const vertex_usage_blendweight: Real
/**
 * the indices of the matrices to use (for skeletal animation, for example)
 */
declare const vertex_usage_blendindices: Real
/**
 * vertex depth buffer value
 */
declare const vertex_usage_depth: Real
/**
 * tangent values
 */
declare const vertex_usage_tangent: Real
/**
 * binormal values
 */
declare const vertex_usage_binormal: Real
/**
 * fog values
 */
declare const vertex_usage_fog: Real
/**
 * sampler index
 */
declare const vertex_usage_sample: Real
/**
 * A primitive consisting of a list of points.
 */
declare const pr_pointlist: Real
/**
 * A primitive made up of a individual lines in a list.
 */
declare const pr_linelist: Real
/**
 * A primitive made up of a consecutive strip of lines.
 */
declare const pr_linestrip: Real
/**
 * A primitive made up of individual triangles in a list.
 */
declare const pr_trianglelist: Real
/**
 * A primitive made up of a consecutive strip of triangles.
 */
declare const pr_trianglestrip: Real
/**
 * None
 */
declare const fa_left: Real
/**
 * None
 */
declare const fa_center: Real
/**
 * None
 */
declare const fa_right: Real
/**
 * None
 */
declare const fa_top: Real
/**
 * None
 */
declare const fa_middle: Real
/**
 * None
 */
declare const fa_bottom: Real
/**
 * No file filter
 */
declare const fa_none: Real
/**
 * Read-only files
 */
declare const fa_readonly: Real
/**
 * Hidden files
 */
declare const fa_hidden: Real
/**
 * System files
 */
declare const fa_sysfile: Real
/**
 * Volume-id files
 */
declare const fa_volumeid: Real
/**
 * Directories
 */
declare const fa_directory: Real
/**
 * Archived files
 */
declare const fa_archive: Real
/**
 * The left mouse button
 */
declare const mb_left: Real
/**
 * The middle mouse button (this may not be valid for all target platforms)
 */
declare const mb_middle: Real
/**
 * The right mouse button
 */
declare const mb_right: Real
/**
 * Mouse side button 1
 */
declare const mb_side1: Real
/**
 * Mouse side button 2
 */
declare const mb_side2: Real
/**
 * Any of the mouse buttons
 */
declare const mb_any: Real
/**
 * No mouse button
 */
declare const mb_none: Real
/**
 * Mouse x-axis position in room coordinates
 */
declare const m_axisx: Real
/**
 * Mouse y-axis position in room coordinates
 */
declare const m_axisy: Real
/**
 * Mouse x-axis position in GUI coordinates
 */
declare const m_axisx_gui: Real
/**
 * Mouse y-axis position in GUI coordinates
 */
declare const m_axisy_gui: Real
/**
 * Mouse scroll direction up
 */
declare const m_scroll_up: Real
/**
 * Mouse scroll direction down
 */
declare const m_scroll_down: Real
/**
 * Top button 1 (this maps to the "A" on an Xbox 360 controller and the cross on a PS controller)
 */
declare const gp_face1: Real
/**
 * Top button 2 (this maps to the "B" on an Xbox 360 controller and the circle on a PS controller)
 */
declare const gp_face2: Real
/**
 * Top button 3 (this maps to the "X" on an Xbox 360 controller and the square on a PS controller)
 */
declare const gp_face3: Real
/**
 * Top button 4 (this maps to the "Y" on an Xbox 360 controller and the triangle on a PS controller)
 */
declare const gp_face4: Real
/**
 * Left shoulder button
 */
declare const gp_shoulderl: Real
/**
 * Left shoulder trigger
 */
declare const gp_shoulderlb: Real
/**
 * Right shoulder button
 */
declare const gp_shoulderr: Real
/**
 * Right shoulder trigger
 */
declare const gp_shoulderrb: Real
/**
 * The select button (on a DS4 controller, this triggers when you press the touchpad down)
 */
declare const gp_select: Real
/**
 * The start button (this is the "options" button on a PS4 controller)
 */
declare const gp_start: Real
/**
 * The left stick pressed (as a button)
 */
declare const gp_stickl: Real
/**
 * The right stick pressed (as a button)
 */
declare const gp_stickr: Real
/**
 * D-pad up
 */
declare const gp_padu: Real
/**
 * D-pad down
 */
declare const gp_padd: Real
/**
 * D-pad left
 */
declare const gp_padl: Real
/**
 * D-pad right
 */
declare const gp_padr: Real
/**
 * Left stick horizontal axis (analog)
 */
declare const gp_axislh: Real
/**
 * Left stick vertical axis (analog)
 */
declare const gp_axislv: Real
/**
 * Right stick horizontal axis (analog)
 */
declare const gp_axisrh: Real
/**
 * Right stick vertical axis (analog)
 */
declare const gp_axisrv: Real
/**
 * The gamepad's acceleration on the X axis
 */
declare const gp_axis_acceleration_x: Real
/**
 * The gamepad's acceleration on the Y axis
 */
declare const gp_axis_acceleration_y: Real
/**
 * The gamepad's acceleration on the Z axis
 */
declare const gp_axis_acceleration_z: Real
/**
 * The gamepad's angular velocity on the X axis
 */
declare const gp_axis_angular_velocity_x: Real
/**
 * The gamepad's angular velocity on the Y axis
 */
declare const gp_axis_angular_velocity_y: Real
/**
 * The gamepad's angular velocity on the Z axis
 */
declare const gp_axis_angular_velocity_z: Real
/**
 * The gamepad's X orientation
 */
declare const gp_axis_orientation_x: Real
/**
 * The gamepad's Y orientation
 */
declare const gp_axis_orientation_y: Real
/**
 * The gamepad's Z orientation
 */
declare const gp_axis_orientation_z: Real
/**
 * The gamepad's W orientation
 */
declare const gp_axis_orientation_w: Real
/**
 * The gamepad's Home button
 */
declare const gp_home: Real
/**
 * A gamepad button used for mapping extra buttons on a device
 */
declare const gp_extra1: Real
/**
 * A gamepad button used for mapping extra buttons on a device
 */
declare const gp_extra2: Real
/**
 * A gamepad button used for mapping extra buttons on a device
 */
declare const gp_extra3: Real
/**
 * A gamepad button used for mapping extra buttons on a device
 */
declare const gp_extra4: Real
/**
 * A gamepad button used for mapping extra buttons on a device
 */
declare const gp_extra5: Real
/**
 * A gamepad button used for mapping extra buttons on a device
 */
declare const gp_extra6: Real
/**
 * A gamepad button used for mapping paddle right button on a device
 */
declare const gp_paddler: Real
/**
 * A gamepad button used for mapping paddle left button on a device
 */
declare const gp_paddlel: Real
/**
 * A gamepad button used for mapping paddle right bottom button on a device
 */
declare const gp_paddlerb: Real
/**
 * A gamepad button used for mapping paddle left bottom button on a device
 */
declare const gp_paddlelb: Real
/**
 * A gamepad button used for mapping the touchpad button on a device (i.e. PS4 and PS5)
 */
declare const gp_touchpadbutton: Real
/**
 * keycode representing that no key is pressed
 */
declare const vk_nokey: Real
/**
 * keycode representing that any key is pressed
 */
declare const vk_anykey: Real
/**
 * keycode for the left arrow key
 */
declare const vk_left: Real
/**
 * keycode for the right arrow key
 */
declare const vk_right: Real
/**
 * keycode for the up arrow key
 */
declare const vk_up: Real
/**
 * keycode for the down arrow key
 */
declare const vk_down: Real
/**
 * enter key
 */
declare const vk_enter: Real
/**
 * escape key
 */
declare const vk_escape: Real
/**
 * space key
 */
declare const vk_space: Real
/**
 * either of the shift keys
 */
declare const vk_shift: Real
/**
 * either of the control keys
 */
declare const vk_control: Real
/**
 * alt key
 */
declare const vk_alt: Real
/**
 * backspace key
 */
declare const vk_backspace: Real
/**
 * tab key
 */
declare const vk_tab: Real
/**
 * home key
 */
declare const vk_home: Real
/**
 * end key
 */
declare const vk_end: Real
/**
 * delete key
 */
declare const vk_delete: Real
/**
 * insert key
 */
declare const vk_insert: Real
/**
 * pageup key
 */
declare const vk_pageup: Real
/**
 * pagedown key
 */
declare const vk_pagedown: Real
/**
 * pause/break key
 */
declare const vk_pause: Real
/**
 * printscreen/sysrq key
 */
declare const vk_printscreen: Real
/**
 * keycode for the function keys F1 to F12
 */
declare const vk_f1: Real
/**
 * number keys on the numeric keypad
 */
declare const vk_numpad0: Real
/**
 * multiply key on the numeric keypad
 */
declare const vk_multiply: Real
/**
 * divide key on the numeric keypad
 */
declare const vk_divide: Real
/**
 * add key on the numeric keypad
 */
declare const vk_add: Real
/**
 * subtract key on the numeric keypad
 */
declare const vk_subtract: Real
/**
 * decimal dot keys on the numeric keypad
 */
declare const vk_decimal: Real
/**
 * left shift key
 */
declare const vk_lshift: Real
/**
 * left control key
 */
declare const vk_lcontrol: Real
/**
 * left alt key
 */
declare const vk_lalt: Real
/**
 * right shift key
 */
declare const vk_rshift: Real
/**
 * right control key
 */
declare const vk_rcontrol: Real
/**
 * right alt key
 */
declare const vk_ralt: Real
/**
 * Gets the game speed using frames per second.
 */
declare const gamespeed_fps: Real
/**
 * Gets the game speed using microseconds per frame.
 */
declare const gamespeed_microseconds: Real
/**
 * 1 (although any value equal to or greater than 1 will evaluate as true)
 */
declare const true: Bool
/**
 * 0 (although any value less than 1 will also evaluate as false)
 */
declare const false: Bool
/**
 * 3.141592653589793280etc... (the exact value will depend on various factors like the platform being targeted)
 */
declare const pi: Real
/**
 * use the local time zone as set by the system
 */
declare const timezone_local: Real
/**
 * use Coordinated Universal Time
 */
declare const timezone_utc: Real
/**
 * The current view matrix
 */
declare const matrix_view: Real
/**
 * The current projection matrix
 */
declare const matrix_projection: Real
/**
 * The current world matrix
 */
declare const matrix_world: Real
/**
 * Create a socket using TCP.
 */
declare const network_socket_tcp: Real
/**
 * Create a socket using UDP.
 */
declare const network_socket_udp: Real
/**
 * Create a socket using Secure Websockets.
 */
declare const network_socket_wss: Real
/**
 * Create a web socket (only for connecting to HTML5 projects), using TCP.
 */
declare const network_socket_ws: Real
/**
 * Create a Bluetooth socket (currently unavailable!).
 */
declare const network_socket_bluetooth: Real
/**
 * Set a connection timeout value
 */
declare const network_config_connect_timeout: Real
/**
 * Tell GameMaker not to block on connect.
 */
declare const network_config_use_non_blocking_socket: Real
/**
 * Enables the "reliable UDP" protocol for an existing UDP socket
 */
declare const network_config_enable_reliable_udp: Real
/**
 * Disables the "reliable UDP" protocol for an existing UDP socked.
 */
declare const network_config_disable_reliable_udp: Real
/**
 * Sets the SO_LINGER timeout value to 0 for an exisiting TCP socket
 */
declare const network_config_avoid_time_wait: Real
/**
 * Set the protocol to use on websocket upgrade message, protocol is a string as 3rd parameter
 */
declare const network_config_websocket_protocol: Real
/**
 * Enables use of IPv6 multicast for broadcast discovery on a UDP socket.
 */
declare const network_config_enable_multicast: Real
/**
 * Disables use of IPv6 multicast for broadcast discovery on a UDP socket.
 */
declare const network_config_disable_multicast: Real
/**
 * Send a BINARY message over WeSocket
 */
declare const network_send_binary: Real
/**
 * Send a TEXT message over WebSocket
 */
declare const network_send_text: Real
/**
 * This is the default C, C++ call
 */
declare const dll_cdecl: Real
/**
 * This is the standard WinAPI call (Windows dll only)
 */
declare const dll_stdcall: Real
/**
 * A real number argument
 */
declare const ty_real: Real
/**
 * a null-terminated string argument
 */
declare const ty_string: Real
/**
 * Game is not being played in a browser
 */
declare const browser_not_a_browser: Real
/**
 * Unknown browser
 */
declare const browser_unknown: Real
/**
 * Internet Explorer
 */
declare const browser_ie: Real
/**
 * Internet Explorer on a mobile device
 */
declare const browser_ie_mobile: Real
/**
 * Mozilla Firefox
 */
declare const browser_firefox: Real
/**
 * Google Chrome
 */
declare const browser_chrome: Real
/**
 * Safari
 */
declare const browser_safari: Real
/**
 * Safari on a mobile device
 */
declare const browser_safari_mobile: Real
/**
 * Opera
 */
declare const browser_opera: Real
/**
 * Tizen mobile device browser
 */
declare const browser_tizen: Real
/**
 * Windows App
 */
declare const browser_windows_store: Real
/**
 * This indicates that the permission has been granted
 */
declare const os_permission_granted: Real
/**
 * This indicates that the permission has not been granted
 */
declare const os_permission_denied: Real
/**
 * This indicates that the permission has either been blocked by the phone settings, or that the user has previously denied the request and selected "Don't ask again".
 */
declare const os_permission_denied_dont_request: Real
/**
 * iPad
 */
declare const device_ios_ipad: Real
/**
 * Newer iPad with Retina display size of 2048 x 1536
 */
declare const device_ios_ipad_retina: Real
/**
 * iPhone6 with display size 1334 x 750
 */
declare const device_ios_iphone6: Real
/**
 * Larger iPhone 6 with display 1920 x 1080
 */
declare const device_ios_iphone6plus: Real
/**
 * iPhone5 with display size 640 x 1136)
 */
declare const device_ios_iphone5: Real
/**
 * Older iPhone/iPod Touch (480 x 320 screen) or Android phone
 */
declare const device_ios_iphone: Real
/**
 * Newer iPhone/iPod Touch with Retina display of 960 x 640
 */
declare const device_ios_iphone_retina: Real
/**
 * The device is actually an emulator (Windows Phone or Android)
 */
declare const device_emulator: Real
/**
 * Android tablet
 */
declare const device_tablet: Real
/**
 * Unknown or not iOS
 */
declare const device_ios_unknown: Real
/**
 * Windows OS
 */
declare const os_windows: Real
/**
 * Linux
 */
declare const os_linux: Real
/**
 * macOS X
 */
declare const os_macosx: Real
/**
 * iOS (iPhone, iPad, iPod Touch)
 */
declare const os_ios: Real
/**
 * Apple tvOS
 */
declare const os_tvos: Real
/**
 * Android
 */
declare const os_android: Real
/**
 * Sony PlayStation 4
 */
declare const os_ps4: Real
/**
 * Sony PlayStation 5
 */
declare const os_ps5: Real
/**
 * Microsoft Xbox Series X/S
 */
declare const os_xboxseriesxs: Real
/**
 * Microsoft GDK platform (Xbox One and Series X/S)
 */
declare const os_gdk: Real
/**
 * Nintendo Switch
 */
declare const os_switch: Real
/**
 * Opera GX
 */
declare const os_operagx: Real
/**
 * GX.games
 */
declare const os_gxgames: Real
/**
 * Unknown OS
 */
declare const os_unknown: Real
/**
 * The x coordinate of the first anchor point of the joint in the room
 */
declare const phy_joint_anchor_1_x: Real
/**
 * The y coordinate of the first anchor point of the joint in the room
 */
declare const phy_joint_anchor_1_y: Real
/**
 * The x coordinate of the second anchor point of the joint in the room
 */
declare const phy_joint_anchor_2_x: Real
/**
 * The y coordinate of the second anchor point of the joint in the room
 */
declare const phy_joint_anchor_2_y: Real
/**
 * This is the reaction force being applied to the second instance in a joint at the x anchor position
 */
declare const phy_joint_reaction_force_x: Real
/**
 * This is the reaction force being applied to the second instance in a joint at the y anchor position
 */
declare const phy_joint_reaction_force_y: Real
/**
 * This is the torque being applied to the second instance in a joint at the anchor position
 */
declare const phy_joint_reaction_torque: Real
/**
 * The value specified when the joint was created for the maximum motor force
 */
declare const phy_joint_max_motor_force: Real
/**
 * The value specified when the joint was created for the maximum motor torque
 */
declare const phy_joint_max_motor_torque: Real
/**
 * The current motor force
 */
declare const phy_joint_motor_force: Real
/**
 * The current motor speed
 */
declare const phy_joint_motor_speed: Real
/**
 * The current motor torque
 */
declare const phy_joint_motor_torque: Real
/**
 * The angle that a line between the two anchor points of the joint makes. This is calculated using the physics world coordinates ( not the GameMaker room             coordinates) in radians.
 */
declare const phy_joint_angle: Real
/**
 * Enable or disable angle limiting for the joint. Set the value to true to enable or false to disable.
 */
declare const phy_joint_angle_limits: Real
/**
 * The upper angle limit for the joint in degrees.
 */
declare const phy_joint_upper_angle_limit: Real
/**
 * The lower angle limit for the joint in degrees.
 */
declare const phy_joint_lower_angle_limit: Real
/**
 * Gets the distance between the anchor x/y coordinates and the local x/y coordinates.
 */
declare const phy_joint_translation: Real
/**
 * The current joint movement speed.
 */
declare const phy_joint_speed: Real
/**
 * The damping ratio is non-dimensional and defines the "springiness" of the joint. The value for this constant is typically between 0 and 1, but can be larger, and at 1, the damping is critical meaning that all oscillations should vanish.
 */
declare const phy_joint_damping_ratio: Real
/**
 * This will return (or set) the oscillation frequency for the joint, in hertz, and typically the frequency should be less than a half the frequency of the time step, as set by the function physics_world_update_speed().
 */
declare const phy_joint_frequency: Real
/**
 * This will return the length of the joint from the first local x/y coordinates to the first anchor x/y coordinates (Distance joints only, can only be read from)
 */
declare const phy_joint_length_1: Real
/**
 * This will return the length of the joint from the second local x/y coordinates to the second anchor x/y coordinates (Distance joints only, can only be written to)
 */
declare const phy_joint_length_2: Real
/**
 * The maximum torque value for the joint.
 */
declare const phy_joint_max_torque: Real
/**
 * The maximum force value for the joint.
 */
declare const phy_joint_max_force: Real
/**
 * The maximum extension for the connection between the two anchor points.
 */
declare const phy_joint_max_length: Real
/**
 * The default properties for a soft body particle.
 */
declare const phy_particle_flag_water: Real
/**
 * A zombie particle is one that will be destroyed after a single step with all others flagged in this way.
 */
declare const phy_particle_flag_zombie: Real
/**
 * This defines the particle as static, essentially creating it as an immovable object in the physics simulation, as they will remain in a fixed position no matter what collides with them. You should use this flag rather than set the density            to 0.
 */
declare const phy_particle_flag_wall: Real
/**
 * Spring particles produce the effect of being attached to one another, as if by a spring. Particles created with this flag are "connected" in pairs, with each particle being connected to the one that was closest to it at the time of creation.             Once paired, particles do not change "partners" , and the farther an external force pulls them from one another, the greater the power with which they will collide when that external force is removed. Note that no matter how far paired             particles get from each another, the connection between them will not snap.
 */
declare const phy_particle_flag_spring: Real
/**
 * Elastic particles deform and may also bounce when they collide with other rigid bodies in the physics simulation.
 */
declare const phy_particle_flag_elastic: Real
/**
 * A viscous particle is one that exhibits "clinginess" or "stickiness", like oil. Viscous particles will clump and stick together more.
 */
declare const phy_particle_flag_viscous: Real
/**
 * Powder particles produce a scattering effect such as you might see with sand or dust.
 */
declare const phy_particle_flag_powder: Real
/**
 * Tensile particles are used to produce the effect of surface tension, or the taut curvature on the surface of a body of liquid. They might be used, for example, to create the surface tension you would see on a drop of water. Once the tension is           broken, the particles bounce as if they were elastic, but also continue to attract each other. As a result, particles tend to form clusters as they bounce.
 */
declare const phy_particle_flag_tensile: Real
/**
 * Colour-mixing particles take on some of the colour of other particles with which they collide. Note that if only one of the two colliding particles is a colour-mixing one, the other particle retains its pre-collision colour.
 */
declare const phy_particle_flag_colourmixing: Real
/**
 * The flags value for the particle.
 */
declare const phy_particle_data_flag_typeflags: Real
/**
 * The x and y position of the particle.
 */
declare const phy_particle_data_flag_position: Real
/**
 * The horizontal and vertical speed.
 */
declare const phy_particle_data_flag_velocity: Real
/**
 * The colour and alpha value (hexadecimal).
 */
declare const phy_particle_data_flag_colour: Real
/**
 * The particle category (as defined when you created the particle or group to which it belongs).
 */
declare const phy_particle_data_flag_category: Real
/**
 * A solid particle group prevents other fixtures from lodging inside of it. Should anything penetrate it, the solid particle group pushes the offending fixture back out to its surface, making a a solid particle group possess an especially strong           repulsive force.
 */
declare const phy_particle_group_flag_solid: Real
/**
 * Rigid particle groups are ones whose shape does not change, even when they collide with other fixtures.
 */
declare const phy_particle_group_flag_rigid: Real
/**
 * None
 */
declare const self: Instance
/**
 * None
 */
declare const other: Instance
/**
 * None
 */
declare const all: Instance
/**
 * None
 */
declare const noone: Instance
/**
 * None
 */
declare const global: Real
/**
 * None
 */
declare const undefined: Undefined
/**
 * None
 */
declare const pointer_invalid: Pointer
/**
 * None
 */
declare const pointer_null: Pointer
/**
 * None
 */
declare const NaN: Real
/**
 * None
 */
declare const infinity: Real
/**
 * None
 */
declare const GM_build_date: Real
/**
 * None
 */
declare const GM_version: String
/**
 * None
 */
declare const GM_runtime_type: String
/**
 * None
 */
declare const GM_runtime_version: String
/**
 * full path and filename of the YYP project
 */
declare const GM_project_filename: String
/**
 * compile time constant of current build type either "exe" (for create executable) or "run" (for a run)
 */
declare const GM_build_type: String
/**
 * compile time constant of whether game is sandboxed or not (true - sandbox is on, false - sandbox is off)
 */
declare const GM_is_sandboxed: Bool
/**
 * compile time constant that returns the current line number
 */
declare const _GMLINE_: Real
/**
 * compile time constant that returns the current function name
 */
declare const _GMFUNCTION_: String
/**
 * compile time constant that returns the current filename
 */
declare const _GMFILE_: String
/**
 * None
 */
declare const ev_keypress: Real
/**
 * None
 */
declare const ev_keyrelease: Real
/**
 * None
 */
declare const ev_user1: Real
/**
 * None
 */
declare const ev_user2: Real
/**
 * None
 */
declare const ev_user3: Real
/**
 * None
 */
declare const ev_user4: Real
/**
 * None
 */
declare const ev_user5: Real
/**
 * None
 */
declare const ev_user6: Real
/**
 * None
 */
declare const ev_user7: Real
/**
 * None
 */
declare const ev_user8: Real
/**
 * None
 */
declare const ev_user9: Real
/**
 * None
 */
declare const ev_user10: Real
/**
 * None
 */
declare const ev_user11: Real
/**
 * None
 */
declare const ev_user12: Real
/**
 * None
 */
declare const ev_user13: Real
/**
 * None
 */
declare const ev_user14: Real
/**
 * None
 */
declare const ev_user15: Real
/**
 * None
 */
declare const ev_outside_view1: Real
/**
 * None
 */
declare const ev_outside_view2: Real
/**
 * None
 */
declare const ev_outside_view3: Real
/**
 * None
 */
declare const ev_outside_view4: Real
/**
 * None
 */
declare const ev_outside_view5: Real
/**
 * None
 */
declare const ev_outside_view6: Real
/**
 * None
 */
declare const ev_outside_view7: Real
/**
 * None
 */
declare const ev_boundary_view1: Real
/**
 * None
 */
declare const ev_boundary_view2: Real
/**
 * None
 */
declare const ev_boundary_view3: Real
/**
 * None
 */
declare const ev_boundary_view4: Real
/**
 * None
 */
declare const ev_boundary_view5: Real
/**
 * None
 */
declare const ev_boundary_view6: Real
/**
 * None
 */
declare const ev_boundary_view7: Real
/**
 * None
 */
declare const vk_return: Real
/**
 * None
 */
declare const vk_f2: Real
/**
 * None
 */
declare const vk_f3: Real
/**
 * None
 */
declare const vk_f4: Real
/**
 * None
 */
declare const vk_f5: Real
/**
 * None
 */
declare const vk_f6: Real
/**
 * None
 */
declare const vk_f7: Real
/**
 * None
 */
declare const vk_f8: Real
/**
 * None
 */
declare const vk_f9: Real
/**
 * None
 */
declare const vk_f10: Real
/**
 * None
 */
declare const vk_f11: Real
/**
 * None
 */
declare const vk_f12: Real
/**
 * None
 */
declare const vk_numpad1: Real
/**
 * None
 */
declare const vk_numpad2: Real
/**
 * None
 */
declare const vk_numpad3: Real
/**
 * None
 */
declare const vk_numpad4: Real
/**
 * None
 */
declare const vk_numpad5: Real
/**
 * None
 */
declare const vk_numpad6: Real
/**
 * None
 */
declare const vk_numpad7: Real
/**
 * None
 */
declare const vk_numpad8: Real
/**
 * None
 */
declare const vk_numpad9: Real
/**
 * None
 */
declare const pr_trianglefan: Real
/**
 * None
 */
declare const browser_edge: Real
/**
 * None
 */
declare const cmpfunc_never: Real
/**
 * None
 */
declare const cmpfunc_less: Real
/**
 * None
 */
declare const cmpfunc_equal: Real
/**
 * None
 */
declare const cmpfunc_lessequal: Real
/**
 * None
 */
declare const cmpfunc_greater: Real
/**
 * None
 */
declare const cmpfunc_notequal: Real
/**
 * None
 */
declare const cmpfunc_greaterequal: Real
/**
 * None
 */
declare const cmpfunc_always: Real
/**
 * Keeps the current value in the stencil buffer.
 */
declare const stencilop_keep: Real
/**
 * Sets the stencil buffer value to 0.
 */
declare const stencilop_zero: Real
/**
 * Sets the stencil buffer value to the stencil reference value.
 */
declare const stencilop_replace: Real
/**
 * Increments the stencil buffer value, wrapping to 0 at the maximum value.
 */
declare const stencilop_incr_wrap: Real
/**
 * Decrements the stencil buffer value, wrapping to the maximum value at 0.
 */
declare const stencilop_decr_wrap: Real
/**
 * Performs a bitwise inversion on the current stencil buffer value.
 */
declare const stencilop_invert: Real
/**
 * Increments the stencil buffer value, clamping at the maximum value.
 */
declare const stencilop_incr: Real
/**
 * Decrements the stencil buffer value, clamping at 0.
 */
declare const stencilop_decr: Real
/**
 * None
 */
declare const iap_ev_storeload: Real
/**
 * None
 */
declare const iap_ev_product: Real
/**
 * None
 */
declare const iap_ev_purchase: Real
/**
 * None
 */
declare const iap_ev_consume: Real
/**
 * None
 */
declare const iap_ev_restore: Real
/**
 * None
 */
declare const iap_storeload_ok: Real
/**
 * None
 */
declare const iap_storeload_failed: Real
/**
 * None
 */
declare const iap_status_uninitialised: Real
/**
 * None
 */
declare const iap_status_unavailable: Real
/**
 * None
 */
declare const iap_status_loading: Real
/**
 * None
 */
declare const iap_status_available: Real
/**
 * None
 */
declare const iap_status_processing: Real
/**
 * None
 */
declare const iap_status_restoring: Real
/**
 * None
 */
declare const iap_failed: Real
/**
 * None
 */
declare const iap_unavailable: Real
/**
 * None
 */
declare const iap_available: Real
/**
 * None
 */
declare const iap_purchased: Real
/**
 * None
 */
declare const iap_canceled: Real
/**
 * None
 */
declare const iap_refunded: Real
/**
 * None
 */
declare const phy_debug_render_aabb: Real
/**
 * None
 */
declare const phy_debug_render_collision_pairs: Real
/**
 * None
 */
declare const phy_debug_render_coms: Real
/**
 * None
 */
declare const phy_debug_render_core_shapes: Real
/**
 * None
 */
declare const phy_debug_render_joints: Real
/**
 * None
 */
declare const phy_debug_render_obb: Real
/**
 * None
 */
declare const phy_debug_render_shapes: Real
/**
 * None
 */
declare const phy_particle_flag_colormixing: Real
/**
 * None
 */
declare const phy_particle_data_flag_color: Real
/**
 * None
 */
declare const network_type_connect: Real
/**
 * None
 */
declare const network_type_disconnect: Real
/**
 * None
 */
declare const network_type_data: Real
/**
 * None
 */
declare const network_type_non_blocking_connect: Real
/**
 * None
 */
declare const network_type_up: Real
/**
 * None
 */
declare const network_type_up_failed: Real
/**
 * None
 */
declare const network_type_down: Real
/**
 * None
 */
declare const network_connect_none: Real
/**
 * None
 */
declare const network_connect_blocking: Real
/**
 * None
 */
declare const network_connect_nonblocking: Real
/**
 * None
 */
declare const network_connect_active: Real
/**
 * None
 */
declare const network_connect_passive: Real
/**
 * None
 */
declare const vertex_usage_color: Real
/**
 * None
 */
declare const vertex_usage_texcoord: Real
/**
 * None
 */
declare const vertex_usage_psize: Real
/**
 * None
 */
declare const vertex_type_color: Real
/**
 * None
 */
declare const layerelementtype_undefined: Real
/**
 * None
 */
declare const layerelementtype_oldtilemap: Real
/**
 * None
 */
declare const kbv_type_default: Real
/**
 * None
 */
declare const kbv_type_ascii: Real
/**
 * None
 */
declare const kbv_type_url: Real
/**
 * None
 */
declare const kbv_type_email: Real
/**
 * None
 */
declare const kbv_type_numbers: Real
/**
 * None
 */
declare const kbv_type_phone: Real
/**
 * None
 */
declare const kbv_type_phone_name: Real
/**
 * None
 */
declare const kbv_returnkey_default: Real
/**
 * None
 */
declare const kbv_returnkey_go: Real
/**
 * None
 */
declare const kbv_returnkey_google: Real
/**
 * None
 */
declare const kbv_returnkey_join: Real
/**
 * None
 */
declare const kbv_returnkey_next: Real
/**
 * None
 */
declare const kbv_returnkey_route: Real
/**
 * None
 */
declare const kbv_returnkey_search: Real
/**
 * None
 */
declare const kbv_returnkey_send: Real
/**
 * None
 */
declare const kbv_returnkey_yahoo: Real
/**
 * None
 */
declare const kbv_returnkey_done: Real
/**
 * None
 */
declare const kbv_returnkey_continue: Real
/**
 * None
 */
declare const kbv_returnkey_emergency: Real
/**
 * None
 */
declare const kbv_autocapitalize_none: Real
/**
 * None
 */
declare const kbv_autocapitalize_words: Real
/**
 * None
 */
declare const kbv_autocapitalize_sentences: Real
/**
 * None
 */
declare const kbv_autocapitalize_characters: Real
/**
 * None
 */
declare const nineslice_center: Real
/**
 * This is a colour data parameter track.
 */
declare const seqtracktype_color: Real
/**
 * None
 */
declare const seqinterpolation_assign: Real
/**
 * None
 */
declare const seqinterpolation_lerp: Real
/**
 * Used for linear interpolation between points.
 */
declare const animcurvetype_linear: Real
/**
 * Used for smooth interpolation between points using Catmull-Rom interpolation.
 */
declare const animcurvetype_catmullrom: Real
/**
 * Used for Bezier interpolation between points.
 */
declare const animcurvetype_bezier: Real
/**
 * None
 */
declare const video_format_rgba: Real
/**
 * None
 */
declare const video_format_yuv: Real
/**
 * None
 */
declare const video_status_closed: Real
/**
 * None
 */
declare const video_status_preparing: Real
/**
 * None
 */
declare const video_status_playing: Real
/**
 * None
 */
declare const video_status_paused: Real
/**
 * None
 */
declare const time_source_global: Real
/**
 * None
 */
declare const time_source_game: Real
/**
 * None
 */
declare const time_source_units_seconds: Real
/**
 * None
 */
declare const time_source_units_frames: Real
/**
 * None
 */
declare const time_source_expire_nearest: Real
/**
 * None
 */
declare const time_source_expire_after: Real
/**
 * None
 */
declare const time_source_state_initial: Real
/**
 * None
 */
declare const time_source_state_active: Real
/**
 * None
 */
declare const time_source_state_paused: Real
/**
 * None
 */
declare const time_source_state_stopped: Real
/**
 * None
 */
declare const debug_input_filter_keyboard: Real
/**
 * None
 */
declare const debug_input_filter_mouse: Real
/**
 * None
 */
declare const debug_input_filter_touch: Real
/**
 * Fired when the (in rollback_event_param) player_id is connected
 */
declare const rollback_connected_to_peer: Real
/**
 * Fired when the (in rollback_event_param) player_id is synchonizing
 */
declare const rollback_synchronizing_with_peer: Real
/**
 * Fired when the (in rollback_event_param) player_id is done synchonizing
 */
declare const rollback_synchronized_with_peer: Real
/**
 * Fired when the (in rollback_event_param) player_id is disconnected
 */
declare const rollback_disconnected_from_peer: Real
/**
 * Fired when the game is interrupted by a (in rollback_event_param) player_id
 */
declare const rollback_game_interrupted: Real
/**
 * Fired when the game resumes after being interrupted by (in rollback_event_param) player_id
 */
declare const rollback_game_resumed: Real
/**
 * Fired when the game you're trying to join is already full
 */
declare const rollback_game_full: Real
/**
 * Fired when you receive back info about the game (in rollback_event_param) player_id and num_players
 */
declare const rollback_game_info: Real
/**
 * Fired when connection attempt was rejected. The error can be caused by invalid token, mismatch in client versions, mismatch in protocol versions. Multiplayer session is closed automatically before event is fired
 */
declare const rollback_connection_rejected: Real
/**
 * Fired when connection attempt was rejected. The error means that client uses obsolete version of the protocol. Before this event is fired GM will show an error message in the UI. Multiplayer session is closed automatically before event is fired
 */
declare const rollback_protocol_rejected: Real
/**
 * Fired when server wants clients to stop the game. Usually this event means that clients are in inconsistent state. Multiplayer session is closed automatically before event is fired
 */
declare const rollback_end_game: Real
/**
 * Fired when you receive a chat message, including those sent by the local player (in rollback_event_param) message, from and to
 */
declare const rollback_chat_message: Real
/**
 * Fired when you receive new preferences set by any of the players in the game, including those set by the local player (in rollback_event_param) preferences, and player_id
 */
declare const rollback_player_prefs: Real
/**
 * Fired when the latency to the server is too high and it's impossible to run the game. Multiplayer session is closed automatically before event is fired
 */
declare const rollback_high_latency: Real
/**
 * Fired when you get info of where players should connect (in rollback_event_param) share_url
 */
declare const rollback_connect_info: Real
/**
 * Fired when you fail to connect to the backend
 */
declare const rollback_connect_error: Real
/**
 * The main audio bus
 */
declare const audio_bus_main: AudioBus
/**
 * None
 */
declare const sprite_add_ext_error_unknown: Real
/**
 * None
 */
declare const sprite_add_ext_error_cancelled: Real
/**
 * None
 */
declare const sprite_add_ext_error_spritenotfound: Real
/**
 * None
 */
declare const sprite_add_ext_error_loadfailed: Real
/**
 * None
 */
declare const sprite_add_ext_error_decompressfailed: Real
/**
 * None
 */
declare const sprite_add_ext_error_setupfailed: Real
/**
 * None
 */
declare var font_texture_page_size: Real
/**
 * None
 */
declare var instance_count: Real
/**
 * None
 */
declare var instance_id: Array[Instance]
/**
 * None
 */
declare var alarm: Array[Real]
/**
 * None
 */
declare var depth: Real
/**
 * None
 */
declare var direction: Real
/**
 * None
 */
declare var friction: Real
/**
 * None
 */
declare var gravity: Real
/**
 * None
 */
declare var gravity_direction: Real
/**
 * None
 */
declare var hspeed: Real
/**
 * None
 */
declare var id: Instance
/**
 * None
 */
declare var layer: Layer
/**
 * None
 */
declare var on_ui_layer: Bool
/**
 * None
 */
declare var persistent: Bool
/**
 * None
 */
declare var solid: Bool
/**
 * None
 */
declare var speed: Real
/**
 * None
 */
declare var visible: Bool
/**
 * None
 */
declare var managed: Bool
/**
 * None
 */
declare var vspeed: Real
/**
 * None
 */
declare var x: Real
/**
 * None
 */
declare var xprevious: Real
/**
 * None
 */
declare var xstart: Real
/**
 * None
 */
declare var y: Real
/**
 * None
 */
declare var yprevious: Real
/**
 * None
 */
declare var ystart: Real
/**
 * None
 */
declare var object_index: GMObject
/**
 * None
 */
declare var event_number: EventNumber
/**
 * None
 */
declare var event_object: GMObject
/**
 * None
 */
declare var event_type: EventType
/**
 * None
 */
declare var path_endaction: PathAction
/**
 * None
 */
declare var path_index: GMPath
/**
 * None
 */
declare var path_orientation: Real
/**
 * None
 */
declare var path_position: Real
/**
 * None
 */
declare var path_positionprevious: Real
/**
 * None
 */
declare var path_scale: Real
/**
 * None
 */
declare var path_speed: Real
/**
 * None
 */
declare var room: GMRoom
/**
 * None
 */
declare var room_first: GMRoom
/**
 * None
 */
declare var room_height: Real
/**
 * None
 */
declare var room_last: GMRoom
/**
 * None
 */
declare var room_persistent: Bool
/**
 * None
 */
declare var room_width: Real
/**
 * None
 */
declare var in_sequence: Bool
/**
 * None
 */
declare var sequence_instance: SequenceInstance
/**
 * None
 */
declare var drawn_by_sequence: Bool
/**
 * None
 */
declare var bbox_bottom: Real
/**
 * None
 */
declare var bbox_left: Real
/**
 * None
 */
declare var bbox_right: Real
/**
 * None
 */
declare var bbox_top: Real
/**
 * None
 */
declare var image_alpha: Real
/**
 * None
 */
declare var image_angle: Real
/**
 * None
 */
declare var image_blend: Color
/**
 * None
 */
declare var image_index: Real
/**
 * None
 */
declare var image_number: Real
/**
 * None
 */
declare var image_speed: Real
/**
 * None
 */
declare var image_xscale: Real
/**
 * None
 */
declare var image_yscale: Real
/**
 * None
 */
declare var mask_index: GMSprite
/**
 * None
 */
declare var sprite_height: Real
/**
 * None
 */
declare var sprite_index: GMSprite
/**
 * None
 */
declare var sprite_width: Real
/**
 * None
 */
declare var sprite_xoffset: Real
/**
 * None
 */
declare var sprite_yoffset: Real
/**
 * None
 */
declare var timeline_index: GMTimeline
/**
 * None
 */
declare var timeline_loop: Bool
/**
 * None
 */
declare var timeline_position: Real
/**
 * None
 */
declare var timeline_running: Bool
/**
 * None
 */
declare var timeline_speed: Real
/**
 * None
 */
declare var view_camera: Array[Camera]
/**
 * None
 */
declare var view_current: Real
/**
 * None
 */
declare var view_enabled: Bool
/**
 * None
 */
declare var view_hport: Array[Real]
/**
 * None
 */
declare var view_surface_id: Array[Surface]
/**
 * None
 */
declare var view_visible: Array[Bool]
/**
 * None
 */
declare var view_wport: Array[Real]
/**
 * None
 */
declare var view_xport: Array[Real]
/**
 * None
 */
declare var view_yport: Array[Real]
/**
 * None
 */
declare var debug_mode: Bool
/**
 * None
 */
declare var fps: Real
/**
 * None
 */
declare var fps_real: Real
/**
 * None
 */
declare var application_surface: Surface
/**
 * None
 */
declare var program_directory: String
/**
 * None
 */
declare var temp_directory: String
/**
 * None
 */
declare var cache_directory: String
/**
 * None
 */
declare var working_directory: String
/**
 * None
 */
declare var event_data: DsMap
/**
 * None
 */
declare var keyboard_key: VirtualKey
/**
 * None
 */
declare var keyboard_lastchar: String
/**
 * None
 */
declare var keyboard_lastkey: VirtualKey
/**
 * None
 */
declare var keyboard_string: String
/**
 * None
 */
declare var mouse_button: MouseButton
/**
 * None
 */
declare var mouse_lastbutton: MouseButton
/**
 * None
 */
declare var mouse_x: Real
/**
 * None
 */
declare var mouse_y: Real
/**
 * None
 */
declare var cursor_sprite: GMSprite
/**
 * None
 */
declare var game_display_name: String
/**
 * None
 */
declare var game_id: Real
/**
 * None
 */
declare var game_project_name: String
/**
 * None
 */
declare var game_save_id: String
/**
 * None
 */
declare var current_day: Real
/**
 * None
 */
declare var current_hour: Real
/**
 * None
 */
declare var current_minute: Real
/**
 * None
 */
declare var current_month: Real
/**
 * None
 */
declare var current_second: Real
/**
 * None
 */
declare var current_time: Real
/**
 * None
 */
declare var current_weekday: Real
/**
 * None
 */
declare var current_year: Real
/**
 * None
 */
declare var delta_time: Real
/**
 * None
 */
declare var os_browser: BrowserType
/**
 * None
 */
declare var os_device: DeviceType
/**
 * None
 */
declare var os_type: OperatingSystem
/**
 * None
 */
declare var os_version: Real
/**
 * None
 */
declare var phy_active: Bool
/**
 * None
 */
declare var phy_angular_damping: Real
/**
 * None
 */
declare var phy_angular_velocity: Real
/**
 * None
 */
declare var phy_bullet: Bool
/**
 * None
 */
declare var phy_collision_points: Real
/**
 * None
 */
declare var phy_collision_x: Array[Real]
/**
 * None
 */
declare var phy_collision_y: Array[Real]
/**
 * None
 */
declare var phy_col_normal_x: Real
/**
 * None
 */
declare var phy_col_normal_y: Real
/**
 * None
 */
declare var phy_com_x: Real
/**
 * None
 */
declare var phy_com_y: Real
/**
 * None
 */
declare var phy_dynamic: Bool
/**
 * None
 */
declare var phy_fixed_rotation: Bool
/**
 * None
 */
declare var phy_inertia: Real
/**
 * None
 */
declare var phy_kinematic: Bool
/**
 * None
 */
declare var phy_linear_damping: Real
/**
 * None
 */
declare var phy_linear_velocity_x: Real
/**
 * None
 */
declare var phy_linear_velocity_y: Real
/**
 * None
 */
declare var phy_mass: Real
/**
 * None
 */
declare var phy_position_x: Real
/**
 * None
 */
declare var phy_position_xprevious: Real
/**
 * None
 */
declare var phy_position_y: Real
/**
 * None
 */
declare var phy_position_yprevious: Real
/**
 * None
 */
declare var phy_rotation: Real
/**
 * None
 */
declare var phy_sleeping: Bool
/**
 * None
 */
declare var phy_speed: Real
/**
 * None
 */
declare var phy_speed_x: Real
/**
 * None
 */
declare var phy_speed_y: Real
/**
 * None
 */
declare var browser_height: Real
/**
 * None
 */
declare var browser_width: Real
/**
 * None
 */
declare var webgl_enabled: Bool
/**
 * None
 */
declare var argument: ArgumentIdentity
/**
 * None
 */
declare var argument0: ArgumentIdentity
/**
 * None
 */
declare var argument1: ArgumentIdentity
/**
 * None
 */
declare var argument2: ArgumentIdentity
/**
 * None
 */
declare var argument3: ArgumentIdentity
/**
 * None
 */
declare var argument4: ArgumentIdentity
/**
 * None
 */
declare var argument5: ArgumentIdentity
/**
 * None
 */
declare var argument6: ArgumentIdentity
/**
 * None
 */
declare var argument7: ArgumentIdentity
/**
 * None
 */
declare var argument8: ArgumentIdentity
/**
 * None
 */
declare var argument9: ArgumentIdentity
/**
 * None
 */
declare var argument10: ArgumentIdentity
/**
 * None
 */
declare var argument11: ArgumentIdentity
/**
 * None
 */
declare var argument12: ArgumentIdentity
/**
 * None
 */
declare var argument13: ArgumentIdentity
/**
 * None
 */
declare var argument14: ArgumentIdentity
/**
 * None
 */
declare var argument15: ArgumentIdentity
/**
 * None
 */
declare var argument_count: Real
/**
 * None
 */
declare var in_collision_tree: Bool
/**
 * None
 */
declare var score: Real
/**
 * None
 */
declare var lives: Real
/**
 * None
 */
declare var health: Real
/**
 * None
 */
declare var display_aa: Real
/**
 * None
 */
declare var async_load: DsMap
/**
 * None
 */
declare var rollback_current_frame: Real
/**
 * None
 */
declare var rollback_confirmed_frame: Real
/**
 * None
 */
declare var rollback_event_id: Real
/**
 * None
 */
declare var rollback_event_param: GMObject
/**
 * None
 */
declare var rollback_game_running: Bool
/**
 * None
 */
declare var rollback_api_server: String
/**
 * None
 */
declare var player_id: Real
/**
 * None
 */
declare var player_local: Bool
/**
 * None
 */
declare var player_avatar_url: String
/**
 * None
 */
declare var player_avatar_sprite: GMSprite
/**
 * None
 */
declare var player_type: String
/**
 * None
 */
declare var player_user_id: String
/**
 * None
 */
declare var wallpaper_config: GMObject
const enum AudioEffectType {
    /**
     * Distorts sound by reducing bandwidth.
     */
    Bitcrusher: number = 0

    /**
     * A delay/echo effect.
     */
    Delay: number = 1

    /**
     * A smoothed gain scalar effect.
     */
    Gain: number = 2

    /**
     * A high-pass filter effect.
     */
    HPF2: number = 3

    /**
     * A low-pass filter effect.
     */
    LPF2: number = 4

    /**
     * A reverberation effect.
     */
    Reverb1: number = 5

    /**
     * A gain modulator effect.
     */
    Tremolo: number = 6

    /**
     * A peak EQ filter effect.
     */
    PeakEQ: number = 7

    /**
     * A high-shelf filter effect
     */
    HiShelf: number = 8

    /**
     * A low-shelf filter effect.
     */
    LoShelf: number = 9

    /**
     * A parametric EQ effect.
     */
    EQ: number = 10

    /**
     * A dynamic range compressor effect.
     */
    Compressor: number = 11

}
const enum AudioLFOType {
    /**
     * An inverted sawtooth waveshape.
     */
    InvSawtooth: number = 0

    /**
     * A sawtooth waveshape.
     */
    Sawtooth: number = 1

    /**
     * A sine waveshape.
     */
    Sine: number = 2

    /**
     * A square waveshape.
     */
    Square: number = 3

    /**
     * A triangle waveshape.
     */
    Triangle: number = 4

}
const enum flexpanel_unit {
    /**
     * Number of pixels.
     */
    point: number = 1

    /**
     * A Percentage value.
     */
    percent: number = 2

    /**
     * auto
     */
    auto: number = 3

}
const enum flexpanel_position_type {
    /**
     * Static position type
     */
    static: number = 0

    /**
     * Relative position type
     */
    relative: number = 1

    /**
     * Absolute position type
     */
    absolute: number = 2

}
const enum flexpanel_justify {
    /**
     * flex_start
     */
    start: number = 0

    /**
     * center
     */
    center: number = 1

    /**
     * flex_end
     */
    flex_end: number = 2

    /**
     * space_between
     */
    space_between: number = 3

    /**
     * space_around
     */
    space_around: number = 4

    /**
     * space_evenly
     */
    space_evenly: number = 5

}
const enum flexpanel_direction {
    /**
     * Inherit layout direction from parent
     */
    inherit: number = 0

    /**
     * Layout calculated from left to right
     */
    LTR: number = 1

    /**
     * Layout calculated from right to left
     */
    RTL: number = 2

}
const enum flexpanel_gutter {
    /**
     * gapColumn
     */
    column: number = 0

    /**
     * gapRow
     */
    row: number = 1

    /**
     * gap
     */
    all_gutters: number = 2

}
const enum flexpanel_display {
    /**
     * Normal display
     */
    flex: number = 0

    /**
     * No display
     */
    none: number = 1

}
const enum flexpanel_flex_direction {
    /**
     * Vertical layout
     */
    column: number = 0

    /**
     * Reverse vertical layout
     */
    column_reverse: number = 1

    /**
     * Horizontal layout
     */
    row: number = 2

    /**
     * Reverse horizontal layout
     */
    row_reverse: number = 3

}
const enum flexpanel_align {
    /**
     * Auto align
     */
    auto: number = 0

    /**
     * flex_start
     */
    flex_start: number = 1

    /**
     * center
     */
    center: number = 2

    /**
     * flex_end
     */
    flex_end: number = 3

    /**
     * stretch
     */
    stretch: number = 4

    /**
     * baseline
     */
    baseline: number = 5

    /**
     * space_between
     */
    space_between: number = 6

    /**
     * space_around
     */
    space_around: number = 7

    /**
     * space_evenly
     */
    space_evenly: number = 8

}
const enum flexpanel_wrap {
    /**
     * Disable wrapping
     */
    no_wrap: number = 0

    /**
     * Enable wrapping
     */
    wrap: number = 1

    /**
     * Enable reverse wrapping
     */
    reverse: number = 2

}
const enum flexpanel_edge {
    /**
     * the left edge
     */
    left: number = 0

    /**
     * the top edge
     */
    top: number = 1

    /**
     * The right edge
     */
    right: number = 2

    /**
     * The bottom edge
     */
    bottom: number = 3

    /**
     * Start of the node
     */
    start: number = 4

    /**
     * End of the node
     */
    _end: number = 5

    /**
     * Horizontal edges
     */
    horizontal: number = 6

    /**
     * Vertical edges
     */
    vertical: number = 7

    /**
     * All edges
     */
    all_edges: number = 8

}
